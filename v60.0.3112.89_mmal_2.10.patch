diff --git a/src/base/BUILD.gn b/src/base/BUILD.gn
index 19fe0bc..7e3ed73 100644
--- a/src/base/BUILD.gn
+++ b/src/base/BUILD.gn
@@ -272,6 +272,8 @@ component("base") {
     "debug/close_handle_hook_win.h",
     "debug/crash_logging.cc",
     "debug/crash_logging.h",
+    "debug/ctime.cc",
+    "debug/ctime.h",
     "debug/debugger.cc",
     "debug/debugger.h",
     "debug/debugger_posix.cc",
diff --git a/src/base/allocator/partition_allocator/spin_lock.cc b/src/base/allocator/partition_allocator/spin_lock.cc
index f3958fb..964c780 100644
--- a/src/base/allocator/partition_allocator/spin_lock.cc
+++ b/src/base/allocator/partition_allocator/spin_lock.cc
@@ -27,7 +27,11 @@
 #if defined(ARCH_CPU_X86_64) || defined(ARCH_CPU_X86)
 #define YIELD_PROCESSOR __asm__ __volatile__("pause")
 #elif defined(ARCH_CPU_ARMEL) || defined(ARCH_CPU_ARM64)
+#if __ARM_ARCH >= 7
 #define YIELD_PROCESSOR __asm__ __volatile__("yield")
+#else
+#define YIELD_PROCESSOR __asm__ __volatile__("nop")
+#endif
 #elif defined(ARCH_CPU_MIPSEL)
 // The MIPS32 docs state that the PAUSE instruction is a no-op on older
 // architectures (first added in MIPS32r2). To avoid assembler errors when
diff --git a/src/base/debug/ctime.cc b/src/base/debug/ctime.cc
new file mode 100644
index 0000000..e581952
--- /dev/null
+++ b/src/base/debug/ctime.cc
@@ -0,0 +1,136 @@
+#include "base/debug/ctime.h"
+
+#include <stdio.h>
+#include <time.h>
+
+namespace base {
+
+static uint64_t ns_time()
+{
+  struct timespec tp;
+  clock_gettime(CLOCK_MONOTONIC, &tp);
+  return (int64_t)tp.tv_nsec + (int64_t)tp.tv_sec * (int64_t)1000000000;
+}
+
+CTimeBase::CTimeBase() :
+  start(ns_time())
+{
+}
+
+CTimeBase::~CTimeBase()
+{
+}
+
+uint64_t
+CTimeBase::elapsed_ns() const
+{
+  return ns_time() - start;
+}
+
+unsigned int
+CTimeBase::elapsed_ms() const
+{
+  return (unsigned int)((elapsed_ns() + 500000) / (uint64_t)1000000);
+}
+
+CTime::CTime(const char * const name, const bool nz_only) :
+  name(name),
+  nz_only(nz_only)
+{
+  if (!nz_only)
+  {
+    fprintf(stderr, "<<< %s\n", name);
+  }
+}
+
+void
+CTime::trace(const char * const str)
+{
+  const unsigned int ms = elapsed_ms();
+  if (ms != 0 || !nz_only)
+    fprintf(stderr, "--- %s:%s (%dms)\n", name, str, ms);
+}
+
+CTime:: ~CTime()
+{
+  const unsigned int ms = elapsed_ms();
+  if (ms != 0 || !nz_only)
+    fprintf(stderr, ">>> %s (%dms)\n", name, ms);
+}
+
+AccTimeBase::AccTimeBase() :
+  a(0),
+  n(0)
+{
+}
+
+AccTimeBase::~AccTimeBase()
+{
+}
+
+void
+AccTimeBase::add(const uint64_t d)
+{
+    ++n;
+    a += d;
+}
+
+
+AccTime:: AccTime(const char name[]) :
+    name(name),
+    last_count(0),
+    last_acc(0)
+{
+}
+
+AccTime::~AccTime()
+{
+}
+
+void
+AccTime::add(const uint64_t d)
+{
+  const uint64_t now = ns_time();
+
+  if (count() == 0)
+  {
+    start = now;
+    last_output = now;
+  }
+
+  AccTimeBase::add(d);
+
+  if (now - last_output >= 1000000000)
+  {
+    const int c = count();
+    const uint64_t acc = acc_ns();
+
+    fprintf(stderr, "%s: n=%d, cpu=%u ms/s\n", name, c - last_count,
+        (unsigned int)((acc - last_acc) / ((now - last_output) / (uint64_t)1000)));
+
+    last_acc = acc;
+    last_count = c;
+    last_output = now;
+  }
+}
+
+ATime::ATime(AccTimeBase& acc) : acc(acc) {}
+
+ATime::~ATime()
+{
+  acc.add(elapsed_ns());
+}
+
+#if 0
+#define CTIME_FN CTime _x_(__func__)
+#define CTIME_NZ_FN CTime _x_(__func__, true)
+#define CTIME_TRACE(s) _x_.trace(s)
+#else
+#define CTIME_FN
+#define CTIME_NZ_FN
+#define CTIME_TRACE(s)
+#endif
+
+}
+
+
diff --git a/src/base/debug/ctime.h b/src/base/debug/ctime.h
new file mode 100644
index 0000000..6777aaa
--- /dev/null
+++ b/src/base/debug/ctime.h
@@ -0,0 +1,90 @@
+#include <stdint.h>
+
+#include "base/base_export.h"
+
+namespace base {
+
+class BASE_EXPORT CTimeBase
+{
+  const uint64_t start;
+
+public:
+  CTimeBase();
+  virtual ~CTimeBase();
+  uint64_t elapsed_ns() const;
+  unsigned int elapsed_ms() const;
+};
+
+class BASE_EXPORT CTime : public CTimeBase
+{
+  const char * name;
+  bool nz_only;
+
+public:
+  CTime(const char * const name, const bool nz_only = false);
+  ~CTime() override;
+  void trace(const char * const str);
+};
+
+class BASE_EXPORT AccTimeBase
+{
+  uint64_t a;
+  int n;
+
+public:
+  AccTimeBase();
+  virtual ~AccTimeBase();
+  inline int count() const
+  {
+    return n;
+  }
+
+  virtual void add(const uint64_t d);
+
+  inline unsigned int acc_ms() const
+  {
+    return (unsigned int)((a + 500000) / 1000000);
+  }
+
+  inline uint64_t acc_ns() const
+  {
+    return a;
+  }
+};
+
+class BASE_EXPORT AccTime : public AccTimeBase
+{
+  const char * const name;
+  uint64_t start;
+  uint64_t last_output;
+  int last_count;
+  uint64_t last_acc;
+
+public:
+  AccTime(const char name[]);
+  ~AccTime() override;
+
+  void add(const uint64_t d) override;
+};
+
+class BASE_EXPORT ATime : public CTimeBase
+{
+  AccTimeBase& acc;
+
+public:
+  ATime(AccTimeBase& acc);
+  ~ATime() override;
+};
+
+#if 0
+#define CTIME_FN CTime _x_(__func__)
+#define CTIME_NZ_FN CTime _x_(__func__, true)
+#define CTIME_TRACE(s) _x_.trace(s)
+#else
+#define CTIME_FN
+#define CTIME_NZ_FN
+#define CTIME_TRACE(s)
+#endif
+
+}
+
diff --git a/src/base/files/file_enumerator_posix.cc b/src/base/files/file_enumerator_posix.cc
index 2b54c6d..fd7f26b 100644
--- a/src/base/files/file_enumerator_posix.cc
+++ b/src/base/files/file_enumerator_posix.cc
@@ -13,6 +13,8 @@
 #include "base/threading/thread_restrictions.h"
 #include "build/build_config.h"
 
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+
 namespace base {
 
 // FileEnumerator::FileInfo ----------------------------------------------------
diff --git a/src/base/metrics/persistent_memory_allocator.cc b/src/base/metrics/persistent_memory_allocator.cc
index deb82ac..474633a 100644
--- a/src/base/metrics/persistent_memory_allocator.cc
+++ b/src/base/metrics/persistent_memory_allocator.cc
@@ -336,9 +336,9 @@ PersistentMemoryAllocator::PersistentMemoryAllocator(Memory memory,
 
   // These atomics operate inter-process and so must be lock-free. The local
   // casts are to make sure it can be evaluated at compile time to a constant.
-  CHECK(((SharedMetadata*)0)->freeptr.is_lock_free());
-  CHECK(((SharedMetadata*)0)->flags.is_lock_free());
-  CHECK(((BlockHeader*)0)->next.is_lock_free());
+//  CHECK(((SharedMetadata*)0)->freeptr.is_lock_free());
+//  CHECK(((SharedMetadata*)0)->flags.is_lock_free());
+//  CHECK(((BlockHeader*)0)->next.is_lock_free());
   CHECK(corrupt_.is_lock_free());
 
   if (shared_meta()->cookie != kGlobalCookie) {
diff --git a/src/base/process/process_metrics_posix.cc b/src/base/process/process_metrics_posix.cc
index a4445e8..3cf8b56 100644
--- a/src/base/process/process_metrics_posix.cc
+++ b/src/base/process/process_metrics_posix.cc
@@ -11,6 +11,8 @@
 #include <sys/time.h>
 #include <unistd.h>
 
+#include <sys/syscall.h>
+
 #include "base/logging.h"
 #include "build/build_config.h"
 
@@ -45,6 +47,27 @@ static const rlim_t kSystemDefaultMaxFds = 1024;
 static const rlim_t kSystemDefaultMaxFds = 8192;
 #endif
 
+// On arm we end up using prlimit64 when getrlimit is called
+// prlimit64 is disallowed by the sandbox due to some
+// ChromeOS bug so actually use ugetrlimit
+#if defined(__arm__)
+#undef getrlimit
+#define getrlimit real_ugetrlimit
+
+static int real_ugetrlimit(const int limit, struct rlimit * const rlimit)
+{
+  int rv;
+  struct {
+    uint32_t rlim_cur;
+    uint32_t rlim_max;
+  } urlimit = {0,0};
+  rv = syscall(__NR_ugetrlimit, limit, &urlimit);
+  rlimit->rlim_cur = urlimit.rlim_cur;
+  rlimit->rlim_max = urlimit.rlim_max;
+  return rv;
+}
+#endif
+
 size_t GetMaxFds() {
   rlim_t max_fds;
   struct rlimit nofile;
diff --git a/src/build/.gitignore b/src/build/.gitignore
index 7459415..8a0fc56 100644
--- a/src/build/.gitignore
+++ b/src/build/.gitignore
@@ -14,6 +14,7 @@
 /util/support
 /x64/
 /linux/bin/eu-strip
+/linux/raspian_*-sysroot/
 /linux/debian_*-sysroot/
 /linux/ubuntu_*-sysroot/
 /ios_files
diff --git a/src/build/config/compiler/BUILD.gn b/src/build/config/compiler/BUILD.gn
index 6e3ddbd..9afed9d 100644
--- a/src/build/config/compiler/BUILD.gn
+++ b/src/build/config/compiler/BUILD.gn
@@ -1740,6 +1740,11 @@ config("default_symbols") {
   }
 }
 
+# Tweak arch
+config("force_march_armv7") {
+  cflags = [ "-march=armv7" ]
+}
+
 if (is_ios || is_mac) {
   # On Mac and iOS, this enables support for ARC (automatic ref-counting).
   # See http://clang.llvm.org/docs/AutomaticReferenceCounting.html.
diff --git a/src/build/config/linux/BUILD.gn b/src/build/config/linux/BUILD.gn
index aedff7e..a4eccd4 100644
--- a/src/build/config/linux/BUILD.gn
+++ b/src/build/config/linux/BUILD.gn
@@ -37,6 +37,8 @@ config("x11") {
     "X11",
     "X11-xcb",
     "xcb",
+    "xcb-image",
+    "xcb-shm",
     "Xcomposite",
     "Xcursor",
     "Xdamage",
diff --git a/src/build/secondary/third_party/libjpeg_turbo/BUILD.gn b/src/build/secondary/third_party/libjpeg_turbo/BUILD.gn
index 941c825d..e0e30b4 100644
--- a/src/build/secondary/third_party/libjpeg_turbo/BUILD.gn
+++ b/src/build/secondary/third_party/libjpeg_turbo/BUILD.gn
@@ -102,6 +102,25 @@ if (current_cpu == "x86" || current_cpu == "x64") {
   }
 }
 
+if (current_cpu == "arm") {
+  source_set("simd_arm_neon") {
+    sources = [
+      "simd/jsimd_arm_neon.S",
+    ]
+    cflags = [
+      "-mfpu=neon",
+    ]
+    visibility = [ ":simd" ]
+    configs -= [ "//build/config/compiler:chromium_code",
+      "//build/config/compiler:compiler_arm_fpu",
+    ]
+    configs += [
+      "//build/config/compiler:force_march_armv7",
+    ]
+  }
+}
+
+
 static_library("simd") {
   if (current_cpu == "x86") {
     deps = [
@@ -117,8 +136,11 @@ static_library("simd") {
     sources = [
       "simd/jsimd_x86_64.c",
     ]
-  } else if (current_cpu == "arm" && arm_version >= 7 &&
+  } else if (current_cpu == "arm" && arm_version >= 6 &&
              (arm_use_neon || arm_optionally_use_neon)) {
+    deps = [
+      ":simd_arm_neon",
+    ]
     sources = [
       "simd/jsimd_arm.c",
       "simd/jsimd_arm_neon.S",
diff --git a/src/cc/BUILD.gn b/src/cc/BUILD.gn
index 18e1856..ba7306c 100644
--- a/src/cc/BUILD.gn
+++ b/src/cc/BUILD.gn
@@ -190,6 +190,8 @@ cc_component("cc") {
     "output/overlay_processor.h",
     "output/overlay_strategy_fullscreen.cc",
     "output/overlay_strategy_fullscreen.h",
+    "output/overlay_strategy_single_shmid.cc",
+    "output/overlay_strategy_single_shmid.h",
     "output/overlay_strategy_single_on_top.cc",
     "output/overlay_strategy_single_on_top.h",
     "output/overlay_strategy_underlay.cc",
@@ -305,7 +307,10 @@ cc_component("cc") {
     "resources/scoped_ui_resource.h",
     "resources/shared_bitmap.cc",
     "resources/shared_bitmap.h",
+    "resources/shared_bitmap_manager.cc",
     "resources/shared_bitmap_manager.h",
+    "resources/shared_image_x11.cc",
+    "resources/shared_image_x11.h",
     "resources/single_release_callback.cc",
     "resources/single_release_callback.h",
     "resources/single_release_callback_impl.cc",
diff --git a/src/cc/ipc/cc_param_traits_macros.h b/src/cc/ipc/cc_param_traits_macros.h
index 4d8104a..df275cd 100644
--- a/src/cc/ipc/cc_param_traits_macros.h
+++ b/src/cc/ipc/cc_param_traits_macros.h
@@ -140,6 +140,7 @@ IPC_STRUCT_TRAITS_BEGIN(cc::TransferableResource)
   IPC_STRUCT_TRAITS_MEMBER(format)
   IPC_STRUCT_TRAITS_MEMBER(buffer_format)
   IPC_STRUCT_TRAITS_MEMBER(filter)
+  IPC_STRUCT_TRAITS_MEMBER(stride)
   IPC_STRUCT_TRAITS_MEMBER(size)
   IPC_STRUCT_TRAITS_MEMBER(mailbox_holder)
   IPC_STRUCT_TRAITS_MEMBER(read_lock_fences_enabled)
diff --git a/src/cc/ipc/shared_bitmap_manager.mojom b/src/cc/ipc/shared_bitmap_manager.mojom
index 6b2d54d..a04a5a0 100644
--- a/src/cc/ipc/shared_bitmap_manager.mojom
+++ b/src/cc/ipc/shared_bitmap_manager.mojom
@@ -14,7 +14,7 @@ import "gpu/ipc/common/mailbox.mojom";
 // compositor).
 interface SharedBitmapManager {
   // Informs the display compositor that the child allocated a shared bitmap.
-  DidAllocateSharedBitmap(handle<shared_buffer> buffer, gpu.mojom.Mailbox id);
+  DidAllocateSharedBitmap(handle<shared_buffer> buffer, gpu.mojom.Mailbox id, bool is_image);
 
   // Informs the display compositor that the child deleted a shared bitmap.
   DidDeleteSharedBitmap(gpu.mojom.Mailbox id);
diff --git a/src/cc/ipc/transferable_resource.mojom b/src/cc/ipc/transferable_resource.mojom
index 81696f6..f4b3215 100644
--- a/src/cc/ipc/transferable_resource.mojom
+++ b/src/cc/ipc/transferable_resource.mojom
@@ -25,6 +25,7 @@ struct TransferableResource {
   ResourceFormat format;
   gfx.mojom.BufferFormat buffer_format;
   uint32 filter;
+  uint32 stride;
   gfx.mojom.Size size;
   gpu.mojom.MailboxHolder mailbox_holder;
   bool read_lock_fences_enabled;
diff --git a/src/cc/ipc/transferable_resource_struct_traits.cc b/src/cc/ipc/transferable_resource_struct_traits.cc
index b9e9f4a..ee7f95d 100644
--- a/src/cc/ipc/transferable_resource_struct_traits.cc
+++ b/src/cc/ipc/transferable_resource_struct_traits.cc
@@ -23,6 +23,7 @@ bool StructTraits<cc::mojom::TransferableResourceDataView,
   out->format = static_cast<cc::ResourceFormat>(data.format());
   out->buffer_format = static_cast<gfx::BufferFormat>(data.buffer_format());
   out->filter = data.filter();
+  out->stride = data.stride();
   out->read_lock_fences_enabled = data.read_lock_fences_enabled();
   out->is_software = data.is_software();
   out->shared_bitmap_sequence_number = data.shared_bitmap_sequence_number();
diff --git a/src/cc/ipc/transferable_resource_struct_traits.h b/src/cc/ipc/transferable_resource_struct_traits.h
index 526a7e1..a48f4ad 100644
--- a/src/cc/ipc/transferable_resource_struct_traits.h
+++ b/src/cc/ipc/transferable_resource_struct_traits.h
@@ -32,6 +32,10 @@ struct StructTraits<cc::mojom::TransferableResourceDataView,
     return resource.filter;
   }
 
+  static size_t stride(const cc::TransferableResource& resource) {
+    return resource.stride;
+  }
+
   static gfx::Size size(const cc::TransferableResource& resource) {
     return resource.size;
   }
diff --git a/src/cc/layers/video_layer_impl.cc b/src/cc/layers/video_layer_impl.cc
index 7b29b32..1a89d2d 100644
--- a/src/cc/layers/video_layer_impl.cc
+++ b/src/cc/layers/video_layer_impl.cc
@@ -110,6 +110,13 @@ bool VideoLayerImpl::WillDraw(DrawMode draw_mode,
       updater_->CreateExternalResourcesFromVideoFrame(frame_);
   frame_resource_type_ = external_resources.type;
 
+  // (Pi) nasty kludge to pass size info back to decode
+  if (!frame_->mmal_resize_cb_.is_null()) {
+//    LOG(ERROR) << "vis:" << visible_layer_rect().ToString() << ", clip:" << clip_rect().ToString() <<
+//      ", drawable:" << drawable_content_rect().ToString() << ", bounds:" << bounds().ToString();
+    frame_->mmal_resize_cb_.Run(bounds());
+  }
+
   if (external_resources.type ==
       VideoFrameExternalResources::SOFTWARE_RESOURCE) {
     software_resources_ = external_resources.software_resources;
diff --git a/src/cc/output/overlay_strategy_single_shmid.cc b/src/cc/output/overlay_strategy_single_shmid.cc
new file mode 100644
index 0000000..f37ff6d
--- /dev/null
+++ b/src/cc/output/overlay_strategy_single_shmid.cc
@@ -0,0 +1,108 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "cc/output/overlay_strategy_single_shmid.h"
+
+#include "cc/base/math_util.h"
+#include "cc/output/overlay_candidate_validator.h"
+#include "cc/quads/draw_quad.h"
+#include "cc/resources/resource_provider.h"
+#include "cc/resources/shared_image_x11.h"
+#include "ui/gfx/geometry/rect_conversions.h"
+
+namespace cc {
+
+OverlayStrategySingleShmid::OverlayStrategySingleShmid(
+    OverlayCandidateValidator* capability_checker)
+    : capability_checker_(capability_checker) {
+  DCHECK(capability_checker);
+}
+
+OverlayStrategySingleShmid::~OverlayStrategySingleShmid() {}
+
+bool OverlayStrategySingleShmid::Attempt(ResourceProvider* resource_provider,
+                                         RenderPass* render_pass,
+                                         OverlayCandidateList* candidate_list,
+                                         std::vector<gfx::Rect>* content_bounds)
+{
+  QuadList* quad_list = &render_pass->quad_list;
+  for (auto it = quad_list->begin(); it != quad_list->end(); ++it) {
+    OverlayCandidate candidate;
+
+    if (it->material != DrawQuad::Material::TEXTURE_CONTENT)
+        continue;
+
+    if (!OverlayCandidate::FromDrawQuad(resource_provider, *it, &candidate))
+      continue;
+
+    ResourceProvider::ScopedReadLockSharedImageX11 lock(resource_provider, candidate.resource_id);
+
+    if (!lock.valid())
+      continue;
+
+    SharedImageX11 * const xshm = lock.shared_image_x11();
+#if 0
+    const OverlayCandidate& x = candidate;
+
+    LOG(ERROR) << "Got candidate id=" << x.resource_id <<
+      ", use_resource=" << x.use_output_surface_for_resource <<
+      ", display_rect=" << x.display_rect.ToString() <<
+      ", pixels=" << x.resource_size_in_pixels.ToString() <<
+      ", uv_rect=" << x.uv_rect.ToString() <<
+      ", quad_rect_in_target_space=" << x.quad_rect_in_target_space.ToString() <<
+      ", clip_rect=" << x.clip_rect.ToString() <<
+      ", z=" << x.plane_z_order << ", resource_provider=" << x.resource_provider <<
+      ", src_size=" << xshm->get_size().ToString() <<
+      ", pass damage=" << render_pass->damage_rect.ToString();
+#endif
+    if (xshm->get_size() != candidate.quad_rect_in_target_space.size()) {
+//      LOG(ERROR) << "Size mismatch " << xshm->get_size().ToString() << "/" << candidate.quad_rect_in_target_space.size().ToString();
+      continue;
+    }
+
+    // Check we cover the damage rect
+    if (!candidate.quad_rect_in_target_space.Contains(render_pass->damage_rect)) {
+//      LOG(ERROR) << "Damage exceeds texture " << candidate.quad_rect_in_target_space.ToString() << "/" << render_pass->damage_rect.ToString();
+      continue;
+    }
+
+    if (TryOverlay(quad_list, candidate_list, candidate, it)) {
+      return true;
+    }
+  }
+
+  return false;
+}
+
+bool OverlayStrategySingleShmid::TryOverlay(
+    QuadList* quad_list,
+    OverlayCandidateList* candidate_list,
+    const OverlayCandidate& candidate,
+    QuadList::Iterator candidate_iterator) {
+  // Check that no prior quads overlap it.
+  if (OverlayCandidate::IsOccluded(candidate, quad_list->cbegin(),
+                                   candidate_iterator))
+      return false;
+
+  // Add the overlay.
+  OverlayCandidateList new_candidate_list = *candidate_list;
+  new_candidate_list.push_back(candidate);
+  new_candidate_list.back().plane_z_order = 1;
+
+  // Check for support.
+  capability_checker_->CheckOverlaySupport(&new_candidate_list);
+
+  const OverlayCandidate& overlay_candidate = new_candidate_list.back();
+  // If the candidate can be handled by an overlay, create a pass for it.
+  if (overlay_candidate.overlay_handled) {
+    quad_list->EraseAndInvalidateAllPointers(candidate_iterator);
+    candidate_list->swap(new_candidate_list);
+    return true;
+  }
+
+  return false;
+}
+
+}  // namespace cc
+
diff --git a/src/cc/output/overlay_strategy_single_shmid.h b/src/cc/output/overlay_strategy_single_shmid.h
new file mode 100644
index 0000000..a115cb5
--- /dev/null
+++ b/src/cc/output/overlay_strategy_single_shmid.h
@@ -0,0 +1,40 @@
+// Copyright 2014 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CC_OUTPUT_OVERLAY_STRATEGY_SINGLE_SHMID_H_
+#define CC_OUTPUT_OVERLAY_STRATEGY_SINGLE_SHMID_H_
+
+#include "base/macros.h"
+#include "cc/output/overlay_processor.h"
+
+namespace cc {
+
+class OverlayCandidateValidator;
+
+class CC_EXPORT OverlayStrategySingleShmid : public OverlayProcessor::Strategy {
+ public:
+  explicit OverlayStrategySingleShmid(
+      OverlayCandidateValidator* capability_checker);
+  ~OverlayStrategySingleShmid() override;
+
+  bool Attempt(ResourceProvider* resource_provider,
+               RenderPass* render_pass,
+               OverlayCandidateList* candidate_list,
+               std::vector<gfx::Rect>* content_bounds) override;
+
+ private:
+  bool TryOverlay(QuadList* quad_list,
+                  OverlayCandidateList* candidate_list,
+                  const OverlayCandidate& candidate,
+                  QuadList::Iterator candidate_iterator);
+
+  OverlayCandidateValidator* capability_checker_;  // Weak.
+
+  DISALLOW_COPY_AND_ASSIGN(OverlayStrategySingleShmid);
+};
+
+}  // namespace cc
+
+#endif  // CC_OUTPUT_OVERLAY_STRATEGY_SINGLE_SHMID_H__
+
diff --git a/src/cc/output/software_output_device.cc b/src/cc/output/software_output_device.cc
index 04a426a..669688d 100644
--- a/src/cc/output/software_output_device.cc
+++ b/src/cc/output/software_output_device.cc
@@ -32,6 +32,14 @@ SkCanvas* SoftwareOutputDevice::BeginPaint(const gfx::Rect& damage_rect) {
 
 void SoftwareOutputDevice::EndPaint() {}
 
+void SoftwareOutputDevice::EndPaint(const gfx::Rect& damage_rect,
+  ResourceProvider * const resource_provider,
+  const OverlayCandidateList& overlay_list)
+{
+    // By default ignore the extra info
+    EndPaint();
+}
+
 gfx::VSyncProvider* SoftwareOutputDevice::GetVSyncProvider() {
   return vsync_provider_.get();
 }
diff --git a/src/cc/output/software_output_device.h b/src/cc/output/software_output_device.h
index 322e17c..85ebfdb 100644
--- a/src/cc/output/software_output_device.h
+++ b/src/cc/output/software_output_device.h
@@ -9,6 +9,7 @@
 
 #include "base/macros.h"
 #include "cc/cc_export.h"
+#include "cc/output/overlay_candidate.h"
 #include "third_party/skia/include/core/SkSurface.h"
 #include "ui/gfx/geometry/rect.h"
 #include "ui/gfx/geometry/size.h"
@@ -21,6 +22,7 @@ class VSyncProvider;
 }
 
 namespace cc {
+class ResourceProvider;
 
 // This is a "tear-off" class providing software drawing support to
 // OutputSurface, such as to a platform-provided window framebuffer.
@@ -45,6 +47,10 @@ class CC_EXPORT SoftwareOutputDevice {
   // that it holds to it.
   virtual void EndPaint();
 
+  virtual void EndPaint(const gfx::Rect& damage_rect,
+      ResourceProvider * const resource_provider,
+      const OverlayCandidateList& overlay_list);
+
   // Discard the backing buffer in the surface provided by this instance.
   virtual void DiscardBackbuffer() {}
 
diff --git a/src/cc/output/software_renderer.cc b/src/cc/output/software_renderer.cc
index 6fc30a0..3ed6939 100644
--- a/src/cc/output/software_renderer.cc
+++ b/src/cc/output/software_renderer.cc
@@ -82,7 +82,8 @@ void SoftwareRenderer::FinishDrawingFrame() {
   current_canvas_ = nullptr;
   root_canvas_ = nullptr;
 
-  output_device_->EndPaint();
+  DrawingFrame * const frame = current_frame();
+  output_device_->EndPaint(frame->root_damage_rect, resource_provider_, frame->overlay_list);
 }
 
 void SoftwareRenderer::SwapBuffers(std::vector<ui::LatencyInfo> latency_info) {
diff --git a/src/cc/resources/resource_provider.cc b/src/cc/resources/resource_provider.cc
index 002f10a..232586f 100644
--- a/src/cc/resources/resource_provider.cc
+++ b/src/cc/resources/resource_provider.cc
@@ -26,11 +26,13 @@
 #include "cc/resources/resource_util.h"
 #include "cc/resources/returned_resource.h"
 #include "cc/resources/shared_bitmap_manager.h"
+#include "cc/resources/shared_image_x11.h"
 #include "cc/resources/transferable_resource.h"
 #include "gpu/GLES2/gl2extchromium.h"
 #include "gpu/command_buffer/client/context_support.h"
 #include "gpu/command_buffer/client/gles2_interface.h"
 #include "gpu/command_buffer/client/gpu_memory_buffer_manager.h"
+#include "media/base/video_frame.h"
 #include "skia/ext/texture_handle.h"
 #include "third_party/khronos/GLES2/gl2.h"
 #include "third_party/khronos/GLES2/gl2ext.h"
@@ -211,6 +213,7 @@ ResourceProvider::Resource::Resource(GLuint texture_id,
       wants_promotion_hint(false),
 #endif
       read_lock_fence(nullptr),
+      stride(0),
       size(size),
       origin(origin),
       target(target),
@@ -253,6 +256,7 @@ ResourceProvider::Resource::Resource(uint8_t* pixels,
       wants_promotion_hint(false),
 #endif
       read_lock_fence(nullptr),
+      stride(0),
       size(size),
       origin(origin),
       target(0),
@@ -296,6 +300,7 @@ ResourceProvider::Resource::Resource(const SharedBitmapId& bitmap_id,
       wants_promotion_hint(false),
 #endif
       read_lock_fence(nullptr),
+      stride(0),
       size(size),
       origin(origin),
       target(0),
@@ -668,6 +673,29 @@ ResourceId ResourceProvider::CreateBitmap(const gfx::Size& size,
   return id;
 }
 
+ResourceId ResourceProvider::CreateFrameRef(const scoped_refptr<media::VideoFrame>& video_frame)
+{
+  std::unique_ptr<SharedBitmap> bitmap(shared_bitmap_manager_->AllocateSharedFrame(video_frame));
+
+  if (bitmap == nullptr) {
+    return 0;
+  }
+
+  uint8_t* const pixels = bitmap->pixels();
+  const gfx::Size size(video_frame->coded_size());
+
+  const ResourceId id = next_id_++;
+  Resource* resource = InsertResource(
+      id,
+      Resource(pixels, bitmap.release(), size, Resource::INTERNAL, GL_LINEAR));
+
+  resource->is_overlay_candidate = true;
+  resource->allocated = true;
+  resource->color_space = video_frame->ColorSpace();
+  resource->stride = video_frame->stride(0);
+  return id;
+}
+
 ResourceId ResourceProvider::CreateResourceFromTextureMailbox(
     const TextureMailbox& mailbox,
     std::unique_ptr<SingleReleaseCallbackImpl> release_callback_impl,
@@ -872,6 +900,16 @@ ResourceProvider::TextureHint ResourceProvider::GetTextureHint(ResourceId id) {
   return GetResource(id)->hint;
 }
 
+cc::SharedImageX11 *
+ResourceProvider::GetSharedImageX11(const ResourceId id)
+{
+  Resource * const resource = GetResource(id);
+  if (!resource->has_shared_bitmap_id) {
+    return nullptr;
+  }
+  return shared_bitmap_manager_->GetSharedImageX11ForBitmap(resource->shared_bitmap_id);
+}
+
 gfx::ColorSpace ResourceProvider::GetResourceColorSpaceForRaster(
     const Resource* resource) const {
   if (!settings_.enable_color_correct_rasterization)
@@ -1267,7 +1305,8 @@ void ResourceProvider::PopulateSkBitmapWithResource(SkBitmap* sk_bitmap,
   DCHECK_EQ(RGBA_8888, resource->format);
   SkImageInfo info = SkImageInfo::MakeN32Premul(resource->size.width(),
                                                 resource->size.height());
-  sk_bitmap->installPixels(info, resource->pixels, info.minRowBytes());
+  const size_t row_bytes = (resource->stride != 0) ? resource->stride : info.minRowBytes();
+  sk_bitmap->installPixels(info, resource->pixels, row_bytes);
 }
 
 ResourceProvider::ScopedReadLockSoftware::ScopedReadLockSoftware(
@@ -1282,6 +1321,32 @@ ResourceProvider::ScopedReadLockSoftware::~ScopedReadLockSoftware() {
   resource_provider_->UnlockForRead(resource_id_);
 }
 
+ResourceProvider::ScopedReadLockSharedImageX11::ScopedReadLockSharedImageX11(
+    ResourceProvider* resource_provider,
+    ResourceId resource_id)
+    : xshm_(nullptr),
+      resource_provider_(resource_provider),
+      resource_id_(resource_id)
+{
+  const Resource* resource = resource_provider->LockForRead(resource_id);
+  if (resource->has_shared_bitmap_id) {
+    xshm_ = resource_provider_->shared_bitmap_manager_->GetSharedImageX11ForBitmap(resource->shared_bitmap_id);
+  }
+  if (xshm_) {
+    xshm_->set_size(resource->size, resource->stride);
+  }
+  else {
+    // No point in holding a lock if we don't have any memory
+    resource_provider_->UnlockForRead(resource_id);
+  }
+}
+
+ResourceProvider::ScopedReadLockSharedImageX11::~ScopedReadLockSharedImageX11() {
+  if (xshm_) {
+    resource_provider_->UnlockForRead(resource_id_);
+  }
+}
+
 ResourceProvider::ScopedReadLockSkImage::ScopedReadLockSkImage(
     ResourceProvider* resource_provider,
     ResourceId resource_id)
@@ -1599,6 +1664,9 @@ void ResourceProvider::ReceiveFromChild(
       resource = InsertResource(local_id,
                                 Resource(it->mailbox_holder.mailbox, it->size,
                                          Resource::DELEGATED, GL_LINEAR));
+      // (Pi) Set overlay candidate on shared memory resources if the source
+      // thought it was a good idea
+      resource->is_overlay_candidate = it->is_overlay_candidate;
     } else {
       resource = InsertResource(
           local_id, Resource(0, it->size, Resource::DELEGATED,
@@ -1619,6 +1687,7 @@ void ResourceProvider::ReceiveFromChild(
 #endif
       resource->color_space = it->color_space;
     }
+    resource->stride = it->stride;
     resource->child_id = child;
     // Don't allocate a texture for a child.
     resource->allocated = true;
@@ -1787,6 +1856,7 @@ void ResourceProvider::TransferResource(Resource* source,
   resource->buffer_format = source->buffer_format;
   resource->mailbox_holder.texture_target = source->target;
   resource->filter = source->filter;
+  resource->stride = source->stride;
   resource->size = source->size;
   resource->read_lock_fences_enabled = source->read_lock_fences_enabled;
   resource->is_overlay_candidate = source->is_overlay_candidate;
diff --git a/src/cc/resources/resource_provider.h b/src/cc/resources/resource_provider.h
index 2b664ff..1eb2052 100644
--- a/src/cc/resources/resource_provider.h
+++ b/src/cc/resources/resource_provider.h
@@ -51,11 +51,21 @@ class GLES2Interface;
 }
 }
 
+namespace gfx {
+class Rect;
+class Vector2d;
+}
+
+namespace media {
+class VideoFrame;
+}
+
 namespace cc {
 class BlockingTaskRunner;
 class SharedBitmap;
 class SharedBitmapManager;
 class TextureIdAllocator;
+class SharedImageX11;
 
 // This class is not thread-safe and can only be called from the thread it was
 // created on (in practice, the impl thread).
@@ -133,6 +143,7 @@ class CC_EXPORT ResourceProvider
   GLenum GetResourceTextureTarget(ResourceId id);
   bool IsImmutable(ResourceId id);
   TextureHint GetTextureHint(ResourceId id);
+  cc::SharedImageX11 * GetSharedImageX11(const ResourceId id);
 
   // Creates a resource of the default resource type.
   ResourceId CreateResource(const gfx::Size& size,
@@ -148,6 +159,9 @@ class CC_EXPORT ResourceProvider
                                            gfx::BufferUsage usage,
                                            const gfx::ColorSpace& color_space);
 
+  // (Pi) Wrap a frame into a resource
+  ResourceId CreateFrameRef(const scoped_refptr<media::VideoFrame>& video_frame);
+
   // Wraps an external texture mailbox into a GL resource.
   ResourceId CreateResourceFromTextureMailbox(
       const TextureMailbox& mailbox,
@@ -382,6 +396,27 @@ class CC_EXPORT ResourceProvider
     DISALLOW_COPY_AND_ASSIGN(ScopedReadLockSoftware);
   };
 
+  class CC_EXPORT ScopedReadLockSharedImageX11 {
+  public:
+    ScopedReadLockSharedImageX11(ResourceProvider* resource_provider,
+                           ResourceId resource_id);
+    ~ScopedReadLockSharedImageX11();
+
+    SharedImageX11 * shared_image_x11() const {
+      DCHECK(valid());
+      return xshm_;
+    }
+
+    bool valid() const { return xshm_ != nullptr; }
+
+   private:
+    SharedImageX11 * xshm_;
+    ResourceProvider* resource_provider_;
+    ResourceId resource_id_;
+
+    DISALLOW_COPY_AND_ASSIGN(ScopedReadLockSharedImageX11);
+  };
+
   class CC_EXPORT ScopedReadLockSkImage {
    public:
     ScopedReadLockSkImage(ResourceProvider* resource_provider,
@@ -655,6 +690,7 @@ class CC_EXPORT ResourceProvider
     bool wants_promotion_hint : 1;
 #endif
     scoped_refptr<Fence> read_lock_fence;
+    size_t stride;
     gfx::Size size;
     Origin origin;
     GLenum target;
diff --git a/src/cc/resources/shared_bitmap_manager.cc b/src/cc/resources/shared_bitmap_manager.cc
new file mode 100644
index 0000000..3100e1f
--- /dev/null
+++ b/src/cc/resources/shared_bitmap_manager.cc
@@ -0,0 +1,21 @@
+#include "cc/resources/shared_bitmap_manager.h"
+
+namespace cc {
+
+std::unique_ptr<SharedBitmap>
+SharedBitmapManager::AllocateSharedFrame(
+      const scoped_refptr<media::VideoFrame>& video_frame)
+{
+    NOTREACHED();
+    return std::unique_ptr<SharedBitmap>();
+}
+
+
+SharedImageX11 * SharedBitmapManager::GetSharedImageX11ForBitmap(const SharedBitmapId& id)
+{
+    return nullptr;
+}
+
+} // namespace cc
+
+
diff --git a/src/cc/resources/shared_bitmap_manager.h b/src/cc/resources/shared_bitmap_manager.h
index 3257a00..48c44dd 100644
--- a/src/cc/resources/shared_bitmap_manager.h
+++ b/src/cc/resources/shared_bitmap_manager.h
@@ -8,11 +8,17 @@
 #include <memory>
 
 #include "base/macros.h"
+#include "base/memory/ref_counted.h"
 #include "cc/cc_export.h"
 #include "cc/resources/shared_bitmap.h"
 #include "ui/gfx/geometry/size.h"
 
+namespace media {
+class VideoFrame;
+}
+
 namespace cc {
+class SharedImageX11;
 
 class CC_EXPORT SharedBitmapManager {
  public:
@@ -24,6 +30,10 @@ class CC_EXPORT SharedBitmapManager {
   virtual std::unique_ptr<SharedBitmap> GetSharedBitmapFromId(
       const gfx::Size&,
       const SharedBitmapId&) = 0;
+  virtual std::unique_ptr<SharedBitmap> AllocateSharedFrame(
+      const scoped_refptr<media::VideoFrame>& video_frame);
+  virtual SharedImageX11 * GetSharedImageX11ForBitmap(
+      const SharedBitmapId& id);
 
  private:
   DISALLOW_COPY_AND_ASSIGN(SharedBitmapManager);
diff --git a/src/cc/resources/shared_image_x11.cc b/src/cc/resources/shared_image_x11.cc
new file mode 100644
index 0000000..72344a4
--- /dev/null
+++ b/src/cc/resources/shared_image_x11.cc
@@ -0,0 +1,351 @@
+#include <stddef.h>
+#include <stdint.h>
+#include <string.h>
+
+#include "base/memory/ptr_util.h"
+#include "cc/resources/shared_image_x11.h"
+#include "ui/gfx/x/x11_types.h"
+
+#include <X11/Xlib-xcb.h>
+#include <xcb/shm.h>
+#include <xcb/xcb_image.h>
+
+namespace cc
+{
+
+class XcbCookieTrue : public XcbCookie
+{
+public:
+  bool sync() override {return true;}
+};
+
+
+class XcbCookieVoid : public XcbCookie
+{
+  xcb_connection_t * const xcbc_;
+  const xcb_void_cookie_t cookie_;
+  xcb_generic_error_t * err_;
+  bool sync_done_;
+
+public:
+  XcbCookieVoid(xcb_connection_t * const xcbc, const xcb_void_cookie_t& cookie) :
+    xcbc_(xcbc),
+    cookie_(cookie),
+    sync_done_(false)
+  {
+  }
+
+  bool sync() override
+  {
+    if (!sync_done_)
+    {
+      err_ = xcb_request_check(xcbc_, cookie_);
+      sync_done_ = true;
+    }
+    return err_ == nullptr;
+  }
+
+  ~XcbCookieVoid() override
+  {
+    sync();
+    if (err_ != nullptr)
+      free(err_);
+  }
+};
+
+
+
+
+class SharedImageX11::X
+{
+  // ?? There must be a STL template that does this wrapping for me...
+  struct XcbImageDeleter
+  {
+    void operator ()(xcb_image_t * const img) {xcb_image_destroy(img);}
+  };
+
+  xcb_connection_t * xcbc_;
+  xcb_shm_seg_t shm_seg_;
+
+  // Use an image structure to store image info
+  // Will calculate expected strides for us
+  std::unique_ptr<xcb_image_t, XcbImageDeleter> img_;
+  bool attached_;
+
+public:
+  X(xcb_connection_t * const xcbc, unsigned int depth, const gfx::Size& size) :
+    xcbc_(xcbc),
+    shm_seg_(~0U),
+    img_(xcb_image_create_native(xcbc_, size.width(), size.height(), XCB_IMAGE_FORMAT_Z_PIXMAP, depth, nullptr, ~0U, nullptr)),
+    attached_(false)
+  {
+  }
+
+  ~X()
+  {
+//    LOG(ERROR) << __func__ << ": shmid=" << std::hex << shminfo_.shmid;
+    if (attached_)
+      xcb_shm_detach(xcbc_, shm_seg_);
+  }
+
+  bool check() const
+  {
+    return img_ != nullptr;
+  }
+
+  size_t stride() const
+  {
+    return img_ == nullptr ? 0 : img_->stride;
+  }
+
+  size_t image_size() const
+  {
+    if (img_ == nullptr)
+      return 0;
+
+    return img_->size;
+  }
+
+  bool attach_smh(const base::SharedMemoryHandle& shmfd)
+  {
+    if (attached_)
+    {
+      LOG(ERROR) << "Already attached";
+      return false;
+    }
+    if (img_ == nullptr)
+    {
+      LOG(ERROR) << "No image";
+      return false;
+    }
+
+    shm_seg_ = xcb_generate_id(xcbc_); // Error value is ~0U
+
+    // This closes the fd once sent so must dup to avoid local confusion
+    XcbCookieVoid err(xcbc_,
+      xcb_shm_attach_fd_checked(xcbc_, shm_seg_, dup(shmfd.GetHandle()), 1));
+    if (!err.sync())
+    {
+      LOG(ERROR) << "SHM attach failed";
+      return false;
+    }
+
+    attached_ = true;
+    return true;
+  }
+
+  // Messy declaration
+  std::unique_ptr<XcbCookie> put_image(const Drawable drawable, const xcb_gcontext_t cid, const gfx::Rect& rect, const gfx::Rect& src_rect)
+  {
+    if (!attached_)
+    {
+      LOG(ERROR) << "Not attached";
+      return nullptr;
+    }
+    if (img_ == nullptr)
+    {
+      LOG(ERROR) << "No image";
+      return nullptr;
+    }
+
+    // Xlib XID types should be compatible with xcb
+    // This includes Drawable, gcontext_t is extractable from GC
+
+    return base::MakeUnique<XcbCookieVoid>(xcbc_,
+      xcb_shm_put_image_checked(xcbc_, drawable, cid,
+        img_->width, img_->height, /* total width/height */
+        src_rect.x(), src_rect.y(),
+        rect.width(), rect.height(),  /* ?? should be src_width, src_height ?? */
+        rect.x(), rect.y(),
+        img_->depth,  // bits per pixel (probably)
+        img_->format,
+        0, /* send event */
+        shm_seg_,
+        0  /* offset */));
+  }
+
+  std::string ToString() const
+  {
+    if (img_ == nullptr)
+    {
+      return "<null>";
+    }
+
+    std::ostringstream s;
+    s << "imgsize=" << img_->width << "x" << img_->height;
+    return s.str();
+  }
+};
+
+
+
+
+SharedImageX11::SharedImageX11(std::unique_ptr<base::SharedMemory>&& shm) :
+  shm_(std::move(shm)),
+  stride_(0),
+  buffer_size_(0)
+{
+}
+
+SharedImageX11::SharedImageX11(const base::SharedMemoryHandle& shmh, const bool ro) :
+  shm_(base::MakeUnique<base::SharedMemory>(shmh, ro)),
+  stride_(0),
+  buffer_size_(0)
+{
+}
+
+SharedImageX11::SharedImageX11() :
+  shm_(base::MakeUnique<base::SharedMemory>()),
+  stride_(0),
+  buffer_size_(0)
+{
+}
+
+SharedImageX11::~SharedImageX11()
+{
+}
+
+
+// Check if the X Shared Memory extension is available.
+bool
+SharedImageX11::check_support(Display *const display)
+{
+  xcb_connection_t * const xcbc = XGetXCBConnection(display);
+  bool rv = false;
+
+  if (xcbc == nullptr)
+  {
+    LOG(ERROR) << "Unable to get xcb connection";
+    return false;
+  }
+
+  // Do not free this result
+  const xcb_query_extension_reply_t * xd;
+  if ((xd = xcb_get_extension_data(xcbc, &xcb_shm_id)) == nullptr ||
+      xd->response_type != 1 ||  // X_Reply - doesn't seem to be defined in xcb
+      !xd->present)
+  {
+    LOG(WARNING) << "SHM extension not supported";
+    return false;
+  }
+
+  xcb_generic_error_t * err = nullptr;
+  xcb_shm_query_version_reply_t * const qvr =
+    xcb_shm_query_version_reply(xcbc, xcb_shm_query_version(xcbc), &err);
+
+  if (err != nullptr)
+    LOG(ERROR) << __func__ << ": Error reply: code=" << err->error_code;
+  else if (qvr == nullptr || qvr->response_type != 1)
+    LOG(ERROR) << "SHM query version reply bad";
+  else if (qvr->major_version < 1 || (qvr->major_version == 1 && qvr->minor_version < 2))
+    LOG(WARNING) << "SHM version " << qvr->major_version << "." << qvr->minor_version <<" is too low; need 1.2";
+  else
+  {
+      LOG(INFO) << "SHM version " << qvr->major_version << "." << qvr->minor_version << ": OK";
+      rv = true;
+  }
+
+  if (err != nullptr)
+    free(err);
+  if (qvr != nullptr)
+    free(qvr);
+
+  return rv;
+}
+
+
+
+bool
+SharedImageX11::create_image(XDisplay * const display, const XWindowAttributes& attributes)
+{
+  if (x_ != nullptr)
+  {
+    // Assume everything matches
+    return true;
+  }
+
+  xcb_connection_t * const xcbc = XGetXCBConnection(display);
+  if (stride_ == 0)
+  {
+    // Let X pick our stride (probably creating a new image)
+    std::unique_ptr<X> x(base::MakeUnique<X>(xcbc, attributes.depth, size_));
+    if (!x->check())
+      return false;
+    x_ = std::move(x);
+  }
+  else
+  {
+    std::unique_ptr<X> x(base::MakeUnique<X>(xcbc, attributes.depth,
+      gfx::Size(stride_ / 4, size_.height())));
+    if (x->stride() != stride_)
+    {
+      LOG(ERROR) << "Generated mismatched strides: " << x->stride() << "/" << stride_;
+      return false;
+    }
+    x_ = std::move(x);
+  }
+
+  if (buffer_size_ == 0)
+    buffer_size_ = x_->image_size();
+  else if (buffer_size_ < x_->image_size())
+  {
+    LOG(ERROR) << "Image larger than buffer";
+    return false;
+  }
+
+  if (!base::SharedMemory::IsHandleValid(shm_->handle()))
+  {
+    if (!shm_->CreateAnonymous(buffer_size_))
+    {
+      LOG(ERROR) << "Failed to create anon shm: size=" << x_->image_size();
+      return false;
+    }
+  }
+
+  if (!x_->attach_smh(shm_->handle()))
+  {
+    x_ = nullptr;
+    return false;
+  }
+
+  return true;
+}
+
+std::unique_ptr<XcbCookie>
+SharedImageX11::put_image(const Drawable drawable, const GC gc,
+                            const gfx::Rect& rect, const gfx::Rect& src_rect)
+{
+  return x_ == nullptr ? nullptr :
+    x_->put_image(drawable, XGContextFromGC(gc), rect, src_rect);
+}
+
+size_t
+SharedImageX11::stride() const
+{
+  return x_ == nullptr ? 0 : x_->stride();
+}
+
+void *
+SharedImageX11::memory() const
+{
+  void * v = shm_->memory();
+  if (v != nullptr)
+    return v;
+  if (buffer_size_ == 0)
+  {
+    LOG(ERROR) << __func__ << ": No buffer size";
+    return nullptr;
+  }
+  if (!shm_->Map(buffer_size_))
+  {
+    LOG(ERROR) << __func__ << ": Map failed: size=" << buffer_size_;
+    return nullptr;
+  }
+  return shm_->memory();
+}
+
+
+
+
+}  // namespace cc
+
diff --git a/src/cc/resources/shared_image_x11.h b/src/cc/resources/shared_image_x11.h
new file mode 100644
index 0000000..136079a
--- /dev/null
+++ b/src/cc/resources/shared_image_x11.h
@@ -0,0 +1,63 @@
+#ifndef CC_RESOURCES_SHARED_IMAGE_X11_H_
+#define CC_RESOURCES_SHARED_IMAGE_X11_H_
+
+#include "cc/cc_export.h"
+#include "base/memory/shared_memory.h"
+#include "ui/gfx/x/x11_types.h"
+#include "ui/base/x/x11_util_internal.h"
+#include "ui/gfx/geometry/rect.h"
+
+namespace cc
+{
+
+class CC_EXPORT XcbCookie
+{
+public:
+  virtual ~XcbCookie() {};
+  virtual bool sync() = 0;
+};
+
+class CC_EXPORT SharedImageX11
+{
+  class X;
+
+  const std::unique_ptr<base::SharedMemory> shm_;
+
+  // Hide all the X shm stuff so we don't have to include the X libs
+  // which conflict with a number standard defs.
+  std::unique_ptr<X> x_;
+  size_t stride_;
+  gfx::Size size_;
+  size_t buffer_size_;
+
+public:
+  SharedImageX11(std::unique_ptr<base::SharedMemory>&& shm); // Can move a shm pointer into this
+  SharedImageX11(const base::SharedMemoryHandle& shmh, const bool ro = false);
+  SharedImageX11();
+  ~SharedImageX11();
+  void set_buffer_size(const size_t buffer_size) {
+    buffer_size_ = buffer_size;
+  }
+  void set_size(const gfx::Size& size, const size_t stride) {
+    stride_ = stride;
+    size_ = size;
+  }
+  const gfx::Size& get_size() const {
+    return size_;
+  }
+
+  static bool check_support(XDisplay * const display);
+  bool create_image(XDisplay * const display, const XWindowAttributes& attributes);
+  std::unique_ptr<XcbCookie> put_image(const Drawable drawable, const GC gc,
+                 const gfx::Rect& rect, const gfx::Rect& src_rect);
+
+  size_t stride() const;
+  void * memory() const;
+};
+
+}  // namespace cc
+
+#endif
+
+
+
diff --git a/src/cc/resources/transferable_resource.cc b/src/cc/resources/transferable_resource.cc
index 1c9fece2..fcfe561 100644
--- a/src/cc/resources/transferable_resource.cc
+++ b/src/cc/resources/transferable_resource.cc
@@ -12,6 +12,7 @@ TransferableResource::TransferableResource()
       format(RGBA_8888),
       buffer_format(gfx::BufferFormat::RGBA_8888),
       filter(0),
+      stride(0),
       read_lock_fences_enabled(false),
       is_software(false),
       shared_bitmap_sequence_number(0),
diff --git a/src/cc/resources/transferable_resource.h b/src/cc/resources/transferable_resource.h
index 2764787..c2c460f 100644
--- a/src/cc/resources/transferable_resource.h
+++ b/src/cc/resources/transferable_resource.h
@@ -38,6 +38,7 @@ struct CC_EXPORT TransferableResource {
   ResourceFormat format;
   gfx::BufferFormat buffer_format;
   uint32_t filter;
+  uint32_t stride;
   gfx::Size size;
   gpu::MailboxHolder mailbox_holder;
   bool read_lock_fences_enabled;
diff --git a/src/cc/resources/video_resource_updater.cc b/src/cc/resources/video_resource_updater.cc
index 9e69758..bd1ce9b 100644
--- a/src/cc/resources/video_resource_updater.cc
+++ b/src/cc/resources/video_resource_updater.cc
@@ -94,6 +94,7 @@ VideoFrameExternalResources::ResourceType ResourceTypeForVideoFrame(
     case media::PIXEL_FORMAT_Y8:
     case media::PIXEL_FORMAT_Y16:
     case media::PIXEL_FORMAT_I422:
+    case media::PIXEL_FORMAT_MMAL_BUFFER:
     case media::PIXEL_FORMAT_UNKNOWN:
       break;
   }
@@ -308,6 +309,7 @@ VideoFrameExternalResources VideoResourceUpdater::CreateForSoftwarePlanes(
 
   // Only YUV and Y16 software video frames are supported.
   DCHECK(media::IsYuvPlanar(input_frame_format) ||
+         input_frame_format == media::PIXEL_FORMAT_MMAL_BUFFER ||
          input_frame_format == media::PIXEL_FORMAT_Y16);
 
   const bool software_compositor = context_provider_ == NULL;
@@ -352,6 +354,37 @@ VideoFrameExternalResources VideoResourceUpdater::CreateForSoftwarePlanes(
       ++it;
   }
 
+  // If we have an mmal buffer then try to extract its shared memory and
+  // pass that on without copying
+  if (input_frame_format == media::PIXEL_FORMAT_MMAL_BUFFER)
+  {
+    ResourceId resource_id = resource_provider_->CreateFrameRef(video_frame);
+    if (resource_id != 0) {
+      const gfx::Size size(video_frame->stride(0) / 4, video_frame->rows(0));
+
+      all_resources_.push_front(
+          PlaneResource(resource_id, size, output_resource_format, gpu::Mailbox()));
+
+      // ??? Do I really need / want plane resource ???
+
+      PlaneResource& plane_resource = all_resources_.front();
+
+      plane_resource.SetUniqueId(video_frame->unique_id(), 0);
+
+      VideoFrameExternalResources external_resources;
+
+      // * software_resources are plane_resource.resource_id()
+
+//      LOG(ERROR) << "FrameRef, id:" << resource_id << ", plane id: " << plane_resource.resource_id() << ", size=" << size.ToString();
+
+      external_resources.software_resources.push_back(plane_resource.resource_id());
+      external_resources.software_release_callback = base::Bind(
+          &RemoveFrameResource, weak_ptr_factory_.GetWeakPtr(), resource_id);
+      external_resources.type = VideoFrameExternalResources::SOFTWARE_RESOURCE;
+      return external_resources;
+    }
+  }
+
   const int max_resource_size = resource_provider_->max_texture_size();
   std::vector<ResourceList::iterator> plane_resources;
   for (size_t i = 0; i < output_plane_count; ++i) {
@@ -671,6 +704,43 @@ VideoFrameExternalResources VideoResourceUpdater::CreateForHardwarePlanes(
   return external_resources;
 }
 
+void VideoResourceUpdater::RemoveFrameResource(
+  base::WeakPtr<VideoResourceUpdater> updater,
+  ResourceId resource_id,
+  const gpu::SyncToken& sync_token,
+  bool lost_resource,
+  BlockingTaskRunner* main_thread_task_runner)
+{
+  if (!updater.get()) {
+    // Resource was already deleted.
+    return;
+  }
+
+  const ResourceList::iterator resource_it = std::find_if(
+      updater->all_resources_.begin(), updater->all_resources_.end(),
+      [resource_id](const PlaneResource& plane_resource) {
+        return plane_resource.resource_id() == resource_id;
+      });
+  if (resource_it == updater->all_resources_.end())
+  {
+    LOG(ERROR) << __func__ << " id:" << resource_id << " not found";
+    return;
+  }
+
+//  LOG(ERROR) << __func__ << " id:" << resource_id << " found, lost=" << lost_resource;
+
+  ContextProvider* context_provider = updater->context_provider_;
+  if (context_provider && sync_token.HasData()) {
+    context_provider->ContextGL()->WaitSyncTokenCHROMIUM(
+        sync_token.GetConstData());
+  }
+
+  // We always delete this once we are done with it
+  // The buffer itself is managed by the decoder
+  resource_it->clear_refs();
+  updater->DeleteResource(resource_it);
+}
+
 // static
 void VideoResourceUpdater::RecycleResource(
     base::WeakPtr<VideoResourceUpdater> updater,
diff --git a/src/cc/resources/video_resource_updater.h b/src/cc/resources/video_resource_updater.h
index f5f949c..83e1a9e 100644
--- a/src/cc/resources/video_resource_updater.h
+++ b/src/cc/resources/video_resource_updater.h
@@ -162,6 +162,11 @@ class CC_EXPORT VideoResourceUpdater {
   VideoFrameExternalResources CreateForSoftwarePlanes(
       scoped_refptr<media::VideoFrame> video_frame);
 
+  static void RemoveFrameResource(base::WeakPtr<VideoResourceUpdater> updater,
+                              unsigned resource_id,
+                              const gpu::SyncToken& sync_token,
+                              bool lost_resource,
+                              BlockingTaskRunner* main_thread_task_runner);
   static void RecycleResource(base::WeakPtr<VideoResourceUpdater> updater,
                               unsigned resource_id,
                               const gpu::SyncToken& sync_token,
diff --git a/src/chrome/BUILD.gn b/src/chrome/BUILD.gn
index 070d7c6..ca6d627 100644
--- a/src/chrome/BUILD.gn
+++ b/src/chrome/BUILD.gn
@@ -21,6 +21,7 @@ import("//third_party/WebKit/public/public_features.gni")
 import("//third_party/widevine/cdm/widevine.gni")
 import("//tools/resources/generate_resource_whitelist.gni")
 import("//v8/gni/v8.gni")
+import("//build/config/sysroot.gni")
 
 if (is_android) {
   import("//build/config/android/rules.gni")
@@ -273,6 +274,12 @@ if (!is_android && !is_mac) {
 
       ldflags = [ "-pie" ]
 
+      ldflags += [
+       "-L$sysroot/opt/vc/lib",
+       "-Wl,--rpath=/opt/vc/lib,--rpath-link=$sysroot/opt/vc/lib",
+       "-Wl,--start-group", "-lbcm_host", "-lmmal", "-lmmal_util", "-lmmal_core", "-lmmal_vc_client", "-lvcos", "-lvcsm", "-lvchostif", "-lvchiq_arm", "-Wl,--end-group",
+      ]
+
       # Chrome OS debug builds for arm need to pass --long-plt to the linker.
       # See https://bugs.chromium.org/p/chromium/issues/detail?id=583532
       if (is_chromeos && is_debug && target_cpu == "arm") {
diff --git a/src/chrome/app/chrome_main_delegate.cc b/src/chrome/app/chrome_main_delegate.cc
index 12bde04..462d82b 100644
--- a/src/chrome/app/chrome_main_delegate.cc
+++ b/src/chrome/app/chrome_main_delegate.cc
@@ -48,6 +48,7 @@
 #include "components/component_updater/component_updater_paths.h"
 #include "components/content_settings/core/common/content_settings_pattern.h"
 #include "components/crash/content/app/crash_reporter_client.h"
+#include "components/version_info/pi_patch_version_info.h"
 #include "components/version_info/version_info.h"
 #include "content/public/common/content_client.h"
 #include "content/public/common/content_paths.h"
@@ -334,6 +335,15 @@ bool HandleVersionSwitches(const base::CommandLine& command_line) {
   }
 #endif
 
+  if (command_line.HasSwitch(switches::kPiPatchVersion)) {
+    printf("%s %s %s\nPi patch: %s\n",
+           version_info::GetProductName().c_str(),
+           version_info::GetVersionNumber().c_str(),
+           chrome::GetChannelString().c_str(),
+           version_info::GetPiPatchVersionString().c_str());
+    return true;
+  }
+
   if (command_line.HasSwitch(switches::kVersion)) {
     printf("%s %s %s\n",
            version_info::GetProductName().c_str(),
diff --git a/src/chrome/browser/ui/libgtkui/BUILD.gn b/src/chrome/browser/ui/libgtkui/BUILD.gn
index 05e5209..07db307 100644
--- a/src/chrome/browser/ui/libgtkui/BUILD.gn
+++ b/src/chrome/browser/ui/libgtkui/BUILD.gn
@@ -20,6 +20,8 @@ config("libgtkui_warnings") {
 
       # G_STATIC_ASSERT uses a typedef as a static_assert.
       "-Wno-unused-local-typedef",
+
+      "-Wno-deprecated-declarations",
     ]
   }
 }
diff --git a/src/chrome/common/chrome_switches.cc b/src/chrome/common/chrome_switches.cc
index 047c0a9..9101858 100644
--- a/src/chrome/common/chrome_switches.cc
+++ b/src/chrome/common/chrome_switches.cc
@@ -1160,6 +1160,10 @@ extern const char kEnableInputImeAPI[] = "enable-input-ime-api";
 extern const char kEnableNewAppMenuIcon[] = "enable-new-app-menu-icon";
 #endif
 
+// Print the patch version and return
+const char kPiPatchVersion[] = "pi-patch-version";
+
+
 bool ExtensionsDisabled(const base::CommandLine& command_line) {
   return command_line.HasSwitch(switches::kDisableExtensions) ||
          command_line.HasSwitch(switches::kDisableExtensionsExcept);
diff --git a/src/chrome/common/chrome_switches.h b/src/chrome/common/chrome_switches.h
index a6ec425..0e8b06f 100644
--- a/src/chrome/common/chrome_switches.h
+++ b/src/chrome/common/chrome_switches.h
@@ -359,6 +359,8 @@ extern const char kEnableInputImeAPI[];
 extern const char kEnableNewAppMenuIcon[];
 #endif
 
+extern const char kPiPatchVersion[];
+
 bool ExtensionsDisabled(const base::CommandLine& command_line);
 bool MdFeedbackEnabled();
 bool MdPolicyPageEnabled();
diff --git a/src/components/version_info/BUILD.gn b/src/components/version_info/BUILD.gn
index 1fe5cfb..a9d9169 100644
--- a/src/components/version_info/BUILD.gn
+++ b/src/components/version_info/BUILD.gn
@@ -14,6 +14,9 @@ static_library("version_info") {
   sources = [
     "version_info.cc",
     "version_info.h",
+    "pi_patch_version_info.cc",
+    "pi_patch_version_info.h",
+    "pi_patch_version_values.h",
   ]
 
   deps = [
diff --git a/src/components/version_info/pi_patch_version_info.cc b/src/components/version_info/pi_patch_version_info.cc
new file mode 100644
index 0000000..457c457
--- /dev/null
+++ b/src/components/version_info/pi_patch_version_info.cc
@@ -0,0 +1,13 @@
+#include "components/version_info/pi_patch_version_info.h"
+#include "components/version_info/pi_patch_version_values.h"
+
+namespace version_info {
+
+std::string GetPiPatchVersionString() {
+  return PI_PATCH_VERSION_STRING;
+}
+
+}  // namespace version_info
+
+
+
diff --git a/src/components/version_info/pi_patch_version_info.h b/src/components/version_info/pi_patch_version_info.h
new file mode 100644
index 0000000..5346fd0
--- /dev/null
+++ b/src/components/version_info/pi_patch_version_info.h
@@ -0,0 +1,14 @@
+#ifndef COMPONENTS_PI_PATCH_VERSION_INFO_VERSION_INFO_H_
+#define COMPONENTS_PI_PATCH_VERSION_INFO_VERSION_INFO_H_
+
+#include <string>
+
+namespace version_info {
+
+// Returns a string with the patch tag for our patches
+std::string GetPiPatchVersionString();
+
+}  // namespace version_info
+#endif  // COMPONENTS_VERSION_INFO_VERSION_INFO_H_
+
+
diff --git a/src/components/version_info/pi_patch_version_values.h b/src/components/version_info/pi_patch_version_values.h
new file mode 100644
index 0000000..fbc189a
--- /dev/null
+++ b/src/components/version_info/pi_patch_version_values.h
@@ -0,0 +1,2 @@
+// Pi patch version - generated by pi-util/settag.py
+#define PI_PATCH_VERSION_STRING "mmal_2.10"
diff --git a/src/components/viz/display_compositor/BUILD.gn b/src/components/viz/display_compositor/BUILD.gn
index 740b277..37d1f9b 100644
--- a/src/components/viz/display_compositor/BUILD.gn
+++ b/src/components/viz/display_compositor/BUILD.gn
@@ -67,6 +67,13 @@ component("display_compositor") {
       "compositor_overlay_candidate_validator_win.h",
     ]
   }
+
+  if (use_x11) {
+    sources += [
+      "compositor_overlay_candidate_validator_x_shm.cc",
+      "compositor_overlay_candidate_validator_x_shm.h",
+    ]
+  }
 }
 
 # These are part of the components_unittests build target.
diff --git a/src/components/viz/display_compositor/compositor_overlay_candidate_validator_x_shm.cc b/src/components/viz/display_compositor/compositor_overlay_candidate_validator_x_shm.cc
new file mode 100644
index 0000000..b16b1568
--- /dev/null
+++ b/src/components/viz/display_compositor/compositor_overlay_candidate_validator_x_shm.cc
@@ -0,0 +1,64 @@
+#include "components/viz/display_compositor/compositor_overlay_candidate_validator_x_shm.h"
+
+#include "base/memory/ptr_util.h"
+#include "cc/output/overlay_processor.h"
+#include "cc/output/overlay_strategy_single_shmid.h"
+
+
+namespace viz {
+
+CompositorOverlayCandidateValidatorXShm::CompositorOverlayCandidateValidatorXShm(const bool use_shm) :
+  use_shm_(use_shm)
+{
+}
+
+CompositorOverlayCandidateValidatorXShm::~CompositorOverlayCandidateValidatorXShm()
+{
+}
+
+void
+CompositorOverlayCandidateValidatorXShm::SetSoftwareMirrorMode(bool enabled)
+{
+// *** NIF
+}
+
+// Populates a list of strategies that may work with this validator.
+void
+CompositorOverlayCandidateValidatorXShm::GetStrategies(cc::OverlayProcessor::StrategyList* strategies)
+{
+  if (use_shm_) {
+    strategies->push_back(base::MakeUnique<cc::OverlayStrategySingleShmid>(this));
+  }
+}
+
+// Returns ??
+bool
+CompositorOverlayCandidateValidatorXShm::AllowDCLayerOverlays()
+{
+  return false;
+}
+
+// Returns true if draw quads can be represented as CALayers (Mac only).
+bool
+CompositorOverlayCandidateValidatorXShm::AllowCALayerOverlays()
+{
+  return false;
+}
+
+// A list of possible overlay candidates is presented to this function.
+// The expected result is that those candidates that can be in a separate
+// plane are marked with |overlay_handled| set to true, otherwise they are
+// to be traditionally composited. Candidates with |overlay_handled| set to
+// true must also have their |display_rect| converted to integer
+// coordinates if necessary.
+void
+CompositorOverlayCandidateValidatorXShm::CheckOverlaySupport(cc::OverlayCandidateList* surfaces)
+{
+  // Accept if we have shm support
+  for (auto& x: *surfaces) {
+    x.overlay_handled = use_shm_;
+  }
+}
+
+} // namespace display_compositor
+
diff --git a/src/components/viz/display_compositor/compositor_overlay_candidate_validator_x_shm.h b/src/components/viz/display_compositor/compositor_overlay_candidate_validator_x_shm.h
new file mode 100644
index 0000000..6339324
--- /dev/null
+++ b/src/components/viz/display_compositor/compositor_overlay_candidate_validator_x_shm.h
@@ -0,0 +1,40 @@
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef COMPONENTS_DISPLAY_COMPOSITOR_COMPOSITOR_OVERLAY_CANDIDATE_VALIDATOR_X_SHM_H_
+#define COMPONENTS_DISPLAY_COMPOSITOR_COMPOSITOR_OVERLAY_CANDIDATE_VALIDATOR_X_SHM_H_
+
+#include <memory>
+
+#include "base/macros.h"
+#include "components/viz/display_compositor/compositor_overlay_candidate_validator.h"
+#include "components/viz/viz_export.h"
+
+namespace viz {
+
+class VIZ_EXPORT CompositorOverlayCandidateValidatorXShm
+    : public CompositorOverlayCandidateValidator {
+ public:
+  explicit CompositorOverlayCandidateValidatorXShm(const bool use_shm);
+  ~CompositorOverlayCandidateValidatorXShm() override;
+
+  // cc::OverlayCandidateValidator implementation.
+  void GetStrategies(cc::OverlayProcessor::StrategyList* strategies) override;
+  bool AllowCALayerOverlays() override;
+  bool AllowDCLayerOverlays() override;
+  void CheckOverlaySupport(cc::OverlayCandidateList* surfaces) override;
+
+  // CompositorOverlayCandidateValidator implementation.
+  void SetSoftwareMirrorMode(bool enabled) override;
+
+ private:
+  const bool use_shm_;
+
+  DISALLOW_COPY_AND_ASSIGN(CompositorOverlayCandidateValidatorXShm);
+};
+
+}  // namespace display_compositor
+
+#endif  // COMPONENTS_DISPLAY_COMPOSITOR_COMPOSITOR_OVERLAY_CANDIDATE_VALIDATOR_X_SHM_H_
+
+
diff --git a/src/components/viz/display_compositor/host_shared_bitmap_manager.cc b/src/components/viz/display_compositor/host_shared_bitmap_manager.cc
index 938d5fe..35e0799 100644
--- a/src/components/viz/display_compositor/host_shared_bitmap_manager.cc
+++ b/src/components/viz/display_compositor/host_shared_bitmap_manager.cc
@@ -16,16 +16,22 @@
 #include "base/strings/stringprintf.h"
 #include "base/trace_event/process_memory_dump.h"
 #include "build/build_config.h"
+#include "media/base/video_frame.h"
 #include "mojo/public/cpp/system/platform_handle.h"
 #include "ui/gfx/geometry/size.h"
 
+#include "cc/resources/shared_bitmap.h"
+#include "cc/resources/shared_image_x11.h"
+
 namespace viz {
 
 class BitmapData : public base::RefCountedThreadSafe<BitmapData> {
  public:
   explicit BitmapData(size_t buffer_size) : buffer_size(buffer_size) {}
   std::unique_ptr<base::SharedMemory> memory;
+  std::unique_ptr<cc::SharedImageX11> xshm;
   std::unique_ptr<uint8_t[]> pixels;
+  scoped_refptr<media::VideoFrame> frame;
   size_t buffer_size;
 
  private:
@@ -85,14 +91,15 @@ void HostSharedBitmapManagerClient::Bind(
 
 void HostSharedBitmapManagerClient::DidAllocateSharedBitmap(
     mojo::ScopedSharedBufferHandle buffer,
-    const cc::SharedBitmapId& id) {
+    const cc::SharedBitmapId& id,
+    bool is_image) {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
   base::SharedMemoryHandle memory_handle;
   size_t size;
   MojoResult result = mojo::UnwrapSharedMemoryHandle(
       std::move(buffer), &memory_handle, &size, NULL);
   DCHECK_EQ(result, MOJO_RESULT_OK);
-  this->ChildAllocatedSharedBitmap(size, memory_handle, id);
+  this->ChildAllocatedSharedBitmap(size, memory_handle, id, is_image);
   last_sequence_number_++;
   for (SharedBitmapAllocationObserver& observer : observers_)
     observer.DidAllocateSharedBitmap(last_sequence_number_);
@@ -101,10 +108,12 @@ void HostSharedBitmapManagerClient::DidAllocateSharedBitmap(
 void HostSharedBitmapManagerClient::ChildAllocatedSharedBitmap(
     size_t buffer_size,
     const base::SharedMemoryHandle& handle,
-    const cc::SharedBitmapId& id) {
+    const cc::SharedBitmapId& id,
+    bool is_image) {
   DCHECK_CALLED_ON_VALID_THREAD(thread_checker_);
-  if (manager_->ChildAllocatedSharedBitmap(buffer_size, handle, id))
+  if (manager_->ChildAllocatedSharedBitmap(buffer_size, handle, id, is_image)) {
     owned_bitmaps_.insert(id);
+  }
 }
 
 void HostSharedBitmapManagerClient::DidDeleteSharedBitmap(
@@ -161,6 +170,27 @@ std::unique_ptr<cc::SharedBitmap> HostSharedBitmapManager::AllocateSharedBitmap(
   return base::MakeUnique<HostSharedBitmap>(data->pixels.get(), data, id, this);
 }
 
+std::unique_ptr<cc::SharedBitmap> HostSharedBitmapManager::AllocateSharedFrame(
+    const scoped_refptr<media::VideoFrame>& video_frame) {
+  base::AutoLock lock(lock_);
+
+  size_t bitmap_size = video_frame->rows(0) * video_frame->row_bytes(0);
+  cc::SharedBitmap::SizeInBytes(video_frame->coded_size(), &bitmap_size);
+
+  scoped_refptr<BitmapData> data(new BitmapData(bitmap_size));
+
+  // Bitmaps allocated in host don't need to be shared to other processes, so
+  // allocate them with new instead.
+  data->frame = video_frame;
+
+  cc::SharedBitmapId id = cc::SharedBitmap::GenerateId();
+
+//  LOG(ERROR) << "HostSharedBitmapManager::AllocateSharedFrame, size=" << data->buffer_size << ", id=" << cc::SharedBitmap::hashid(id);
+
+  handle_map_[id] = data;
+  return base::MakeUnique<HostSharedBitmap>(data->pixels.get(), data, id, this);
+}
+
 std::unique_ptr<cc::SharedBitmap>
 HostSharedBitmapManager::GetSharedBitmapFromId(const gfx::Size& size,
                                                const cc::SharedBitmapId& id) {
@@ -180,12 +210,41 @@ HostSharedBitmapManager::GetSharedBitmapFromId(const gfx::Size& size,
     return base::MakeUnique<HostSharedBitmap>(data->pixels.get(), data, id,
                                               nullptr);
   }
-  if (!data->memory->memory()) {
-    return nullptr;
+  else if (data->frame != nullptr) {
+    return base::MakeUnique<HostSharedBitmap>(data->frame->data(0), data, id,
+                                              nullptr);
   }
+  else if (data->memory) {
+    if (!data->memory->memory()) {
+      return std::unique_ptr<cc::SharedBitmap>();
+    }
+
+    return base::MakeUnique<HostSharedBitmap>(
+        static_cast<uint8_t*>(data->memory->memory()), data, id, nullptr);
+  }
+  else
+  {
+    if (!data->xshm->memory()) {
+      return std::unique_ptr<cc::SharedBitmap>();
+    }
+    return base::MakeUnique<HostSharedBitmap>(
+        static_cast<uint8_t*>(data->xshm->memory()), data, id, nullptr);
+  }
+}
 
-  return base::MakeUnique<HostSharedBitmap>(
-      static_cast<uint8_t*>(data->memory->memory()), data, id, nullptr);
+cc::SharedImageX11 *
+HostSharedBitmapManager::GetSharedImageX11ForBitmap(const cc::SharedBitmapId& id)
+{
+  base::AutoLock lock(lock_);
+  BitmapMap::iterator it = handle_map_.find(id);
+  if (it == handle_map_.end())
+    return nullptr;
+
+  // It is possible to convert an ordinary shared memory segment to an
+  // image here - but it might have unforseen consequnces so stick with
+  // only dealing with things that started off as images
+
+  return it->second->xshm.get();
 }
 
 bool HostSharedBitmapManager::OnMemoryDump(
@@ -219,16 +278,24 @@ bool HostSharedBitmapManager::OnMemoryDump(
 bool HostSharedBitmapManager::ChildAllocatedSharedBitmap(
     size_t buffer_size,
     const base::SharedMemoryHandle& handle,
-    const cc::SharedBitmapId& id) {
+    const cc::SharedBitmapId& id,
+    bool is_image) {
   base::AutoLock lock(lock_);
   if (handle_map_.find(id) != handle_map_.end())
     return false;
   scoped_refptr<BitmapData> data(new BitmapData(buffer_size));
 
   handle_map_[id] = data;
-  data->memory = base::MakeUnique<base::SharedMemory>(handle, false);
-  data->memory->Map(data->buffer_size);
-  data->memory->Close();
+  if (is_image) {
+    data->xshm = base::MakeUnique<cc::SharedImageX11>(handle, true);
+    data->xshm->set_buffer_size(data->buffer_size);
+  }
+  else
+  {
+    data->memory = base::MakeUnique<base::SharedMemory>(handle, false);
+    data->memory->Map(data->buffer_size);
+    data->memory->Close();
+  }
   return true;
 }
 
diff --git a/src/components/viz/display_compositor/host_shared_bitmap_manager.h b/src/components/viz/display_compositor/host_shared_bitmap_manager.h
index 0c075d1..97141b8 100644
--- a/src/components/viz/display_compositor/host_shared_bitmap_manager.h
+++ b/src/components/viz/display_compositor/host_shared_bitmap_manager.h
@@ -57,13 +57,14 @@ class VIZ_EXPORT HostSharedBitmapManagerClient
 
   // cc::mojom::SharedBitmapManager overrides:
   void DidAllocateSharedBitmap(mojo::ScopedSharedBufferHandle buffer,
-                               const cc::SharedBitmapId& id) override;
+                               const cc::SharedBitmapId& id,
+                               bool is_image) override;
   void DidDeleteSharedBitmap(const cc::SharedBitmapId& id) override;
 
   void ChildAllocatedSharedBitmap(size_t buffer_size,
                                   const base::SharedMemoryHandle& handle,
-                                  const cc::SharedBitmapId& id);
-
+                                  const cc::SharedBitmapId& id,
+                                  bool is_image);
   void ChildDied();
 
   uint32_t last_sequence_number() const { return last_sequence_number_; }
@@ -95,6 +96,12 @@ class VIZ_EXPORT HostSharedBitmapManager
       const gfx::Size& size,
       const cc::SharedBitmapId&) override;
 
+  std::unique_ptr<cc::SharedBitmap> AllocateSharedFrame(
+      const scoped_refptr<media::VideoFrame>& video_frame) override;
+
+  cc::SharedImageX11 * GetSharedImageX11ForBitmap(
+      const cc::SharedBitmapId& id) override;
+
   // base::trace_event::MemoryDumpProvider implementation.
   bool OnMemoryDump(const base::trace_event::MemoryDumpArgs& args,
                     base::trace_event::ProcessMemoryDump* pmd) override;
@@ -108,7 +115,8 @@ class VIZ_EXPORT HostSharedBitmapManager
 
   bool ChildAllocatedSharedBitmap(size_t buffer_size,
                                   const base::SharedMemoryHandle& handle,
-                                  const cc::SharedBitmapId& id);
+                                  const cc::SharedBitmapId& id,
+                                  bool is_image);
   void ChildDeletedSharedBitmap(const cc::SharedBitmapId& id);
 
   mutable base::Lock lock_;
diff --git a/src/content/browser/browser_main_loop.cc b/src/content/browser/browser_main_loop.cc
index 8936b05..8527baa 100644
--- a/src/content/browser/browser_main_loop.cc
+++ b/src/content/browser/browser_main_loop.cc
@@ -574,7 +574,10 @@ void BrowserMainLoop::EarlyInitialization() {
 #endif
 
 #if defined(USE_X11)
-  if (UsingInProcessGpu()) {
+  // (Pi) The mmal shared memory passthrough requires MT X as the frame
+  // can be deleted (and detached) outside the display thread
+  if (1) {
+//  if (UsingInProcessGpu()) {
     if (!gfx::InitializeThreadedX11()) {
       LOG(ERROR) << "Failed to put Xlib into threaded mode.";
     }
diff --git a/src/content/browser/compositor/browser_compositor_output_surface.cc b/src/content/browser/compositor/browser_compositor_output_surface.cc
index 8a10115..1507af0 100644
--- a/src/content/browser/compositor/browser_compositor_output_surface.cc
+++ b/src/content/browser/compositor/browser_compositor_output_surface.cc
@@ -20,6 +20,17 @@
 namespace content {
 
 BrowserCompositorOutputSurface::BrowserCompositorOutputSurface(
+    std::unique_ptr<cc::SoftwareOutputDevice> software_device,
+    const UpdateVSyncParametersCallback& update_vsync_parameters_callback,
+    std::unique_ptr<viz::CompositorOverlayCandidateValidator>
+        overlay_candidate_validator)
+    : OutputSurface(std::move(software_device)),
+      update_vsync_parameters_callback_(update_vsync_parameters_callback),
+      reflector_(nullptr) {
+  overlay_candidate_validator_ = std::move(overlay_candidate_validator);
+}
+
+BrowserCompositorOutputSurface::BrowserCompositorOutputSurface(
     scoped_refptr<cc::ContextProvider> context_provider,
     const UpdateVSyncParametersCallback& update_vsync_parameters_callback,
     std::unique_ptr<viz::CompositorOverlayCandidateValidator>
diff --git a/src/content/browser/compositor/browser_compositor_output_surface.h b/src/content/browser/compositor/browser_compositor_output_surface.h
index f7c6f82..2b97fe9 100644
--- a/src/content/browser/compositor/browser_compositor_output_surface.h
+++ b/src/content/browser/compositor/browser_compositor_output_surface.h
@@ -60,6 +60,11 @@ class CONTENT_EXPORT BrowserCompositorOutputSurface
   BrowserCompositorOutputSurface(
       std::unique_ptr<cc::SoftwareOutputDevice> software_device,
       const UpdateVSyncParametersCallback& update_vsync_parameters_callback);
+  BrowserCompositorOutputSurface(
+      std::unique_ptr<cc::SoftwareOutputDevice> software_device,
+      const UpdateVSyncParametersCallback& update_vsync_parameters_callback,
+      std::unique_ptr<viz::CompositorOverlayCandidateValidator>
+          overlay_candidate_validator);
 
   // Constructor used by the Vulkan implementation.
   BrowserCompositorOutputSurface(
diff --git a/src/content/browser/compositor/gpu_process_transport_factory.cc b/src/content/browser/compositor/gpu_process_transport_factory.cc
index 409df107..6b49952 100644
--- a/src/content/browser/compositor/gpu_process_transport_factory.cc
+++ b/src/content/browser/compositor/gpu_process_transport_factory.cc
@@ -85,6 +85,7 @@
 #include "ui/ozone/public/ozone_switches.h"
 #elif defined(USE_X11)
 #include "content/browser/compositor/software_output_device_x11.h"
+#include "components/viz/display_compositor/compositor_overlay_candidate_validator_x_shm.h"
 #elif defined(OS_MACOSX)
 #include "components/viz/display_compositor/compositor_overlay_candidate_validator_mac.h"
 #include "content/browser/compositor/gpu_output_surface_mac.h"
@@ -239,7 +240,8 @@ GpuProcessTransportFactory::~GpuProcessTransportFactory() {
 
 std::unique_ptr<cc::SoftwareOutputDevice>
 GpuProcessTransportFactory::CreateSoftwareOutputDevice(
-    ui::Compositor* compositor) {
+    ui::Compositor* compositor, bool * const puse_shm) {
+  *puse_shm = false;
   base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
   if (command_line->HasSwitch(switches::kHeadless))
     return base::WrapUnique(new cc::SoftwareOutputDevice);
@@ -257,8 +259,9 @@ GpuProcessTransportFactory::CreateSoftwareOutputDevice(
 #elif defined(USE_OZONE)
   return SoftwareOutputDeviceOzone::Create(compositor);
 #elif defined(USE_X11)
-  return std::unique_ptr<cc::SoftwareOutputDevice>(
-      new SoftwareOutputDeviceX11(compositor));
+  SoftwareOutputDeviceX11 * const output_device = new SoftwareOutputDeviceX11(compositor);
+  *puse_shm = output_device->use_shm();
+  return std::unique_ptr<cc::SoftwareOutputDevice>(output_device);
 #elif defined(OS_MACOSX)
   return std::unique_ptr<cc::SoftwareOutputDevice>(
       new SoftwareOutputDeviceMac(compositor));
@@ -269,7 +272,7 @@ GpuProcessTransportFactory::CreateSoftwareOutputDevice(
 }
 
 std::unique_ptr<viz::CompositorOverlayCandidateValidator>
-CreateOverlayCandidateValidator(gfx::AcceleratedWidget widget) {
+CreateOverlayCandidateValidator(gfx::AcceleratedWidget widget, const bool use_shm) {
   std::unique_ptr<viz::CompositorOverlayCandidateValidator> validator;
 #if defined(USE_OZONE)
   base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
@@ -299,6 +302,8 @@ CreateOverlayCandidateValidator(gfx::AcceleratedWidget widget) {
   validator.reset(new viz::CompositorOverlayCandidateValidatorAndroid());
 #elif defined(OS_WIN)
   validator = base::MakeUnique<viz::CompositorOverlayCandidateValidatorWin>();
+#elif defined(USE_X11)
+  validator.reset(new viz::CompositorOverlayCandidateValidatorXShm(use_shm));
 #endif
 
   return validator;
@@ -510,10 +515,13 @@ void GpuProcessTransportFactory::EstablishedGpuChannel(
 
   if (!display_output_surface) {
     if (!create_gpu_output_surface) {
+      bool use_shm = false;
+      std::unique_ptr<cc::SoftwareOutputDevice> output_device = CreateSoftwareOutputDevice(compositor.get(), &use_shm);
       display_output_surface =
           base::MakeUnique<SoftwareBrowserCompositorOutputSurface>(
-              CreateSoftwareOutputDevice(compositor.get()), vsync_callback,
-              compositor->task_runner());
+              std::move(output_device), vsync_callback,
+              compositor->task_runner(),
+              CreateOverlayCandidateValidator(compositor->widget(), use_shm));
     } else {
       DCHECK(context_provider);
       const auto& capabilities = context_provider->ContextCapabilities();
@@ -527,13 +535,13 @@ void GpuProcessTransportFactory::EstablishedGpuChannel(
         display_output_surface = base::MakeUnique<GpuOutputSurfaceMac>(
             compositor->widget(), context_provider, data->surface_handle,
             vsync_callback,
-            CreateOverlayCandidateValidator(compositor->widget()),
+            CreateOverlayCandidateValidator(compositor->widget(), false),
             GetGpuMemoryBufferManager());
 #else
         auto gpu_output_surface =
             base::MakeUnique<GpuSurfacelessBrowserCompositorOutputSurface>(
                 context_provider, data->surface_handle, vsync_callback,
-                CreateOverlayCandidateValidator(compositor->widget()),
+                CreateOverlayCandidateValidator(compositor->widget(), false),
                 GL_TEXTURE_2D, GL_RGB,
                 display::DisplaySnapshot::PrimaryFormat(),
                 GetGpuMemoryBufferManager());
@@ -544,10 +552,10 @@ void GpuProcessTransportFactory::EstablishedGpuChannel(
         std::unique_ptr<viz::CompositorOverlayCandidateValidator> validator;
 #if defined(OS_WIN)
         if (capabilities.dc_layers)
-          validator = CreateOverlayCandidateValidator(compositor->widget());
+          validator = CreateOverlayCandidateValidator(compositor->widget(), false);
 #elif !defined(OS_MACOSX)
         // Overlays are only supported on surfaceless output surfaces on Mac.
-        validator = CreateOverlayCandidateValidator(compositor->widget());
+        validator = CreateOverlayCandidateValidator(compositor->widget(), false);
 #endif
         auto gpu_output_surface =
             base::MakeUnique<GpuBrowserCompositorOutputSurface>(
diff --git a/src/content/browser/compositor/gpu_process_transport_factory.h b/src/content/browser/compositor/gpu_process_transport_factory.h
index ed3db87..0353bc5 100644
--- a/src/content/browser/compositor/gpu_process_transport_factory.h
+++ b/src/content/browser/compositor/gpu_process_transport_factory.h
@@ -93,7 +93,7 @@ class GpuProcessTransportFactory : public ui::ContextFactory,
 
   PerCompositorData* CreatePerCompositorData(ui::Compositor* compositor);
   std::unique_ptr<cc::SoftwareOutputDevice> CreateSoftwareOutputDevice(
-      ui::Compositor* compositor);
+      ui::Compositor* compositor, bool * const puse_shm);
   void EstablishedGpuChannel(
       base::WeakPtr<ui::Compositor> compositor,
       bool create_gpu_output_surface,
diff --git a/src/content/browser/compositor/software_browser_compositor_output_surface.cc b/src/content/browser/compositor/software_browser_compositor_output_surface.cc
index 353c4d9..e95fe26 100644
--- a/src/content/browser/compositor/software_browser_compositor_output_surface.cc
+++ b/src/content/browser/compositor/software_browser_compositor_output_surface.cc
@@ -15,6 +15,7 @@
 #include "cc/output/output_surface_client.h"
 #include "cc/output/output_surface_frame.h"
 #include "cc/output/software_output_device.h"
+#include "components/viz/display_compositor/compositor_overlay_candidate_validator.h"
 #include "content/browser/renderer_host/render_widget_host_impl.h"
 #include "ui/gfx/vsync_provider.h"
 #include "ui/latency/latency_info.h"
@@ -30,6 +31,18 @@ SoftwareBrowserCompositorOutputSurface::SoftwareBrowserCompositorOutputSurface(
       task_runner_(std::move(task_runner)),
       weak_factory_(this) {}
 
+SoftwareBrowserCompositorOutputSurface::SoftwareBrowserCompositorOutputSurface(
+    std::unique_ptr<cc::SoftwareOutputDevice> software_device,
+    const UpdateVSyncParametersCallback& update_vsync_parameters_callback,
+    scoped_refptr<base::SingleThreadTaskRunner> task_runner,
+    std::unique_ptr<viz::CompositorOverlayCandidateValidator>
+        overlay_candidate_validator)
+    : BrowserCompositorOutputSurface(std::move(software_device),
+                                     update_vsync_parameters_callback,
+                                     std::move(overlay_candidate_validator)),
+      task_runner_(std::move(task_runner)),
+      weak_factory_(this) {}
+
 SoftwareBrowserCompositorOutputSurface::
     ~SoftwareBrowserCompositorOutputSurface() {
 }
diff --git a/src/content/browser/compositor/software_browser_compositor_output_surface.h b/src/content/browser/compositor/software_browser_compositor_output_surface.h
index c646d1d..e091dfd 100644
--- a/src/content/browser/compositor/software_browser_compositor_output_surface.h
+++ b/src/content/browser/compositor/software_browser_compositor_output_surface.h
@@ -26,6 +26,13 @@ class CONTENT_EXPORT SoftwareBrowserCompositorOutputSurface
       const UpdateVSyncParametersCallback& update_vsync_parameters_callback,
       scoped_refptr<base::SingleThreadTaskRunner> task_runner);
 
+  SoftwareBrowserCompositorOutputSurface(
+      std::unique_ptr<cc::SoftwareOutputDevice> software_device,
+      const UpdateVSyncParametersCallback& update_vsync_parameters_callback,
+      scoped_refptr<base::SingleThreadTaskRunner> task_runner,
+      std::unique_ptr<viz::CompositorOverlayCandidateValidator>
+          overlay_candidate_validator);
+
   ~SoftwareBrowserCompositorOutputSurface() override;
 
   // OutputSurface implementation.
diff --git a/src/content/browser/compositor/software_output_device_x11.cc b/src/content/browser/compositor/software_output_device_x11.cc
index d2e6606..71a0848 100644
--- a/src/content/browser/compositor/software_output_device_x11.cc
+++ b/src/content/browser/compositor/software_output_device_x11.cc
@@ -10,6 +10,8 @@
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
 
+#include "cc/resources/resource_provider.h"
+#include "cc/resources/shared_image_x11.h"
 #include "content/public/browser/browser_thread.h"
 #include "third_party/skia/include/core/SkImageInfo.h"
 #include "ui/base/x/x11_util.h"
@@ -19,8 +21,75 @@
 
 namespace content {
 
+int
+SoftwareOutputDeviceX11::ShmDesc::attach(XDisplay * const display,
+  const XWindowAttributes& attributes, const int w, const int h)
+{
+  // Clear out old allocation
+  xshm_ = nullptr;
+
+  std::unique_ptr<cc::SharedImageX11> xshm(base::MakeUnique<cc::SharedImageX11>());
+
+  // Set size to requested (min)w x h; let the code pick stride
+  xshm->set_size(gfx::Size(w, h), 0);
+
+  if (!xshm->create_image(display, attributes))
+      return -1;
+
+  xshm_ = std::move(xshm);
+  return 0;
+}
+
+std::unique_ptr<cc::XcbCookie> SoftwareOutputDeviceX11::ShmDesc::put_image(Drawable drawable, GC gc, const gfx::Rect& rect)
+{
+  return xshm_->put_image(drawable, gc, rect, rect);
+}
+
+void SoftwareOutputDeviceX11::ShmDesc::resize(const SkImageInfo& info)
+{
+//  LOG(ERROR) << "resize req:" << info.width() << "x" << info.height();
+  req_ii_ = info;
+}
+
+sk_sp<SkSurface>
+SoftwareOutputDeviceX11::ShmDesc::use_surface(XDisplay * const display, const XWindowAttributes& attributes)
+{
+  if (req_ii_ != cur_ii_) {
+//    LOG(ERROR) << "resize set:" << req_ii_.width() << "x" << req_ii_.height();
+
+    // Kill all current stuff
+    surface_.reset();
+
+    // Rebuild
+    if (attach(display, attributes, req_ii_.minRowBytes()/req_ii_.bytesPerPixel(), req_ii_.height()) != 0)
+    {
+      LOG(ERROR) << "Failed to make new XImage";
+    }
+    // Build a surface on it
+    else if (!(surface_ = SkSurface::MakeRasterDirect(req_ii_, xshm_->memory(), xshm_->stride())))
+    {
+      LOG(ERROR) << "Failed to make new SkSurface";
+    }
+    else
+    {
+      // Success
+      cur_ii_ = req_ii_;
+    }
+  }
+  return surface_;
+}
+
+
+SoftwareOutputDeviceX11::ShmDesc::ShmDesc() {
+}
+
+SoftwareOutputDeviceX11::ShmDesc::~ShmDesc() {
+}
+
+
 SoftwareOutputDeviceX11::SoftwareOutputDeviceX11(ui::Compositor* compositor)
-    : compositor_(compositor), display_(gfx::GetXDisplay()), gc_(NULL) {
+    : compositor_(compositor), display_(gfx::GetXDisplay()), gc_(NULL),
+      shm_n_(0) {
   // TODO(skaslev) Remove this when crbug.com/180702 is fixed.
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
 
@@ -30,14 +99,68 @@ SoftwareOutputDeviceX11::SoftwareOutputDeviceX11(ui::Compositor* compositor)
                << compositor_->widget();
     return;
   }
+
+  if (!(gfx::BitsPerPixelForPixmapDepth(display_, attributes_.depth) == 32 &&
+        attributes_.visual->red_mask == 0xff0000 &&
+        attributes_.visual->green_mask == 0xff00 &&
+        attributes_.visual->blue_mask == 0xff &&
+        cc::SharedImageX11::check_support(display_)))
+  {
+    LOG(WARNING) << "Display attributes incompatible with SHM";
+    shm_n_ = -1;
+  }
+  else
+  {
+    for (int i = 0; i != 2; ++i) {
+      // Pick any old initial shape - it will be freed as soon as we start
+      // know what size we actually want (even if it is 1024x768!)
+      // This also allows us to check here that SHM actually works
+      if (shm_descs_[i].attach(display_, attributes_, 1024, 768) != 0)
+      {
+        shm_n_ = -1;
+        break;
+      }
+    }
+  }
 }
 
 SoftwareOutputDeviceX11::~SoftwareOutputDeviceX11() {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
 
+  overlay_lock_.release();  // **** Kludge to avoid shutdown crash
   XFreeGC(display_, gc_);
 }
 
+bool SoftwareOutputDeviceX11::use_shm() const
+{
+  return shm_n_ >= 0;
+}
+
+void SoftwareOutputDeviceX11::Resize(const gfx::Size& viewport_pixel_size,
+                                  float scale_factor) {
+//  scale_factor_ = scale_factor;
+
+  if (viewport_pixel_size_ == viewport_pixel_size)
+    return;
+
+  const SkImageInfo info(SkImageInfo::MakeN32(viewport_pixel_size.width(),
+                                          viewport_pixel_size.height(),
+                                          kOpaque_SkAlphaType));
+  viewport_pixel_size_ = viewport_pixel_size;
+
+  if (shm_n_ < 0) {
+    surface_ = SkSurface::MakeRaster(info);
+  }
+  else
+  {
+    for (int i = 0; i != 2; ++i) {
+      shm_descs_[i].resize(info);
+    }
+
+    surface_ = shm_descs_[shm_n_].use_surface(display_, attributes_);
+  }
+}
+
 void SoftwareOutputDeviceX11::EndPaint() {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
 
@@ -118,11 +241,66 @@ void SoftwareOutputDeviceX11::EndPaint() {
   // TODO(jbauman): Switch to XShmPutImage since it's async.
   SkPixmap pixmap;
   surface_->peekPixels(&pixmap);
-  gfx::PutARGBImage(
-      display_, attributes_.visual, attributes_.depth, compositor_->widget(),
-      gc_, static_cast<const uint8_t*>(pixmap.addr()),
-      viewport_pixel_size_.width(), viewport_pixel_size_.height(), rect.x(),
-      rect.y(), rect.x(), rect.y(), rect.width(), rect.height());
+
+  if (shm_n_ >= 0) {
+    last_cookie_ = shm_descs_[shm_n_].put_image(compositor_->widget(), static_cast<GC>(gc_), rect);
+    // Swap to other surface for next draw
+    // Could use sync if we only want 1 surface but that wastes time
+    //  XSync(display_, false);
+    shm_n_ = (shm_n_ + 1) % 2;
+    surface_ = shm_descs_[shm_n_].use_surface(display_, attributes_);
+  }
+  else
+  {
+    // TODO(jbauman): Switch to XShmPutImage since it's async.
+    SkPixmap pixmap;
+    surface_->peekPixels(&pixmap);
+    gfx::PutARGBImage(
+        display_, attributes_.visual, attributes_.depth, compositor_->widget(),
+        gc_, static_cast<const uint8_t*>(pixmap.addr()),
+        viewport_pixel_size_.width(), viewport_pixel_size_.height(), rect.x(),
+        rect.y(), rect.x(), rect.y(), rect.width(), rect.height());
+  }
+}
+
+void SoftwareOutputDeviceX11::EndPaint(const gfx::Rect& damage_rect,
+  cc::ResourceProvider * const resource_provider,
+  const cc::OverlayCandidateList& overlay_list)
+{
+  // Release these locks at end of func - but allow reassignment before then
+  const std::unique_ptr<cc::ResourceProvider::ScopedReadLockSharedImageX11> lock(overlay_lock_.release());
+  // Ordering means sync will be released (on destruction) before overlay lock
+  const std::unique_ptr<cc::XcbCookie> sync_cookie(last_cookie_.release());
+
+  damage_rect_ = damage_rect;
+  EndPaint();
+
+  for (const cc::OverlayCandidate& ovly : overlay_list ) {
+    if (ovly.overlay_handled) {
+      if (!damage_rect.IsEmpty()) {
+        LOG(ERROR) << "Damage rect not empty: " << damage_rect.ToString();
+      }
+
+      overlay_lock_ = base::MakeUnique<cc::ResourceProvider::ScopedReadLockSharedImageX11>(
+          resource_provider, ovly.resource_id);
+
+      cc::SharedImageX11 *const xshm = overlay_lock_->shared_image_x11();
+      if (xshm == nullptr){
+        LOG(ERROR) << "SharedMemory unexpectly null";
+        continue;
+      }
+
+      const gfx::Rect rect(ovly.quad_rect_in_target_space);
+
+      if (!xshm->create_image(display_, attributes_))
+      {
+          LOG(ERROR) << "xshm.create_image failed!";
+          continue;
+      }
+
+      last_cookie_ = xshm->put_image(compositor_->widget(), gc_, rect, gfx::Rect());
+    }
+  }
 }
 
 }  // namespace content
diff --git a/src/content/browser/compositor/software_output_device_x11.h b/src/content/browser/compositor/software_output_device_x11.h
index 9fe571d..653a898 100644
--- a/src/content/browser/compositor/software_output_device_x11.h
+++ b/src/content/browser/compositor/software_output_device_x11.h
@@ -7,6 +7,9 @@
 
 #include <X11/Xlib.h>
 
+#include "cc/resources/resource_provider.h"
+#include "cc/resources/shared_image_x11.h"
+
 #include "base/macros.h"
 #include "cc/output/software_output_device.h"
 #include "ui/gfx/x/x11_types.h"
@@ -23,14 +26,45 @@ class SoftwareOutputDeviceX11 : public cc::SoftwareOutputDevice {
 
   ~SoftwareOutputDeviceX11() override;
 
+  void Resize(const gfx::Size& viewport_pixel_size, float scale_factor) override;
   void EndPaint() override;
+  void EndPaint(const gfx::Rect& damage_rect,
+      cc::ResourceProvider * const resource_provider,
+      const cc::OverlayCandidateList& overlay_list) override;
+
+  bool use_shm() const;
 
  private:
   ui::Compositor* compositor_;
-  XDisplay* display_;
+  XDisplay* const display_;
   GC gc_;
   XWindowAttributes attributes_;
 
+  // Shared memory stuff
+
+  std::unique_ptr<cc::ResourceProvider::ScopedReadLockSharedImageX11> overlay_lock_;
+  std::unique_ptr<cc::XcbCookie> last_cookie_;
+
+  int shm_n_;
+  class ShmDesc
+  {
+      sk_sp<SkSurface> surface_;
+      SkImageInfo req_ii_;
+      SkImageInfo cur_ii_;
+
+public:
+      std::unique_ptr<cc::SharedImageX11> xshm_;
+
+      ShmDesc();
+      virtual ~ShmDesc();
+      int attach(XDisplay * const display, const XWindowAttributes& attributes, const int stride, const int h);
+      void detach();
+      void destroy();
+      void resize(const SkImageInfo& info);
+      std::unique_ptr<cc::XcbCookie> put_image(Drawable drawable, GC gc, const gfx::Rect& rect);
+      sk_sp<SkSurface> use_surface(XDisplay * const display, const XWindowAttributes& attributes);
+  } shm_descs_[2];
+
   DISALLOW_COPY_AND_ASSIGN(SoftwareOutputDeviceX11);
 };
 
diff --git a/src/content/browser/renderer_host/render_process_host_impl.cc b/src/content/browser/renderer_host/render_process_host_impl.cc
index 7db804c..6b0be55 100644
--- a/src/content/browser/renderer_host/render_process_host_impl.cc
+++ b/src/content/browser/renderer_host/render_process_host_impl.cc
@@ -2260,6 +2260,15 @@ void RenderProcessHostImpl::PropagateBrowserCommandLineToRenderer(
     switches::kIpcDumpDirectory,
     switches::kIpcFuzzerTestcase,
 #endif
+
+    switches::kMmalFrameBuffers, switches::kMmalZeroCopy,
+    switches::kMmalFrameCopy,    switches::kMmalSliceCopy,
+    switches::kMmalDecodeI420,   switches::kMmalDecodeOpaque,
+    switches::kMmalResizeIsp,    switches::kMmalResizeResizer,
+    switches::kMmalLowDelay,
+    switches::kMmalRedPixel,     switches::kMmalDecoders,
+    switches::kMmalDebugBench,   switches::kMmalDebugFps,
+    switches::kMmalDebugFixedSize,
   };
   renderer_cmd->CopySwitchesFrom(browser_cmd, kSwitchNames,
                                  arraysize(kSwitchNames));
diff --git a/src/content/browser/renderer_host/sandbox_ipc_linux.cc b/src/content/browser/renderer_host/sandbox_ipc_linux.cc
index c2cae8d..c26d0c5 100644
--- a/src/content/browser/renderer_host/sandbox_ipc_linux.cc
+++ b/src/content/browser/renderer_host/sandbox_ipc_linux.cc
@@ -11,6 +11,7 @@
 #include <sys/poll.h>
 #include <sys/socket.h>
 #include <sys/stat.h>
+#include <sys/ioctl.h>
 
 #include "base/command_line.h"
 #include "base/files/scoped_file.h"
@@ -163,6 +164,8 @@ void SandboxIPCHandler::HandleRequestFromRenderer(int fd) {
     HandleMakeSharedMemorySegment(fd, iter, fds);
   } else if (kind == LinuxSandbox::METHOD_MATCH_WITH_FALLBACK) {
     HandleMatchWithFallback(fd, iter, fds);
+  } else if (kind == LinuxSandbox::METHOD_OPEN_DEV_VCHIQ) {
+    HandleOpenDevVchiq(fd, iter, fds);
   }
 }
 
@@ -391,6 +394,57 @@ void SandboxIPCHandler::HandleMatchWithFallback(
   }
 }
 
+#define IOCTL_MBOX_PROPERTY _IOWR(100, 0, char *)
+#define VCIO_PATH "/dev/vcio"
+
+static uint32_t pi_firmware_date()
+{
+  int vcio_fd = IGNORE_EINTR(open(VCIO_PATH, 0));
+
+  if (vcio_fd == -1) {
+    PLOG(ERROR) << "Failed to open " VCIO_PATH;
+    return 0;
+  }
+
+  uint32_t req_buf[256] = {
+    (4+3)*4, 0,  // 4 args, + 3 overhead
+    1, 4, 4, 0,  // args
+  };
+
+  int err = IGNORE_EINTR(ioctl(vcio_fd, IOCTL_MBOX_PROPERTY, req_buf));
+  uint32_t rv = req_buf[5];
+
+  if (err < 0) {
+    PLOG(ERROR) << VCIO_PATH ": ioctl";
+    rv = 0;
+  }
+
+  if (IGNORE_EINTR(close(vcio_fd)) < 0)
+    PLOG(ERROR) << VCIO_PATH ": close";
+  return rv;
+}
+
+void SandboxIPCHandler::HandleOpenDevVchiq(
+    int fd,
+    base::PickleIterator iter,
+    const std::vector<base::ScopedFD>& fds)
+{
+  const int vchiq_fd = IGNORE_EINTR(open("/dev/vchiq", O_RDWR));
+
+  if (vchiq_fd == -1) {
+    PLOG(ERROR) << "Failed to open vchiq";
+  }
+
+  base::Pickle reply;
+  reply.WriteUInt32(pi_firmware_date());
+  SendRendererReply(fds, reply, vchiq_fd);
+
+  if (vchiq_fd >= 0) {
+    if (IGNORE_EINTR(close(vchiq_fd)) < 0)
+      PLOG(ERROR) << "close";
+  }
+}
+
 void SandboxIPCHandler::SendRendererReply(
     const std::vector<base::ScopedFD>& fds,
     const base::Pickle& reply,
diff --git a/src/content/browser/renderer_host/sandbox_ipc_linux.h b/src/content/browser/renderer_host/sandbox_ipc_linux.h
index ba59b8f..7bbee57 100644
--- a/src/content/browser/renderer_host/sandbox_ipc_linux.h
+++ b/src/content/browser/renderer_host/sandbox_ipc_linux.h
@@ -74,6 +74,10 @@ class SandboxIPCHandler : public base::DelegateSimpleThread::Delegate {
                                base::PickleIterator iter,
                                const std::vector<base::ScopedFD>& fds);
 
+  void HandleOpenDevVchiq(int fd,
+                               base::PickleIterator iter,
+                               const std::vector<base::ScopedFD>& fds);
+
   void SendRendererReply(const std::vector<base::ScopedFD>& fds,
                          const base::Pickle& reply,
                          int reply_fd);
diff --git a/src/content/common/sandbox_linux/bpf_renderer_policy_linux.cc b/src/content/common/sandbox_linux/bpf_renderer_policy_linux.cc
index 67c1301..9feb113 100644
--- a/src/content/common/sandbox_linux/bpf_renderer_policy_linux.cc
+++ b/src/content/common/sandbox_linux/bpf_renderer_policy_linux.cc
@@ -29,6 +29,8 @@ struct local_dma_buf_sync {
 #endif
 
 using sandbox::SyscallSets;
+using sandbox::bpf_dsl::If;
+using sandbox::bpf_dsl::AnyOf;
 using sandbox::bpf_dsl::Allow;
 using sandbox::bpf_dsl::Arg;
 using sandbox::bpf_dsl::Error;
@@ -38,16 +40,20 @@ namespace content {
 
 namespace {
 
+#define ISMAGIC(r, x) (((r) & (_IOC_TYPEMASK << _IOC_TYPESHIFT)) == ((x) << _IOC_TYPESHIFT))
+
 ResultExpr RestrictIoctl() {
   const Arg<unsigned long> request(1);
-  return Switch(request)
+  // Pi - allow all VCHIQ ioctls and the VMCS_SM ioctls
+  return If(AnyOf(ISMAGIC(request, 0xc4), ISMAGIC(request, 'I')), Allow()).Else(
+    Switch(request)
       .SANDBOX_BPF_DSL_CASES((static_cast<unsigned long>(TCGETS), FIONREAD),
                              Allow())
 #if defined(OS_CHROMEOS)
       .SANDBOX_BPF_DSL_CASES(
           (static_cast<unsigned long>(LOCAL_DMA_BUF_IOCTL_SYNC)), Allow())
 #endif
-      .Default(sandbox::CrashSIGSYSIoctl());
+      .Default(sandbox::CrashSIGSYSIoctl()));
 }
 
 }  // namespace
diff --git a/src/content/common/sandbox_linux/sandbox_linux.h b/src/content/common/sandbox_linux/sandbox_linux.h
index 6b15562..983c1fc 100644
--- a/src/content/common/sandbox_linux/sandbox_linux.h
+++ b/src/content/common/sandbox_linux/sandbox_linux.h
@@ -58,6 +58,7 @@ class LinuxSandbox {
     METHOD_GET_STYLE_FOR_STRIKE = 35,
     METHOD_MAKE_SHARED_MEMORY_SEGMENT = 36,
     METHOD_MATCH_WITH_FALLBACK = 37,
+    METHOD_OPEN_DEV_VCHIQ,
   };
 
   // Get our singleton instance.
diff --git a/src/media/BUILD.gn b/src/media/BUILD.gn
index aae61e0..042ad4a 100644
--- a/src/media/BUILD.gn
+++ b/src/media/BUILD.gn
@@ -361,6 +361,19 @@ component("media") {
     ]
   }
 
+  # Really should have some sort of global enable_mmal switch
+  if (current_cpu == "arm" && is_linux) {
+    sources += [
+      "filters/mmal_video_decoder.cc",
+      "filters/mmal_video_decoder.h",
+    ]
+    include_dirs += [
+      "$target_sysroot/opt/vc/include",
+      "$target_sysroot/opt/vc/include/interface/vcos/pthreads",
+      "$target_sysroot/opt/vc/include/interface/vmcs_host/linux",
+    ]
+  }
+
   if (is_mac) {
     public_deps += [ "//media/base/mac" ]
     libs += [
diff --git a/src/media/audio/alsa/alsa_output.cc b/src/media/audio/alsa/alsa_output.cc
index f127c6f..8d2ba32 100644
--- a/src/media/audio/alsa/alsa_output.cc
+++ b/src/media/audio/alsa/alsa_output.cc
@@ -138,7 +138,10 @@ const char AlsaPcmOutputStream::kPlugPrefix[] = "plug:";
 
 // We use 40ms as our minimum required latency. If it is needed, we may be able
 // to get it down to 20ms.
-const uint32_t AlsaPcmOutputStream::kMinLatencyMicros = 40 * 1000;
+// ** (Pi) When life gets hard we don't seem to cycle fast enough for 40ms to be
+// long enough (actually it is approx half that as we put off reload until
+// half full)
+const uint32_t AlsaPcmOutputStream::kMinLatencyMicros = 200 * 1000;
 
 AlsaPcmOutputStream::AlsaPcmOutputStream(const std::string& device_name,
                                          const AudioParameters& params,
diff --git a/src/media/base/media_switches.cc b/src/media/base/media_switches.cc
index d3a6b60..e003e38 100644
--- a/src/media/base/media_switches.cc
+++ b/src/media/base/media_switches.cc
@@ -170,6 +170,22 @@ const char kUserGestureRequiredForCrossOriginPolicy[] =
 
 }  // namespace autoplay
 
+const char kMmalFrameBuffers[]              = "mmal-frame-buffers";
+const char kMmalZeroCopy[]                  = "mmal-zero-copy";
+const char kMmalFrameCopy[]                 = "mmal-frame-copy";
+const char kMmalSliceCopy[]                 = "mmal-slice-copy";
+const char kMmalDecodeI420[]                = "mmal-decode-i420";
+const char kMmalDecodeOpaque[]              = "mmal-decode-opaque";
+const char kMmalResizeIsp[]                 = "mmal-resize-isp";
+const char kMmalResizeResizer[]             = "mmal-resize-resizer";
+const char kMmalLowDelay[]                  = "mmal-low-delay";
+const char kMmalRedPixel[]                  = "mmal-red-pixel";
+const char kMmalDecoders[]                  = "mmal-decoders";
+
+const char kMmalDebugBench[]                = "mmal-debug-bench";
+const char kMmalDebugFps[]                  = "mmal-debug-fps";
+const char kMmalDebugFixedSize[]            = "mmal-debug-fixed-size";
+
 }  // namespace switches
 
 namespace media {
diff --git a/src/media/base/media_switches.h b/src/media/base/media_switches.h
index cfef8cf..bda9466 100644
--- a/src/media/base/media_switches.h
+++ b/src/media/base/media_switches.h
@@ -94,6 +94,22 @@ MEDIA_EXPORT extern const char kUserGestureRequiredForCrossOriginPolicy[];
 
 }  // namespace autoplay
 
+MEDIA_EXPORT extern const char kMmalFrameBuffers[];
+MEDIA_EXPORT extern const char kMmalZeroCopy[];
+MEDIA_EXPORT extern const char kMmalFrameCopy[];
+MEDIA_EXPORT extern const char kMmalSliceCopy[];
+MEDIA_EXPORT extern const char kMmalDecodeI420[];
+MEDIA_EXPORT extern const char kMmalDecodeOpaque[];
+MEDIA_EXPORT extern const char kMmalResizeIsp[];
+MEDIA_EXPORT extern const char kMmalResizeResizer[];
+MEDIA_EXPORT extern const char kMmalLowDelay[];
+MEDIA_EXPORT extern const char kMmalRedPixel[];
+MEDIA_EXPORT extern const char kMmalDecoders[];
+
+MEDIA_EXPORT extern const char kMmalDebugBench[];
+MEDIA_EXPORT extern const char kMmalDebugFps[];
+MEDIA_EXPORT extern const char kMmalDebugFixedSize[];
+
 }  // namespace switches
 
 namespace media {
diff --git a/src/media/base/video_frame.cc b/src/media/base/video_frame.cc
index 7ac322a..8c584c2 100644
--- a/src/media/base/video_frame.cc
+++ b/src/media/base/video_frame.cc
@@ -102,6 +102,7 @@ bool RequiresEvenSizeAllocation(VideoPixelFormat format) {
     case PIXEL_FORMAT_RGB32:
     case PIXEL_FORMAT_Y8:
     case PIXEL_FORMAT_Y16:
+    case PIXEL_FORMAT_MMAL_BUFFER:
       return false;
     case PIXEL_FORMAT_NV12:
     case PIXEL_FORMAT_NV21:
@@ -158,7 +159,7 @@ bool VideoFrame::IsValidConfig(VideoPixelFormat format,
     return true;
 
   // Make sure new formats are properly accounted for in the method.
-  static_assert(PIXEL_FORMAT_MAX == 27,
+  static_assert(PIXEL_FORMAT_MAX == 28,
                 "Added pixel format, please review IsValidConfig()");
 
   if (format == PIXEL_FORMAT_UNKNOWN) {
@@ -510,6 +511,7 @@ size_t VideoFrame::NumPlanes(VideoPixelFormat format) {
     case PIXEL_FORMAT_MJPEG:
     case PIXEL_FORMAT_Y8:
     case PIXEL_FORMAT_Y16:
+    case PIXEL_FORMAT_MMAL_BUFFER:
       return 1;
     case PIXEL_FORMAT_NV12:
     case PIXEL_FORMAT_NV21:
@@ -825,6 +827,7 @@ int VideoFrame::BitsPerChannel(VideoPixelFormat format) {
     case media::PIXEL_FORMAT_MT21:
     case media::PIXEL_FORMAT_Y8:
     case media::PIXEL_FORMAT_I422:
+    case media::PIXEL_FORMAT_MMAL_BUFFER:
       bits_per_channel = 8;
       break;
     case media::PIXEL_FORMAT_YUV420P9:
@@ -1110,6 +1113,7 @@ gfx::Size VideoFrame::SampleSize(VideoPixelFormat format, size_t plane) {
         case PIXEL_FORMAT_RGB32:
         case PIXEL_FORMAT_MJPEG:
         case PIXEL_FORMAT_Y8:
+        case PIXEL_FORMAT_MMAL_BUFFER:
           break;
       }
   }
@@ -1124,6 +1128,7 @@ int VideoFrame::BytesPerElement(VideoPixelFormat format, size_t plane) {
     case PIXEL_FORMAT_ARGB:
     case PIXEL_FORMAT_XRGB:
     case PIXEL_FORMAT_RGB32:
+    case PIXEL_FORMAT_MMAL_BUFFER:
       return 4;
     case PIXEL_FORMAT_RGB24:
       return 3;
diff --git a/src/media/base/video_frame.h b/src/media/base/video_frame.h
index af488ad..cc81c2d 100644
--- a/src/media/base/video_frame.h
+++ b/src/media/base/video_frame.h
@@ -34,6 +34,8 @@ namespace media {
 
 class MEDIA_EXPORT VideoFrame : public base::RefCountedThreadSafe<VideoFrame> {
  public:
+  typedef base::Callback<void(const gfx::Size&)> MmalResizeCB;
+
   enum {
     kFrameSizeAlignment = 16,
     kFrameSizePadding = 16,
@@ -298,6 +300,9 @@ class MEDIA_EXPORT VideoFrame : public base::RefCountedThreadSafe<VideoFrame> {
   gfx::ColorSpace ColorSpace() const;
   void set_color_space(const gfx::ColorSpace& color_space);
 
+  // Mmal resize kludge info
+  MmalResizeCB mmal_resize_cb_;
+
   VideoPixelFormat format() const { return format_; }
   StorageType storage_type() const { return storage_type_; }
 
diff --git a/src/media/base/video_types.cc b/src/media/base/video_types.cc
index 25fdbf5..8f8fae4 100644
--- a/src/media/base/video_types.cc
+++ b/src/media/base/video_types.cc
@@ -66,6 +66,8 @@ std::string VideoPixelFormatToString(VideoPixelFormat format) {
       return "PIXEL_FORMAT_Y16";
     case PIXEL_FORMAT_I422:
       return "PIXEL_FORMAT_I422";
+    case PIXEL_FORMAT_MMAL_BUFFER:
+      return "PIXEL_FORMAT_MMAL_BUFFER";
   }
   NOTREACHED() << "Invalid VideoPixelFormat provided: " << format;
   return "";
@@ -91,6 +93,7 @@ bool IsYuvPlanar(VideoPixelFormat format) {
     case PIXEL_FORMAT_YUV422P12:
     case PIXEL_FORMAT_YUV444P12:
     case PIXEL_FORMAT_I422:
+    case PIXEL_FORMAT_MMAL_BUFFER:
       return true;
 
     case PIXEL_FORMAT_UNKNOWN:
@@ -135,6 +138,7 @@ bool IsOpaque(VideoPixelFormat format) {
     case PIXEL_FORMAT_Y8:
     case PIXEL_FORMAT_Y16:
     case PIXEL_FORMAT_I422:
+    case PIXEL_FORMAT_MMAL_BUFFER:
       return true;
     case PIXEL_FORMAT_YV12A:
     case PIXEL_FORMAT_ARGB:
diff --git a/src/media/base/video_types.h b/src/media/base/video_types.h
index f340711..7025e9a 100644
--- a/src/media/base/video_types.h
+++ b/src/media/base/video_types.h
@@ -64,9 +64,11 @@ enum VideoPixelFormat {
   PIXEL_FORMAT_I422 =
       27,  // 16bpp YUV planar 1x1 Y, 2x1 UV samples, a.k.a. YU16.
 
+  PIXEL_FORMAT_MMAL_BUFFER,
+
   // Please update UMA histogram enumeration when adding new formats here.
   PIXEL_FORMAT_MAX =
-      PIXEL_FORMAT_I422,  // Must always be equal to largest entry logged.
+      PIXEL_FORMAT_MMAL_BUFFER,  // Must always be equal to largest entry logged.
 };
 
 // Color space or color range used for the pixels.
diff --git a/src/media/filters/mmal_video_decoder.cc b/src/media/filters/mmal_video_decoder.cc
new file mode 100644
index 0000000..1f0b5d4
--- /dev/null
+++ b/src/media/filters/mmal_video_decoder.cc
@@ -0,0 +1,3750 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "media/filters/mmal_video_decoder.h"
+
+#include <stddef.h>
+#include <stdint.h>
+
+#include <algorithm>
+#include <string>
+
+#include "base/base_switches.h"
+#include "base/bind.h"
+#include "base/callback_helpers.h"
+#include "base/command_line.h"
+#include "base/location.h"
+#include "base/single_thread_task_runner.h"
+#include "base/pickle.h"
+#include "base/posix/unix_domain_socket_linux.h"
+#include "media/base/bind_to_current_loop.h"
+#include "media/base/decoder_buffer.h"
+#include "media/base/limits.h"
+#include "media/base/media_switches.h"
+#include "media/base/timestamp_constants.h"
+#include "media/base/video_frame.h"
+#include "media/base/video_util.h"
+#include "content/child/child_process_sandbox_support_impl_linux.h"
+#include "content/common/sandbox_linux/sandbox_linux.h"
+#include "content/public/common/content_switches.h"
+
+#include <interface/mmal/mmal.h>
+#include <interface/mmal/mmal_buffer.h>
+#include <interface/mmal/mmal_parameters_video.h>
+#include <interface/mmal/util/mmal_util.h>
+#include <interface/mmal/util/mmal_util_params.h>
+#include <interface/mmal/util/mmal_default_components.h>
+#include <interface/mmal/util/mmal_connection.h>
+#include <interface/mmal/core/mmal_buffer_private.h>  // *** debug
+#include <interface/mmal/vc/mmal_vc_api.h>
+extern "C" {
+#include <interface/vmcs_host/vc_vchi_gencmd.h>
+}
+
+#include <iomanip>
+
+// Debug & test defines
+#define OPT_FRAME_COPY_STASHED 1
+#define TRACE_COMPONENT_CREATION 0
+#define TRACE_TRAMPOLINE 0
+#define TRACE_FRAME_STASH_NEW  0  // Traces memory allocated by FrameStash
+
+// Missing defn
+#define MMAL_COMPONENT_DEFAULT_RESIZER "vc.ril.resize"
+#define MMAL_COMPONENT_ISP_RESIZER "vc.ril.isp"
+
+#define MMAL_SLICE_HEIGHT 16
+#define MMAL_ALIGN_W      32
+#define MMAL_ALIGN_H      16
+
+#define MMAL_LIMIT_WIDTH  VCOS_ALIGN_UP(1920, MMAL_ALIGN_W)
+#define MMAL_LIMIT_HEIGHT VCOS_ALIGN_UP(1088, MMAL_ALIGN_H)
+//#define MMAL_LIMIT_WIDTH  VCOS_ALIGN_UP(2048, MMAL_ALIGN_W)
+//#define MMAL_LIMIT_HEIGHT VCOS_ALIGN_UP(1280, MMAL_ALIGN_H)
+
+#define FRAME_COPY_DEFAULT_BUFFERS      2
+#define SLICE_COPY_DEFAULT_BUFFERS      16
+#define ZERO_COPY_DEFAULT_BUFFERS       6
+
+#define MAX_COPY_FRAMES_IN_FLIGHT       6
+
+namespace media {
+
+enum FrameCopyMode {
+  unset,
+  SLICE,
+  FRAME,
+  ZERO
+};
+
+// Only want/need to init mmal/vchiq once (per-process)
+// This checks it
+static bool vchiq_init_done = false;
+
+// Not strictly a decoder count - this is inced @ initialisation
+static volatile base::subtle::Atomic32 decoder_count = 0;
+
+// Supported decoder bitmap (indexed by VideoCodec)
+static unsigned int supported_video_codecs = 0;
+
+// Task runner - current SingleThread - probably no reason
+// why it shouldn't be Sequenced so typedef for ease of changing
+typedef scoped_refptr<base::SingleThreadTaskRunner> MmalTaskRunner;
+
+
+// Some classes that we have fwd refs to
+class MmalConnectedPort;
+class MmalComponent;
+
+// ----------------------------------------------------------------------------
+//
+// Misc helper fns
+
+static inline size_t RoundUp(size_t value, size_t alignment) {
+  return ((value + (alignment - 1)) & ~(alignment - 1));
+}
+
+// Zap & release buffer
+static void buffer_release(MMAL_BUFFER_HEADER_T * const buffer)
+{
+  mmal_buffer_header_reset(buffer);
+  mmal_buffer_header_release(buffer);
+}
+
+// Calculate pixel aspect ratio
+static gfx::Size par_from_sizes(const gfx::Size& coded, const gfx::Size& natural)
+{
+  uint32_t a = coded.width() * natural.height();
+  uint32_t b = coded.height() * natural.width();
+
+  // Deal with the trivial case
+
+  if (a == b) {
+    return gfx::Size(1, 1);
+  }
+
+  // reduce - probably not needed but it might well save overflow
+  // or precision reduction later in the code
+  // We only expect to do this at init time so inefficiency isn't important
+
+  static const uint32_t primes[] = {2, 3, 5, 7, 11, 13, 17, 19};
+  for (int i = 0; i != sizeof(primes)/sizeof(primes[0]); ++i) {
+    const uint32_t p = primes[i];
+    while (a % p == 0 && b % p == 0) {
+      a /= p;
+      b /= p;
+    }
+  }
+
+  return gfx::Size(b, a);
+}
+
+// Convert a time_t to a printable string
+// * Surely there is a std C++ fn for this?
+static std::string strgmtimet(const time_t tt)
+{
+  char tbuf[32];
+  struct tm tm;
+  gmtime_r(&tt, &tm);
+  tbuf[sizeof(tbuf)-1] = 0;
+  snprintf(tbuf, sizeof(tbuf) - 1, "%04d-%02d-%02d %02d:%02d:%02d UTC",
+      tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday,
+      tm.tm_hour, tm.tm_min, tm.tm_sec);
+  return std::string(tbuf);
+}
+
+
+static VideoCodec fourcc_to_video_codec(const MMAL_FOURCC_T x)
+{
+  switch (x) {
+    case MMAL_ENCODING_H264:
+      return VideoCodec::kCodecH264;
+    case MMAL_ENCODING_WVC1:
+      return VideoCodec::kCodecVC1;
+    case MMAL_ENCODING_MP1V:
+    case MMAL_ENCODING_MP2V:
+      return VideoCodec::kCodecMPEG2;
+    case MMAL_ENCODING_MP4V:
+      return VideoCodec::kCodecMPEG4;
+    case MMAL_ENCODING_THEORA:
+      return VideoCodec::kCodecTheora;
+    case MMAL_ENCODING_VP8:
+      return VideoCodec::kCodecVP8;
+    // Missing FOURCC for
+    // kCodecVP9,
+    // kCodecHEVC,
+    default:
+      break;
+  }
+  return VideoCodec::kUnknownVideoCodec;
+}
+
+static MMAL_FOURCC_T video_codec_to_fourcc(const VideoCodec x)
+{
+  switch (x) {
+    case VideoCodec::kCodecH264:
+      return MMAL_ENCODING_H264;
+    case VideoCodec::kCodecVC1:
+      return MMAL_ENCODING_WVC1;
+    case VideoCodec::kCodecMPEG2:
+      return MMAL_ENCODING_MP2V;
+    case VideoCodec::kCodecMPEG4:
+      return MMAL_ENCODING_MP4V;
+    case VideoCodec::kCodecTheora:
+      return MMAL_ENCODING_THEORA;
+    case VideoCodec::kCodecVP8:
+      return MMAL_ENCODING_VP8;
+    // Missing FOURCC for
+    // kCodecVP9,
+    // kCodecHEVC,
+    default:
+      break;
+  }
+  return MMAL_ENCODING_UNKNOWN;
+}
+
+static std::string fourcc_string(const MMAL_FOURCC_T fourcc)
+{
+  char buf[10];
+  mmal_4cc_to_string(buf, sizeof(buf), fourcc);
+  return std::string(buf);
+}
+
+static const char * frame_copy_mode_str(const FrameCopyMode mode)
+{
+  switch (mode) {
+    case FrameCopyMode::unset:
+      return "unset";
+    case FrameCopyMode::SLICE:
+      return "SLICE";
+    case FrameCopyMode::FRAME:
+      return "FRAME";
+    case FrameCopyMode::ZERO:
+      return "ZERO";
+    default:
+      break;
+  }
+  return "???";
+}
+
+//-----------------------------------------------------------------------------
+
+
+class MmalVideoDecoder::Options
+{
+  const bool single_process_;
+  const bool zero_copy_;
+  const bool frame_copy_;
+  const bool slice_copy_;
+  const bool red_pixel_;
+  const bool decode_opaque_;
+  const bool decode_i420_;
+  const bool resize_isp_;
+  const bool resize_resizer_;
+  const bool low_delay_;
+  const unsigned int frame_buffers_;
+  const unsigned int decoders_;
+
+  const bool debug_bench_;
+  const bool debug_fps_;
+  const gfx::Size debug_fixed_size_;
+
+  size_t gpu_mem_;
+  uint32_t firmware_date_;
+
+  static unsigned int cl_uint(const base::CommandLine& cmd_line, const char name[], const unsigned int def_val = 0)
+  {
+      unsigned int val;
+      return base::StringToUint(cmd_line.GetSwitchValueNative(name), &val) ? val : def_val;
+  }
+
+  static bool cl_flag(const base::CommandLine& cmd_line, const char name[])
+  {
+      return cmd_line.HasSwitch(name);
+  }
+
+  static gfx::Size cl_size(const base::CommandLine& cmd_line, const char name[])
+  {
+      const char * const cl(cmd_line.GetSwitchValueNative(name).c_str());
+      char * eoi = NULL;
+      const unsigned long w = strtoul(cl, &eoi, 10);
+      if (*eoi != 'x' && *eoi != 'X') {
+        return gfx::Size();
+      }
+      const unsigned long h = strtoul(eoi + 1, &eoi, 10);
+      if (*eoi != '\0') {
+        return gfx::Size();
+      }
+      return gfx::Size(w, h);
+  }
+
+  struct FirmwareDates {
+    static constexpr uint32_t HasOpaque = 1477958400;  // 2016-11-01
+    static constexpr uint32_t HasIsp = 1477958400;  // 2016-11-01
+  };
+
+  Options(const base::CommandLine& cmd_line) :
+    single_process_(cl_flag(cmd_line, switches::kSingleProcess)),
+    zero_copy_(cl_flag(cmd_line, switches::kMmalZeroCopy)),
+    frame_copy_(cl_flag(cmd_line, switches::kMmalFrameCopy)),
+    slice_copy_(cl_flag(cmd_line, switches::kMmalSliceCopy)),
+    red_pixel_(cl_flag(cmd_line, switches::kMmalRedPixel)),
+    decode_opaque_(cl_flag(cmd_line, switches::kMmalDecodeOpaque)),
+    decode_i420_(cl_flag(cmd_line, switches::kMmalDecodeI420)),
+    resize_isp_(cl_flag(cmd_line, switches::kMmalResizeIsp)),
+    resize_resizer_(cl_flag(cmd_line, switches::kMmalResizeResizer)),
+    low_delay_(cl_flag(cmd_line, switches::kMmalLowDelay)),
+    frame_buffers_(cl_uint(cmd_line, switches::kMmalFrameBuffers)),
+    decoders_(cl_uint(cmd_line, switches::kMmalDecoders, 1)),
+    debug_bench_(cl_flag(cmd_line, switches::kMmalDebugBench)),
+    debug_fps_(cl_flag(cmd_line, switches::kMmalDebugFps)),
+    debug_fixed_size_(cl_size(cmd_line, switches::kMmalDebugFixedSize)),
+    gpu_mem_(0),
+    firmware_date_(0)
+  {
+  }
+
+  bool opaque_good() const
+  {
+    return firmware_date_ >= FirmwareDates::HasOpaque;
+  }
+
+  bool isp_resize_good() const
+  {
+    return firmware_date_ >= FirmwareDates::HasIsp &&
+      gpu_mem_ >= (76 << 20);  // Take 76M as threshold for ISP use
+  }
+
+public:
+  static std::unique_ptr<Options> Create(const base::CommandLine& cmd_line = *base::CommandLine::ForCurrentProcess())
+  {
+    return std::unique_ptr<Options>(new Options(cmd_line));
+  }
+
+  // Default encoding now opaque
+  MMAL_FOURCC_T decoder_out_encoding() const
+  {
+    return  decode_i420_ || !(decode_opaque_ || opaque_good()) ?
+      MMAL_ENCODING_I420 :
+      MMAL_ENCODING_OPAQUE;
+  }
+
+  const char * resizer_component_name() const
+  {
+    return resize_resizer_ || !(resize_isp_ || isp_resize_good()) ?
+      MMAL_COMPONENT_DEFAULT_RESIZER :
+      MMAL_COMPONENT_ISP_RESIZER;
+  }
+
+  FrameCopyMode frame_copy_mode(const bool has_slice_resize) const
+  {
+    return zero_copy_ ? FrameCopyMode::ZERO :
+      frame_copy_ ? FrameCopyMode::FRAME :
+      slice_copy_ ? FrameCopyMode::SLICE :
+      has_slice_resize && !isp_resize_good() ? FrameCopyMode::SLICE : FrameCopyMode::FRAME;
+  }
+
+  unsigned int frame_buffers(const FrameCopyMode copy_mode) const
+  {
+    return frame_buffers_ != 0 ? frame_buffers_ :
+      copy_mode == FrameCopyMode::ZERO ? ZERO_COPY_DEFAULT_BUFFERS :
+      copy_mode == FrameCopyMode::SLICE ? SLICE_COPY_DEFAULT_BUFFERS : FRAME_COPY_DEFAULT_BUFFERS;
+  }
+
+  bool single_process() const
+  {
+    return single_process_;
+  }
+
+  bool max_decoders() const
+  {
+    return decoders_;
+  }
+
+  bool red_pixel() const
+  {
+    return red_pixel_;
+  }
+
+  bool low_delay(const bool low_delay_req = false) const
+  {
+    return low_delay_ || low_delay_req;
+  }
+
+  bool debug_bench() const
+  {
+    return debug_bench_;
+  }
+
+  bool debug_fps() const
+  {
+    return debug_bench_ || debug_fps_;
+  }
+
+  bool debug_fixed_size_set() const
+  {
+    return debug_fixed_size_.width() > 0 && debug_fixed_size_.height()  > 0;
+  }
+
+  gfx::Size debug_fixed_size() const
+  {
+    return debug_fixed_size_;
+  }
+
+  void set_gpu_mem(const size_t size)
+  {
+    gpu_mem_ = size;
+  }
+
+  void set_firmware_date(const uint32_t date)
+  {
+    firmware_date_ = date;
+  }
+
+  std::string ToString() const
+  {
+    std::ostringstream s;
+    s << "mmal frame_buffers=" << frame_buffers_ <<
+       ", mmal_X_copy (z/f/s)=" << zero_copy_  << "/"  << frame_copy_ << "/" << slice_copy_ <<
+       ", mmal_low_delay=" << low_delay_ <<
+       ", mmal_decode_i420/opaque=" << decode_i420_ << "/" << decode_opaque_ <<
+       ", mmal_resize_isp=" << resize_isp_ <<
+       ", mmal_decoders=" << decoders_ <<
+       ", mmal_debug_bench=" << debug_bench_ <<
+       ", mmal_debug_fps=" << debug_fps_ <<
+       ", mmal_debug_fixed_size=" << debug_fixed_size_.ToString() <<
+       ", gpu_mem=" << gpu_mem_ <<
+       ", firmware_date=" << strgmtimet(firmware_date_);
+    return s.str();
+  }
+
+  std::string OptString() const
+  {
+    std::ostringstream s;
+    s << "isp_resize_good=" << isp_resize_good() <<
+      ", frame_copy_mode=" << frame_copy_mode_str(frame_copy_mode(true)) <<
+      ", resizer_component=" << resizer_component_name() <<
+      ", encoding=" << fourcc_string(decoder_out_encoding());
+    return s.str();
+  }
+};
+
+
+//-----------------------------------------------------------------------------
+
+
+#if TRACE_FRAME_STASH_NEW
+volatile base::subtle::Atomic32 total_stash_alloc = 0;
+#endif
+
+
+#if 1
+class FrameDesc
+{
+  uint32_t size_;
+  std::unique_ptr<base::SharedMemory> shm_;
+  gpu::Mailbox id_;
+  base::Closure on_kill_cb_;
+
+public:
+  FrameDesc(const size_t size) :
+    size_((uint32_t)size)
+  {
+#if TRACE_FRAME_STASH_NEW
+    const base::subtle::Atomic32 talloc = base::subtle::NoBarrier_AtomicIncrement(&total_stash_alloc, (base::subtle::Atomic32)size);
+    LOG(ERROR) << "New frame: size=" << size << ", total=" << talloc;
+#endif
+
+    int fd = content::MakeSharedMemorySegmentViaIPC(size, false);
+    if (fd == -1) {
+      LOG(ERROR) << "shm open fail";
+    }
+    else
+    {
+//      LOG(ERROR) << "shm open succeed";
+      shm_ = std::unique_ptr<base::SharedMemory>(new base::SharedMemory(
+        base::SharedMemoryHandle::ImportHandle(fd, size), false));
+
+      if (!shm_->Map(size))
+      {
+        LOG(ERROR) << "### Shm creation failed";
+        return;
+      }
+    }
+  }
+
+  ~FrameDesc()
+  {
+//    LOG(ERROR) << " destroy frame desc fd=" << (shm_ == nullptr ? -99 : shm_->handle().fd);
+    if (!on_kill_cb_.is_null()) {
+      on_kill_cb_.Run();
+    }
+#if TRACE_FRAME_STASH_NEW
+    if (shm_->memory() != nullptr) {
+      const base::subtle::Atomic32 talloc = base::subtle::NoBarrier_AtomicIncrement(&total_stash_alloc, -(base::subtle::Atomic32)size_);
+      LOG(ERROR) << "Delete frame: size=" << size_ << ", total=" << talloc;
+    }
+#endif
+  }
+
+  uint8_t * frame() const
+  {
+    return (uint8_t *)shm_->memory();
+  }
+
+  size_t size() const
+  {
+    return size_;
+  }
+
+  base::SharedMemoryHandle shared_memory() const
+  {
+    return shm_->handle();
+  }
+
+  void set_id_and_kill_cb(const gpu::Mailbox& id, const base::Closure& kill_cb)
+  {
+    if (id.IsZero()) {
+      return;
+    }
+    if (!id_.IsZero()) {
+      if (id != id_) {
+        LOG(ERROR) << "FrameDesc::" << __func__ << " ids don't match: " << MmalVideoFrame::hashid(id) << " -> " << MmalVideoFrame::hashid(id_);
+      }
+      return;
+    }
+    id_ = id;
+//    LOG(ERROR) << "FrameDesc::" << __func__ << " id=" << MmalVideoFrame::hashid(id);
+    if (!kill_cb.is_null()) {
+      on_kill_cb_ = kill_cb;
+    }
+  }
+
+  const gpu::Mailbox& get_id() const
+  {
+    return id_;
+  }
+};
+#else
+
+// Shared memory frames allocated by our parent process
+// Surprisingly the sandbox does let us allocate then here but this process
+// tends to be killed violently and that in turn leaks shmids as they need
+// to exist at least until mapped by X
+class FrameDesc
+{
+  uint32_t size_;
+  std::unique_ptr<base::SysvSharedMemory> shm_;
+  gpu::Mailbox id_;
+  base::Closure on_kill_cb_;
+
+public:
+  FrameDesc(const size_t size) :
+    size_((uint32_t)size)
+  {
+#if TRACE_FRAME_STASH_NEW
+    const base::subtle::Atomic32 talloc = base::subtle::NoBarrier_AtomicIncrement(&total_stash_alloc, (base::subtle::Atomic32)size);
+    LOG(ERROR) << "New frame: size=" << size << ", total=" << talloc;
+#endif
+
+    shm_ = std::unique_ptr<base::SysvSharedMemory>(new base::SysvSharedMemory(shm_get_id(size_), false));
+
+    if (!shm_->Map())
+    {
+      LOG(ERROR) << "Failed to create shared memory segment";
+    }
+  }
+
+  ~FrameDesc()
+  {
+//    LOG(ERROR) << " destroy frame desc fd=" << (shm_ == nullptr ? -99 : shm_->handle().fd);
+    if (!on_kill_cb_.is_null()) {
+      on_kill_cb_.Run();
+    }
+#if TRACE_FRAME_STASH_NEW
+    if (mapaddr_ != nullptr) {
+      const base::subtle::Atomic32 talloc = base::subtle::NoBarrier_AtomicIncrement(&total_stash_alloc, -(base::subtle::Atomic32)size_);
+      LOG(ERROR) << "Delete frame: size=" << size_ << ", total=" << talloc;
+    }
+#endif
+    if (shm_ != nullptr) {
+      shm_rm_id(shm_->shmid());
+    }
+  }
+
+  uint8_t * frame() const
+  {
+    return (uint8_t *)shm_->memory();
+  }
+
+  size_t size() const
+  {
+    return size_;
+  }
+
+  int shmid() const
+  {
+    return shm_->shmid();
+  }
+
+  void set_id_and_kill_cb(const gpu::Mailbox& id, const base::Closure& kill_cb)
+  {
+    if (id.IsZero()) {
+      return;
+    }
+    if (!id_.IsZero()) {
+      if (id != id_) {
+        LOG(ERROR) << "FrameDesc::" << __func__ << " ids don't match: " << MmalVideoFrame::hashid(id) << " -> " << MmalVideoFrame::hashid(id_);
+      }
+      return;
+    }
+    id_ = id;
+//    LOG(ERROR) << "FrameDesc::" << __func__ << " id=" << MmalVideoFrame::hashid(id);
+    if (!kill_cb.is_null()) {
+      on_kill_cb_ = kill_cb;
+    }
+  }
+
+  const gpu::Mailbox& get_id() const
+  {
+    return id_;
+  }
+};
+#endif
+
+// Simple class to stash frames
+// Thread unsafe - use external locks
+class FrameStash
+{
+  size_t size_;
+  std::stack<FrameDesc *> frames_;
+
+  FrameDesc * frame_pop()
+  {
+    FrameDesc * const frame = frames_.top();
+    frames_.pop();
+    return frame;
+  }
+
+  void empty_frames()
+  {
+    while (!frames_.empty()) {
+      delete frame_pop();
+    }
+  }
+
+public:
+  FrameStash()
+  {
+  }
+  virtual ~FrameStash()
+  {
+    empty_frames();
+  }
+
+  void free_frame(FrameDesc * const frame)
+  {
+    if (frame->size() != size_) {
+      delete frame;
+    }
+    else {
+      frames_.push(frame);
+    }
+  }
+
+  FrameDesc * alloc_frame(const size_t size)
+  {
+    if (size != size_) {
+      empty_frames();
+    }
+    size_ = size;
+
+    FrameDesc * const frame = (size == 0) ? nullptr :
+      frames_.empty() ? new FrameDesc(size) : frame_pop();
+
+    return frame;
+  }
+};
+
+//-----------------------------------------------------------------------------
+
+// Trampoline class
+// This allows us to attach callbacks from VideoFrames to our
+// component / port without it locking down the component.
+// If the component is dead by the time the callback arrives then it is simply
+// dropped on the floor
+//
+// * Extended well past original intention - rather more than just
+//   a trampoline now... Should be renamed
+
+// A number of functions in this class (in particular "kill") look like they
+// might cause suicide which would be bad as the AutoLock would be removed
+// after it was destroyed. This is prevented by the fact that this class should
+// only be accessed though scoped_refptrs so the calling fn should have a ref
+// on us for at least the duration of the call.
+
+class MmalTrampoline : public base::RefCountedThreadSafe<MmalTrampoline>
+{
+  typedef base::Callback<void(const int)> MmalCopiedFramedDestructionCB;
+#if TRACE_TRAMPOLINE
+  // These two are only used for debug
+  static int seq_count_; // Seq number counter
+  const int seq_;  // Debugging sequence number
+#endif
+
+  base::Lock lock_;
+  int in_flight_;
+  bool low_traced_;
+  const int max_in_flight_;
+  VideoFrame::MmalResizeCB resize_cb_;
+  MmalCopiedFramedDestructionCB destruction_cb_;
+  FrameStash frame_stash_;
+
+  void resize_trampoline(const gfx::Size& size)
+  {
+//    LOG(ERROR) << __func__ ;
+    base::AutoLock lock(lock_);
+    if (!resize_cb_.is_null())
+      resize_cb_.Run(size);
+  }
+
+  friend base::RefCountedThreadSafe<MmalTrampoline>;
+  virtual ~MmalTrampoline()
+  {
+//    LOG(ERROR) << "@@@ " << __func__ << "[" << seq_ << "]";
+  }
+public:
+  MmalTrampoline(
+      const int max_in_flight,
+      const VideoFrame::MmalResizeCB& resize_cb,
+      const MmalCopiedFramedDestructionCB& destruction_cb) :
+#if TRACE_TRAMPOLINE
+    seq_(++seq_count_),
+#endif
+    in_flight_(0),
+    low_traced_(true),
+    max_in_flight_(max_in_flight),
+    resize_cb_(resize_cb),
+    destruction_cb_(destruction_cb)
+  {
+#if TRACE_TRAMPOLINE
+    LOG(ERROR) << "@@@ " <<  __func__ << "[" << seq_ << "]";
+#endif
+  }
+
+  VideoFrame::MmalResizeCB new_resize_cb()
+  {
+    return base::Bind(&MmalTrampoline::resize_trampoline, this);
+  }
+
+  void kill()
+  {
+#if TRACE_TRAMPOLINE
+    LOG(ERROR) << "--- "  << "[" << seq_ << "] Trampoline::kill";
+#endif
+    base::AutoLock lock(lock_);
+    resize_cb_.Reset();
+    destruction_cb_.Reset();
+    frame_stash_.alloc_frame(0); // Will flush out anything we have stashed
+  }
+
+  void free_frame(FrameDesc * const frame, const int buffer_count)
+  {
+    lock_.Acquire();
+
+    // Some callbacks can call us back
+    // We don't have recursive locks - so copy the callback for later use
+    // outside the lock
+    const MmalCopiedFramedDestructionCB cb = destruction_cb_;
+
+    frame_stash_.free_frame(frame);
+
+    // in_flight_ can exceed max_in_flight_ by the number of frames
+    // that can fit in the mmal port.  Avoid stuffing more than we have had returned.
+    const int stuff_count = std::min(in_flight_ - max_in_flight_, buffer_count);
+
+    if ((in_flight_ -= buffer_count) < 0)
+      LOG(FATAL) << "Buffers in flight underflow";
+
+#if TRACE_TRAMPOLINE
+    LOG(ERROR)  << "[" << seq_ << "] killed=" << destruction_cb_.is_null() << ", in_flight:" << in_flight_ << "/" << max_in_flight_ <<
+      ", BCount=" << buffer_count <<
+      ", Stuff=" << stuff_count;
+#endif
+    // Some hysteresis on in_flight logging - do not log if killed
+    if (in_flight_ < max_in_flight_ / 2 && !low_traced_ && !cb.is_null()) {
+      low_traced_ = true;
+      LOG(INFO) << "--- In flight low: " << in_flight_ << "/" << max_in_flight_;
+    }
+    else if (in_flight_ >= max_in_flight_ - 1 && low_traced_) {
+      low_traced_ = false;
+      LOG(INFO) << "--- In flight OK: " << in_flight_ << "/" << max_in_flight_;
+    }
+
+    lock_.Release();
+
+    if (stuff_count > 0 && !cb.is_null())
+      cb.Run(std::min(buffer_count, stuff_count));
+  }
+
+  FrameDesc * alloc_frame(const size_t size)
+  {
+    base::AutoLock lock(lock_);
+    return frame_stash_.alloc_frame(size);
+  }
+
+  bool recycle_buffer_in_flight(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    lock_.Acquire();
+    const bool wants_recycle = (++in_flight_ <= max_in_flight_);
+    lock_.Release();
+
+    if (wants_recycle)
+    {
+#if TRACE_TRAMPOLINE
+      LOG(ERROR) << "[" << seq_ << "] recycle: in flight=" << in_flight_;
+#endif
+      return true;
+    }
+#if TRACE_TRAMPOLINE
+    LOG(ERROR) << "[" << seq_ << "] release, in_flight=" << in_flight_;
+#endif
+
+    // Was Deadlock opportunity
+    // ?? pool starvation opportunity now
+
+    buffer_release(buffer);
+    return false;
+  }
+
+  bool is_stalling() const
+  {
+    return in_flight_ >= max_in_flight_;
+  }
+};
+
+#if TRACE_TRAMPOLINE
+int MmalTrampoline::seq_count_ = 0;
+#endif
+
+//-----------------------------------------------------------------------------
+
+MmalVideoFrame::MmalVideoFrame(
+    const StorageType storage_type,
+    const gfx::Size& coded_size,
+    const gfx::Rect& visible_rect,
+    const gfx::Size& natural_size,
+    const base::TimeDelta timestamp,
+    const gpu::Mailbox& id) :
+  VideoFrame(PIXEL_FORMAT_MMAL_BUFFER, storage_type, coded_size, visible_rect, natural_size, timestamp),
+  id_(id)
+//  shmid_(-1)
+{
+}
+
+MmalVideoFrame::~MmalVideoFrame()
+{
+}
+
+//-----------------------------------------------------------------------------
+
+class MmalCopiedVideoFrame : public media::MmalVideoFrame
+{
+  scoped_refptr<MmalTrampoline> trampoline_;
+  FrameDesc * frame_desc_;
+  int buffer_count_;
+
+  ~MmalCopiedVideoFrame() override;
+
+public:
+  MmalCopiedVideoFrame(const scoped_refptr<MmalTrampoline>& trampoline,
+      const gfx::Size& size,
+      const base::TimeDelta timestamp = kNoTimestamp) :
+    MmalVideoFrame(
+      STORAGE_UNOWNED_MEMORY, size, gfx::Rect(size), size, timestamp),
+    trampoline_(trampoline),
+    buffer_count_(0)
+  {
+    // Allow 1 line overread (see VideoFrame::AllocateYUV)
+    const size_t height = RoundUp(rows(0) + 1, kFrameSizeAlignment * 2);
+    const size_t stride = RoundUp(row_bytes(0), kFrameSizeAlignment);
+    const size_t data_size = height * stride + kFrameSizePadding;
+
+    frame_desc_ = trampoline_->alloc_frame(data_size);
+    set_data(0, frame_desc_->frame());
+    set_stride(0, stride);
+    AddSharedMemoryHandle(frame_desc_->shared_memory());
+//    shmid_ = frame_desc_->shmid();
+    id_ = frame_desc_->get_id();
+
+    mmal_resize_cb_ = trampoline_->new_resize_cb();
+  }
+
+  void inc_buffer_count()
+  {
+    ++buffer_count_;
+  }
+};
+
+MmalCopiedVideoFrame::~MmalCopiedVideoFrame()
+{
+  frame_desc_->set_id_and_kill_cb(id_, kill_id_);
+  trampoline_->free_frame(frame_desc_, buffer_count_);
+}
+
+//-----------------------------------------------------------------------------
+//
+// VideoFrame class that deals with the case where the frame is copied into
+// an mmal buffer by the firmware and we then move the frame buffer from the mmal
+// buffer header to our frame.  This requires more careful buffer management than
+// the copy or zero variations.  See MmalFramePool for the buffer pool logic.
+
+class MmalStashedVideoFrame : public media::MmalVideoFrame
+{
+  scoped_refptr<MmalTrampoline> trampoline_;
+  FrameDesc * const frame_desc_;
+  const int buffer_count_;
+
+  ~MmalStashedVideoFrame() override;
+
+public:
+  // Create a VideoFrame and move the frame stash into it from
+  // the mmal buffer
+  MmalStashedVideoFrame(MMAL_BUFFER_HEADER_T * const buffer,
+      const scoped_refptr<MmalTrampoline>& trampoline,
+      const gfx::Size& size,
+      const size_t stride,
+      const base::TimeDelta timestamp = kNoTimestamp) :
+    MmalVideoFrame(
+      STORAGE_UNOWNED_MEMORY, size, gfx::Rect(size), size, timestamp,
+        ((const FrameDesc *)buffer->user_data)->get_id()),
+    trampoline_(trampoline),
+    frame_desc_((FrameDesc *)buffer->user_data),
+    buffer_count_(1)
+  {
+    set_data(0, buffer->data);
+    set_stride(0, stride);
+    AddSharedMemoryHandle(frame_desc_->shared_memory());
+//    shmid_ = frame_desc_->shmid();
+
+    buffer->data = nullptr;
+    buffer->alloc_size = 0;
+    buffer->user_data = nullptr;
+
+//    LOG(ERROR) << "@@@ " << __func__ << ", fd=" << frame_desc_->shared_memory().fd;
+
+    mmal_resize_cb_ = trampoline_->new_resize_cb();
+  }
+};
+
+MmalStashedVideoFrame::~MmalStashedVideoFrame()
+{
+//  LOG(ERROR) << "@@@ " << __func__ << ", fd=" << frame_desc_->shared_memory().fd << ", pid=" << getpid();
+  frame_desc_->set_id_and_kill_cb(id_, kill_id_);
+  trampoline_->free_frame(frame_desc_, buffer_count_);
+}
+
+//-----------------------------------------------------------------------------
+
+class MmalZeroVideoFrame : public media::MmalVideoFrame
+{
+  const base::Closure destruction_cb_;
+
+  ~MmalZeroVideoFrame() override;
+
+public:
+  MmalZeroVideoFrame(
+      const gfx::Size& size,
+      uint8_t * const data,
+      size_t stride,
+      const MmalResizeCB& resize_cb,
+      const base::Closure& destruction_cb,
+      const base::TimeDelta timestamp = kNoTimestamp) :
+    MmalVideoFrame(
+      STORAGE_UNOWNED_MEMORY, size, gfx::Rect(size), size, timestamp),
+    destruction_cb_(destruction_cb)
+  {
+    set_data(0, data);
+    set_stride(0, stride);
+    mmal_resize_cb_ = resize_cb;
+  }
+};
+
+MmalZeroVideoFrame::~MmalZeroVideoFrame()
+{
+  destruction_cb_.Run();
+}
+
+// ----------------------------------------------------------------------------
+
+// Pool base class - can be instantiated
+class MmalPool
+{
+public:
+  typedef base::Callback<bool(MMAL_BUFFER_HEADER_T * buffer)> MmalPoolBufferReleaseCB;
+
+private:
+  MmalPoolBufferReleaseCB pool_cb_;
+
+protected:
+  virtual bool do_pool_cb(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    return pool_cb_.Run(buffer);
+  }
+
+private:
+  static MMAL_BOOL_T static_pool_cb(MMAL_POOL_T *pool, MMAL_BUFFER_HEADER_T *buffer, void *userdata)
+  {
+    return ((MmalPool *)userdata)->do_pool_cb(buffer);
+  }
+
+protected:
+  MMAL_POOL_T * pool_;
+
+  MmalPool() :
+    pool_(nullptr)
+  {
+  }
+
+  // Must be called as part of create if you ever want callbacks to work
+  void set_static_pool_cb()
+  {
+    mmal_pool_callback_set(pool_, static_pool_cb, this);
+  }
+
+public:
+  // N.B. Overriding classes are responsible for freeing pool_ correctly
+  virtual ~MmalPool()
+  {
+  }
+
+  void set_buffer_release_cb(const MmalPoolBufferReleaseCB& cb)
+  {
+    pool_cb_ = cb;
+  }
+
+  virtual MMAL_BUFFER_HEADER_T * get_timeout(const uint32_t timeout_ms)
+  {
+    return mmal_queue_timedwait(pool_->queue, timeout_ms);
+  }
+
+  virtual MMAL_BUFFER_HEADER_T * get()
+  {
+    return mmal_queue_get(pool_->queue);
+  }
+
+  virtual void put(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    mmal_queue_put(pool_->queue, buffer);
+  }
+
+  // Do the equivalent of put then get
+  // Will refresh buffer->data if required
+  virtual MMAL_BUFFER_HEADER_T * put_get(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    return buffer;
+  }
+
+  uint32_t length() const
+  {
+    return mmal_queue_length(pool_->queue);
+  }
+
+  // Pool size (not data size)
+  uint32_t size() const
+  {
+    return pool_->headers_num;
+  }
+
+  // Thing we are servicing may have changed shape
+  // By default ignore
+  virtual int port_resized(const uint32_t num, const uint32_t size)
+  {
+    return 0;
+  }
+
+  virtual int create(const uint32_t num, const uint32_t size) = 0;
+
+  // Enable/disable aren't required fns but add helpful hints
+  // to some derived classes
+  // * Could be used to debug unexpected pool movement
+  virtual int disable()
+  {
+    return 0;
+  }
+
+  virtual int enable()
+  {
+    return 0;
+  }
+
+  // This isn't exactly part of a base pool implementation
+  // but it saves a spurious extra layer
+  virtual void set_trampoline(const scoped_refptr<MmalTrampoline>& trampoline)
+  {
+  }
+};
+
+//-----------------------------------------------------------------------------
+//
+// Pool attached to a port
+class MmalPortPool : public MmalPool
+{
+  MMAL_PORT_T * const port_;
+public:
+  MmalPortPool(MMAL_PORT_T * const port) :
+    port_(port)
+  {
+  }
+
+  ~MmalPortPool() override
+  {
+    if (pool_ != NULL) {
+      mmal_port_pool_destroy(port_, pool_);
+    }
+  }
+
+  int create(const uint32_t num, const uint32_t size) override
+  {
+    if ((pool_ = mmal_port_pool_create(port_, num, size)) == NULL)
+    {
+      LOG(ERROR) << "### mmal_port_pool_create failed: " << num << "*" << size;
+      return -1;
+    }
+    set_static_pool_cb();
+    return 0;
+  }
+};
+
+//-----------------------------------------------------------------------------
+//
+// Pool not attached to a port
+
+class MmalUserPool : public MmalPool
+{
+public:
+  MmalUserPool()
+  {
+  }
+
+  ~MmalUserPool() override
+  {
+    if (pool_ != NULL) {
+      mmal_pool_destroy(pool_);
+    }
+  }
+
+  int create(const uint32_t num, const uint32_t size) override
+  {
+    if ((pool_ = mmal_pool_create(num, size)) == NULL)
+    {
+      LOG(ERROR) << "### mmal_pool_create failed: " << num << "*" << size;
+      return -1;
+    }
+    set_static_pool_cb();
+    return 0;
+  }
+};
+
+//-----------------------------------------------------------------------------
+//
+// Pool that has detachable frame buffers allocated by our trampoline
+// Buffers in the pool have no frame buffers attached
+// Buffers are attached on get and detached on release
+// * For a more generic version we could have callback alloc/free fns
+class MmalFramePool : public MmalUserPool
+{
+  scoped_refptr<MmalTrampoline> trampoline_;
+  size_t size_;
+
+  MMAL_BUFFER_HEADER_T * attach_data_buffer(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    // Ignore null
+    if (buffer != nullptr) {
+      if (buffer->data != NULL) {
+        LOG(FATAL) << "Buffer already in use";
+      }
+
+      FrameDesc * frame;
+      if ((frame = trampoline_->alloc_frame(size_)) == nullptr)
+      {
+        LOG(ERROR) << "### " << __func__ << ": alloc frame failed";
+        // If we cannot alloc then release buffer back to pool as we are about
+        // to lose track of it
+        buffer_release(buffer);
+        return nullptr;
+      }
+      buffer->user_data = frame;
+      buffer->data = frame->frame();
+      buffer->alloc_size = frame->size();
+    }
+    return buffer;
+  }
+
+  MMAL_BUFFER_HEADER_T * detach_data_buffer(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    if (buffer != nullptr && buffer->data != nullptr) {
+      // This is called on buffer release so should have no "in-flight" component
+      trampoline_->free_frame((FrameDesc *)buffer->user_data, 0);
+      buffer->user_data = nullptr;
+      buffer->data = nullptr;
+      buffer->alloc_size = 0;
+    }
+    return buffer;  // For convienience
+  }
+
+protected:
+  bool do_pool_cb(MMAL_BUFFER_HEADER_T * const buffer) override
+  {
+    return MmalUserPool::do_pool_cb(detach_data_buffer(buffer));
+  }
+
+public:
+  MmalFramePool() :
+    size_(0)
+  {
+  }
+
+  int create(const uint32_t num, const uint32_t size) override
+  {
+    if (MmalUserPool::create(num, 0) != 0) {
+      return -1;
+    }
+    size_ = size;
+    return 0;
+  }
+
+  MMAL_BUFFER_HEADER_T * get_timeout(const uint32_t timeout_ms) override
+  {
+    return attach_data_buffer(MmalUserPool::get_timeout(timeout_ms));
+  }
+
+  MMAL_BUFFER_HEADER_T * get() override
+  {
+    return attach_data_buffer(MmalUserPool::get());
+  }
+
+  void put(MMAL_BUFFER_HEADER_T * const buffer) override
+  {
+    MmalUserPool::put(detach_data_buffer(buffer));
+  }
+
+  // This is effectively a realloc to the current size and will
+  // attach a buffer if none was attached before
+  // Useful when recycling a buffer directly back into a port
+  MMAL_BUFFER_HEADER_T * put_get(MMAL_BUFFER_HEADER_T * const buffer) override
+  {
+    if (buffer->alloc_size == size_)
+      return buffer;
+
+    return attach_data_buffer(detach_data_buffer(buffer));
+  }
+
+  int disable() override
+  {
+    // Avoid keeping an otherwise unused trampoline alive longer than needed
+    trampoline_ = nullptr;
+    return MmalUserPool::disable();
+  }
+
+  int port_resized(const uint32_t num, const uint32_t size) override
+  {
+    // Remember for future allocation and that is all we want to do
+    size_ = size;
+    return 0;
+  }
+
+  // As this has no locking this should only be called when disabled
+  // (in most cases this means that the port we are servicing is disabled)
+  void set_trampoline(const scoped_refptr<MmalTrampoline>& trampoline) override
+  {
+    trampoline_ = trampoline;
+  }
+};
+
+//=============================================================================
+//
+// Wrapper for an mmal port
+
+class MmalPort
+{
+  // Actually connection should be a subclass?
+  friend class MmalConnection;
+
+protected:
+public:
+  MMAL_PORT_T * port_;
+  bool killing_;
+
+  virtual void event_cb(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    LOG(ERROR) << "### Unexpected ES data";
+    mmal_buffer_header_release(buffer);
+  }
+
+  virtual void cmd_cb(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    if (buffer->cmd == MMAL_EVENT_ERROR) {
+        LOG(WARNING) << "### Mmal reports error " << *(uint32_t *)buffer->data;
+    } else if (buffer->cmd == MMAL_EVENT_FORMAT_CHANGED) {
+      mmal_log_dump_port(port_);
+      const MMAL_EVENT_FORMAT_CHANGED_T *const fc = mmal_event_format_changed_get(buffer);
+      LOG(INFO) << "Mmal format changed: size_min:" << fc->buffer_size_min <<
+        ", num_min:" << fc->buffer_num_min <<
+          ", size_rec:" << fc->buffer_size_recommended <<
+          ", num_rec:" << fc->buffer_num_recommended;
+      if (fc->format != NULL) {
+        mmal_log_dump_format(fc->format);
+      }
+    } else {
+        char s[20];
+        LOG(WARNING) << "### Mmal unexpected command: " << mmal_4cc_to_string(s, sizeof(s), buffer->cmd);
+    }
+
+    // Commands are allocated from a different pool to ES data
+    // return to sender...
+    mmal_buffer_header_release(buffer);
+  }
+
+private:
+  void callback_common(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    if (buffer->cmd != 0) {
+      // Cmd buffers are not allocated from the main pool
+      cmd_cb(buffer);
+    }
+    else
+    {
+      if (killing_) {
+        // If flushing always release the buffer
+        mmal_buffer_header_release(buffer);
+      }
+      else {
+        event_cb(buffer);
+      }
+    }
+  }
+
+  static void callback(MMAL_PORT_T *port, MMAL_BUFFER_HEADER_T *buffer)
+  {
+    MmalPort *p = static_cast<MmalPort*>((void*)port->userdata);
+
+    if (p == NULL) {
+      LOG(ERROR) << __func__ << "### Port NULL";
+    }
+    else
+    {
+      p->callback_common(buffer);
+    }
+  }
+
+public:
+  virtual int enable()
+  {
+    MMAL_STATUS_T err = MMAL_SUCCESS;
+
+    if (killing_) {
+      LOG(ERROR) << "### port enable when killed";
+      return -1;
+    }
+
+    if ((err = mmal_port_enable(port_, callback)) != MMAL_SUCCESS)
+      LOG(ERROR) << "### mmal_port_enable failed: err=" << err;
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  virtual int disable()
+  {
+    MMAL_STATUS_T err = MMAL_SUCCESS;
+
+    if (port_ != NULL && port_->is_enabled) {
+      err = mmal_port_disable(port_);
+    }
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  virtual int commit()
+  {
+    MMAL_STATUS_T err = MMAL_SUCCESS;
+
+    if ((err = mmal_port_format_commit(port_)) != MMAL_SUCCESS)
+    {
+      LOG(ERROR) << "### mmal_port_format_commit failed: err=" << err;
+      mmal_log_dump_port(port_);
+    }
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  uint32_t buffer_size() const
+  {
+    return port_->buffer_size;
+  }
+
+  uint32_t buffer_num() const
+  {
+    return port_->buffer_num;
+  }
+
+  // This set of fns are overridden by MmalConnectedPort
+  // to provide max of connected ports
+  virtual uint32_t buffer_size_recommended() const
+  {
+    return port_->buffer_size_recommended;
+  }
+
+  virtual uint32_t buffer_size_min() const
+  {
+    return port_->buffer_size_recommended;
+  }
+
+  virtual uint32_t buffer_num_recommended() const
+  {
+    return port_->buffer_num_recommended;
+  }
+
+  virtual uint32_t buffer_num_min() const
+  {
+    return port_->buffer_num_min;
+  }
+
+  virtual int set_buffers(const uint32_t size, const uint32_t num)
+  {
+    port_->buffer_num = num;
+    port_->buffer_size = size;
+    return 0;
+  }
+
+  int set_buffers_recommended()
+  {
+    return set_buffers(buffer_size_recommended(), buffer_num_recommended());
+  }
+
+  int set_parameter(const uint32_t param, const uint32_t val) const
+  {
+    MMAL_STATUS_T err = MMAL_SUCCESS;
+    if ((err = mmal_port_parameter_set_uint32(port_, param, val)) != MMAL_SUCCESS)
+      LOG(ERROR) << "### mmal_port_parameter_set_uint32 failed: err=" << err;
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  inline int set_parameter(const uint32_t param, const int val) const
+  {
+    return set_parameter(param, (uint32_t)(val));
+  }
+
+  int set_parameter(const uint32_t param, const bool val) const
+  {
+    MMAL_STATUS_T err = MMAL_SUCCESS;
+    if ((err = mmal_port_parameter_set_boolean(port_, param, val ? MMAL_TRUE : MMAL_FALSE)) != MMAL_SUCCESS)
+      LOG(ERROR) << "### mmal_port_parameter_set_boolean failed: err=" << err;
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  int get_parameter(MMAL_PARAMETER_HEADER_T * const param) const
+  {
+    MMAL_STATUS_T err = MMAL_SUCCESS;
+    if ((err = mmal_port_parameter_get(port_, param)) != MMAL_SUCCESS)
+      LOG(ERROR) << "### mmal_port_parameter_get failed: err=" << err;
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  // class for storing the supported encodings parameter info
+  class SupportedEncodings
+  {
+    static const int max_encodings_ = 64;
+    struct {
+       MMAL_PARAMETER_HEADER_T header_;
+       MMAL_FOURCC_T encodings_[max_encodings_];
+    } supported_;
+    int n_;
+
+  public:
+    typedef const MMAL_FOURCC_T * iterator;
+
+    SupportedEncodings(const MmalPort& port) :
+      supported_({{MMAL_PARAMETER_SUPPORTED_ENCODINGS, sizeof(supported_)}, {0}}),
+      n_(-1)
+    {
+      if (port.get_parameter(&supported_.header_) == 0)
+      {
+        n_ = (supported_.header_.size - sizeof(supported_.header_)) /
+          sizeof(supported_.encodings_[0]);
+      }
+    }
+
+    virtual ~SupportedEncodings()
+    {
+    }
+
+    // Default copy is OK
+
+    iterator begin() const
+    {
+      return supported_.encodings_;
+    }
+
+    iterator end() const
+    {
+      return supported_.encodings_ + n_;
+    }
+
+    bool is_supported(const MMAL_FOURCC_T x) const
+    {
+      // If we end up doing this a lot for any reason then use a better lookup
+      for (auto &enc : *this) {
+        if (x == enc) {
+          return true;
+        }
+      }
+      return false;
+    }
+
+    std::string ToString() const
+    {
+      std::ostringstream s;
+      for (int i = 0; i < n_; ++i) {
+        char buf[8];
+        if (i != 0)
+          s << ",";
+        s << mmal_4cc_to_string(buf, sizeof(buf), supported_.encodings_[i]);
+      }
+      return s.str();
+    }
+  };
+
+  SupportedEncodings get_parameter_supported_encodings() const
+  {
+    return SupportedEncodings(*this);
+  }
+
+  static MMAL_FOURCC_T color_space_to_mmal(const ColorSpace color_space)
+  {
+    switch (color_space) {
+      case ColorSpace::COLOR_SPACE_JPEG:
+        return MMAL_COLOR_SPACE_JPEG_JFIF;
+      case ColorSpace::COLOR_SPACE_HD_REC709:
+        return MMAL_COLOR_SPACE_ITUR_BT709;
+      case ColorSpace::COLOR_SPACE_SD_REC601:
+        return MMAL_COLOR_SPACE_ITUR_BT601;
+      case ColorSpace::COLOR_SPACE_UNSPECIFIED:
+        return MMAL_COLOR_SPACE_UNKNOWN;
+    }
+    return MMAL_COLOR_SPACE_UNKNOWN;
+  }
+
+  int set_video_encoding(
+    const MMAL_FOURCC_T encoding,
+    const MMAL_FOURCC_T encoding_variant = MMAL_ENCODING_VARIANT_DEFAULT,
+    const uint32_t flags = 0)
+  {
+    MMAL_ES_FORMAT_T *const format = port_->format;
+
+    format->type = MMAL_ES_TYPE_VIDEO;
+    format->encoding = encoding;
+    format->encoding_variant = encoding_variant;
+    format->flags = 0;
+    format->bitrate = 0;
+    return 0;
+  }
+
+  // Fill in all of a MMAL_VIDEO_FORMAT_T
+  int set_video_format(
+      const gfx::Size& size,
+      const gfx::Rect& crop,
+      const gfx::Size& par = gfx::Size(),
+      const ColorSpace color_space = ColorSpace::COLOR_SPACE_UNSPECIFIED) const
+  {
+    MMAL_ES_FORMAT_T *const format = port_->format;
+    MMAL_VIDEO_FORMAT_T *const video = &format->es->video;
+    const bool isyuv = format->encoding == MMAL_ENCODING_I420;
+
+    const uint32_t w = size.width();
+    const uint32_t h = size.height();
+
+    video->width = VCOS_ALIGN_UP(w, isyuv ? 32 : 16);
+    video->height = VCOS_ALIGN_UP(h, 16);
+    video->crop.x = crop.x();
+    video->crop.y = crop.y();
+    video->crop.width = crop.width();
+    video->crop.height = crop.height();
+    video->frame_rate.num = 30000;  // Not in config - make something valid up
+    video->frame_rate.den = 1001;
+    video->par.num = par.width();
+    video->par.den = par.height();
+    video->color_space = color_space_to_mmal(color_space);
+    return 0;
+  }
+
+  // Disable once we forget about it
+  virtual ~MmalPort()
+  {
+    disable();
+  }
+
+  MmalPort() :
+    port_(NULL),
+    killing_(false)
+  {
+  }
+
+  virtual void set_port(MMAL_PORT_T * const port)
+  {
+    if (port_ != NULL) {
+      LOG(ERROR) << "### Port not null";
+      return;
+    }
+
+    port->userdata = (struct MMAL_PORT_USERDATA_T *)(void *)this;
+    port_ = port;
+  }
+
+  // Submit a buffer - on failure (or kill) buffer is released
+  int submit(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    MMAL_STATUS_T err;
+
+    if (killing_ || !port_->is_enabled) {
+      mmal_buffer_header_release(buffer);
+      return 0;
+    }
+
+    if ((err = mmal_port_send_buffer(port_, buffer)) != MMAL_SUCCESS)
+    {
+      // Release buffer on error
+      mmal_buffer_header_release(buffer);
+      LOG(ERROR) << "#### mmal_send_buffer (" << buffer << ") failed: err=" << err;
+    }
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  void kill()
+  {
+    killing_ = true;
+    disable();
+  }
+
+  void dump_video_format()
+  {
+    const MMAL_ES_FORMAT_T * const format = port_->format;
+    const MMAL_VIDEO_FORMAT_T *const video = &format->es->video;
+    char buf1[10], buf2[10];
+
+    LOG(ERROR) << port_->name << ": Encoding:" << mmal_4cc_to_string(buf1, sizeof(buf1), format->encoding) <<
+    ":" << mmal_4cc_to_string(buf2, sizeof(buf2), format->encoding_variant) <<
+        ", " << video->width << "x" << video->height <<
+        ", crop: " << video->crop.x << "," << video->crop.y <<
+        " " << video->crop.width << "x" << video->crop.height;
+  }
+
+};
+
+// ---------------------------------------------------------------------------
+
+class MmalConnection : public base::RefCountedThreadSafe<MmalConnection>
+{
+  friend MmalConnectedPort;
+
+  bool enabled_;
+  MMAL_CONNECTION_T * connection_;
+  MmalConnectedPort * src_;
+  MmalConnectedPort * dest_;
+
+  friend base::RefCountedThreadSafe<MmalConnection>;
+  virtual ~MmalConnection()
+  {
+    if (connection_ != NULL) {
+      mmal_connection_destroy(connection_);
+    }
+  }
+
+  MmalConnection() :
+    enabled_(false),
+    connection_(NULL),
+    src_(NULL),
+    dest_(NULL)
+  {
+  }
+
+  void disconnect();
+  int connect(MmalConnectedPort * const src, MmalConnectedPort * const dest);
+
+  int enable()
+  {
+    MMAL_STATUS_T err;
+
+    if (enabled_) {
+      // Bad stuff (tm) seems to happen if we multiply en/disable connections
+      return 0;
+    }
+
+    if ((err = mmal_connection_enable(connection_)) != MMAL_SUCCESS) {
+      LOG(ERROR) << "### mmal_connection_enable failed: err=" << err;
+      return -1;
+    }
+
+    enabled_ = true;
+    return 0;
+  }
+
+  int disable()
+  {
+    MMAL_STATUS_T err;
+
+    if (!enabled_) {
+      // Bad stuff (tm) seems to happen if we multiply en/disable connections
+      return 0;
+    }
+
+    // Mark as disabled even if we fail as in this case I have no idea how
+    // to recover and retry is very unlikely to help
+    enabled_ = false;
+
+    if ((err = mmal_connection_disable(connection_)) != MMAL_SUCCESS) {
+      LOG(ERROR) << "### mmal_connection_disable failed: err=" << err;
+      return -1;
+    }
+
+    return 0;
+  }
+
+  uint32_t buffer_size_recommended() const;
+  uint32_t buffer_num_recommended() const;
+  uint32_t buffer_size_min() const;
+  uint32_t buffer_num_min() const;
+  int set_buffers(uint32_t s, uint32_t n);
+};
+
+// ----------------------------------------------------------------------------
+//
+// Port that we are expecting to be attached to another port by an MmalConnection
+
+class MmalConnectedPort : public MmalPort
+{
+  scoped_refptr<MmalConnection> connection_;
+
+public:
+  void set_connection(MmalConnection * connection)
+  {
+    connection_ = connection;
+  }
+
+  int disconnect()
+  {
+    if (connection_ != NULL) {
+      connection_->disconnect();
+    }
+    return 0;
+  }
+
+  int enable() override
+  {
+    return connection_->enable();
+  }
+
+  int disable() override
+  {
+    return connection_ == NULL ? 0 : connection_->disable();
+  }
+
+  int connect_to_src(MmalConnectedPort * const src)
+  {
+    scoped_refptr<MmalConnection> connection(new MmalConnection());
+    return connection->connect(src, this);
+  }
+
+  uint32_t buffer_size_recommended() const override
+  {
+    return connection_->buffer_size_recommended();
+  }
+
+  uint32_t buffer_num_recommended() const override
+  {
+    return connection_->buffer_num_recommended();
+  }
+
+  uint32_t buffer_size_min() const override
+  {
+    return connection_->buffer_size_min();
+  }
+
+  uint32_t buffer_num_min() const override
+  {
+    return connection_->buffer_num_min();
+  }
+
+  int set_buffers(const uint32_t s, const uint32_t n) override
+  {
+    return connection_->set_buffers(s, n);
+  }
+
+  ~MmalConnectedPort() override
+  {
+    disconnect();
+  }
+};
+
+// ----------------------------------------------------------------------------
+
+class MmalPortAndPool : public MmalPort
+{
+  typedef scoped_refptr<MmalPortAndPool> AutoRef;
+
+  MmalComponent * const component_;
+
+  std::unique_ptr<MmalPool> pool_;
+
+public:
+  // These allow us to use scoped_refptr on this object
+  // They trampoline to the enclosing component
+  void AddRef() const;
+  void Release();
+
+  const MmalTaskRunner& task_runner() const;
+
+protected:
+  virtual void buffer_event_cb(MMAL_BUFFER_HEADER_T * const buffer) = 0;
+
+private:
+  static bool pool_cb(MmalPortAndPool * mpp, MMAL_BUFFER_HEADER_T *buffer)
+  {
+    // As the release can cause us to commit suicide we must put the buffer
+    // back by hand before calling Release as if we try to do it afterwards
+    // the Q may have vanished and we would crash.
+    mpp->pool_->put(buffer);
+    mpp->Release();
+    return false;  // We did the put back ourselves
+  }
+
+  // Given that we now have ref counts that can hit zero when all buffers are
+  // returned to the pool ensure that we can't commit untimely suicide by
+  // holding a ref on ourselves until the callback is over.
+  // This could probably be ensured by careful coding of the overriding
+  // callbacks but this removes the possibility of unexpected surprises
+  void event_cb(MMAL_BUFFER_HEADER_T * const buffer) final
+  {
+    AutoRef(this)->buffer_event_cb(buffer);
+  }
+
+protected:
+  int set_pool(MmalPool *const pool, const uint32_t num)
+  {
+    pool_ = std::unique_ptr<MmalPool>(pool);
+    if (pool_->create(num, port_->buffer_size) != 0) {
+      return -1;
+    }
+    pool_->set_buffer_release_cb(base::Bind(MmalPortAndPool::pool_cb, this));
+    return 0;
+  }
+
+  int set_pool(MmalPool *const pool)
+  {
+    return set_pool(pool, port_->buffer_num);
+  }
+
+public:
+  template<typename T>
+  base::Callback<T> bind_to_task_runner(const base::Callback<T>& cb)
+  {
+    return base::Bind(&internal::TrampolineHelper<T>::Run,
+                      MmalTaskRunner(task_runner()), cb);
+  }
+  void task_run(const base::Closure& cb)
+  {
+    task_runner()->PostTask(FROM_HERE, cb);
+  }
+
+  MmalPortAndPool(MmalComponent * const component) :
+    component_(component)
+  {
+//    LOG(ERROR) << __func__;
+  }
+
+  ~MmalPortAndPool() override
+  {
+    disable();
+  }
+
+  int create_port_pool()
+  {
+    return set_pool(new MmalPortPool(port_));
+  }
+
+  int create_user_pool(const uint32_t buffer_num)
+  {
+    return set_pool(new MmalUserPool(), buffer_num);
+  }
+
+  MMAL_BUFFER_HEADER_T * pool_get(const bool wait = false)
+  {
+    if (pool_ == NULL) {
+      LOG(ERROR) << "### Pool not set up\n";
+      return NULL;
+    }
+
+    MMAL_BUFFER_HEADER_T * const header =  wait ?
+      pool_->get_timeout(5000) : pool_->get();
+
+    if (header != NULL) {
+      AddRef();
+    }
+
+    return header;
+  }
+
+  int pool_size() const
+  {
+    return pool_->size();
+  }
+
+  int queue_length() const
+  {
+    return pool_->length();
+  }
+
+  // Stuff all the pool entries into the port
+  int stuff()
+  {
+    MMAL_BUFFER_HEADER_T * buffer;
+    while ((buffer = pool_get()) != NULL) {
+      // When flushing/disabling we may have left stuff with lengths in the pool
+      mmal_buffer_header_reset(buffer);
+      if (submit(buffer) != 0)
+        return -1;
+    }
+    return 0;
+  }
+
+  int stuff(int stuff_count, const bool wait = false)
+  {
+    while (--stuff_count >= 0)
+    {
+      MMAL_BUFFER_HEADER_T * buffer;
+      if ((buffer = pool_get(wait)) == NULL)
+      {
+        LOG(ERROR) << "### Unexpected pool_get_failure";
+        return -1;
+      }
+
+      // When flushing/disabling we may have left stuff with lengths in the pool
+      mmal_buffer_header_reset(buffer);
+      if (submit(buffer) != 0)
+        return -1;
+    }
+    return 0;
+  }
+
+  void recycle(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    submit(pool_->put_get(buffer));
+  }
+
+  int enable() override
+  {
+    if (pool_ == nullptr)
+    {
+      LOG(ERROR) << "MmalPoolAndPort::enable: pool NULL";
+      return -1;
+    }
+
+    if (pool_->port_resized(port_->buffer_num, port_->buffer_size) != 0 ||
+        pool_->enable() != 0)
+      return -1;
+
+    return MmalPort::enable();
+  }
+
+  int disable() override
+  {
+    const int rv = MmalPort::disable();
+    return (pool_ != nullptr && pool_->disable() != 0) ? -1 : rv;
+  }
+
+  int commit() override
+  {
+    const int rv = MmalPort::commit();
+    // ** Notify pool that size may have changed
+    return rv;
+  }
+
+  void set_trampoline(scoped_refptr<MmalTrampoline>& trampoline)
+  {
+    pool_->set_trampoline(trampoline);
+  }
+};
+
+// ----------------------------------------------------------------------------
+
+class MmalVideoESPort : public MmalPortAndPool
+{
+  VideoDecoder::DecodeCB decode_cb_;
+  scoped_refptr<DecoderBuffer> submit_buffer_;
+  uint32_t submit_offset_;
+  bool low_delay_;
+
+public:
+  MmalVideoESPort(MmalComponent * const component) :
+    MmalPortAndPool(component),
+    low_delay_(false)
+  {
+  }
+  ~MmalVideoESPort() override
+  {
+  }
+
+  void set_port(MMAL_PORT_T * const port) override
+  {
+    MmalPort::set_port(port);
+  }
+
+  // Only checks the codec type if we had to set the encoding bitmask
+  bool set_supported_video_codecs() const
+  {
+    if (supported_video_codecs != 0)
+      return false;
+
+    const MmalPort::SupportedEncodings encodings(get_parameter_supported_encodings());
+
+    // We always claim to support H264
+    unsigned int bits = 1 << VideoCodec::kCodecH264;
+
+    for (auto& enc : encodings) {
+      bits |= 1 << fourcc_to_video_codec(enc);
+    }
+
+    // Mask out unknown
+    supported_video_codecs = bits & ~(1 << VideoCodec::kUnknownVideoCodec);
+
+    LOG(INFO) << "Supported video encodings: " << encodings.ToString() << ", bits=" << std::hex << bits;
+    return true;
+  }
+
+  int config(const VideoDecoderConfig& config, const bool low_delay)
+  {
+    const VideoCodec codec = config.codec();
+
+    if (set_supported_video_codecs())
+    {
+      // We set the supported mask - check if we expect this to work...
+      // If we didn't set it then assume we have already checked
+      if ((supported_video_codecs & (1 << codec)) == 0) {
+        // return silently
+        return -1;
+      }
+    }
+
+    low_delay_ = low_delay;
+
+    const MMAL_FOURCC_T encoding = video_codec_to_fourcc(codec);
+
+    if (encoding == MMAL_ENCODING_UNKNOWN) {
+      LOG(ERROR) << "### Unexpected video codec:" << config.codec();
+      return -1;
+    }
+
+    set_video_encoding(encoding, MMAL_ENCODING_VARIANT_DEFAULT, MMAL_ES_FORMAT_FLAG_FRAMED);
+
+    set_video_format(config.coded_size(),
+        config.visible_rect(),
+        par_from_sizes(config.visible_rect().size(), config.natural_size()),
+        config.color_space());
+
+    return 0;
+  }
+
+private:
+  int submit_data(const uint8_t * const data, const uint32_t len,
+      const base::TimeDelta& pts,
+      const bool is_start, const bool not_pkt)
+  {
+    uint32_t bsent = 0;
+
+    MMAL_BUFFER_HEADER_T * const buffer = pool_get(not_pkt);
+    if (buffer == NULL) {
+      return 0;
+    }
+
+//    LOG(ERROR) << "-- submit len=" << len << ", pts=" << pts;
+
+    // resets length, offset, flags, pts, dts
+    mmal_buffer_header_reset(buffer);
+    buffer->cmd = 0;
+
+    if (data == NULL)
+    {
+        buffer->flags |= MMAL_BUFFER_HEADER_FLAG_EOS;
+        // As this is zero length avoid poking the data
+        bsent = 1; // 0 means did nothing so pick another number
+    }
+    else
+    {
+        if (is_start)
+        {
+            buffer->pts = (pts == kNoTimestamp) ? MMAL_TIME_UNKNOWN : pts.InMicroseconds();
+//            buffer->dts = avpkt->dts == AV_NOPTS_VALUE ? MMAL_TIME_UNKNOWN : avpkt->dts;
+            buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_START | MMAL_BUFFER_HEADER_FLAG_USER0;
+        }
+
+        bsent = buffer->length = std::min(len, buffer->alloc_size);
+
+        if (mmal_buffer_header_mem_lock(buffer) != MMAL_SUCCESS)
+        {
+            LOG(ERROR) << "#### Cannot lock buffer";
+            buffer_release(buffer);
+            return -1;
+        }
+
+        memcpy(buffer->data, data, buffer->length);
+
+        mmal_buffer_header_mem_unlock(buffer);
+
+        if (len == bsent)
+            buffer->flags |= MMAL_BUFFER_HEADER_FLAG_FRAME_END;
+
+        if (not_pkt)
+            buffer->flags |= MMAL_BUFFER_HEADER_FLAG_CONFIG;
+    }
+
+//    LOG(ERROR) << "Submit: flags=" << std::hex << buffer->flags << std::dec << ", len=" << buffer->length << ", pts=" << buffer->pts;
+
+    if (MmalPortAndPool::submit(buffer) != 0)
+    {
+      return -1;
+    }
+
+    return (int)bsent;
+  }
+
+  void submit_done(const DecodeStatus status)
+  {
+    VideoDecoder::DecodeCB cb(decode_cb_);
+
+    decode_cb_.Reset();
+    submit_buffer_ = NULL;
+
+//    LOG(ERROR) << ">>> decode_cb.Run(" << status << ")";
+    cb.Run(status);
+  }
+
+  void submit_poll()
+  {
+    if (submit_buffer_ == NULL) {
+//      LOG(ERROR) << "ES CB null";
+      return;
+    }
+
+    if (submit_buffer_->end_of_stream()) {
+      LOG(INFO) << "<<< EOS";
+
+      int bsent = submit_data(NULL, 0, kNoTimestamp, true, false);
+
+      if (bsent != 0)
+      {
+        decode_cb_.Reset();
+        submit_buffer_ = NULL;
+
+        // The callback on EOS takes place much later & from the resizer output
+      }
+    }
+    else
+    {
+//      LOG(ERROR) << "submit";
+      const uint32_t size = submit_buffer_->data_size();
+
+      while (submit_offset_ < size) {
+        const int bsent = submit_data(submit_buffer_->data() + submit_offset_,
+            size - submit_offset_,
+            submit_buffer_->timestamp(),
+            submit_offset_ == 0, false);
+
+//        LOG(ERROR) << "es submit bsent=" << bsent << ", pql=" << queue_length();
+
+        if (bsent <= 0)
+        {
+          if (bsent != 0)
+            submit_done(DecodeStatus::DECODE_ERROR);
+          return;
+        }
+
+        submit_offset_ += bsent;
+      }
+
+      // If we've got here then we've got a finished submit_buffer_
+      // wait for pool empty before signalling "next"
+      if (!low_delay_ || queue_length() == pool_size()) {
+//        LOG(ERROR) << "submit done";
+        submit_done(DecodeStatus::OK);
+      }
+    }
+  }
+
+  void buffer_event_cb(MMAL_BUFFER_HEADER_T * const buffer) override
+  {
+    buffer_release(buffer);
+
+    task_run(base::Bind(&MmalVideoESPort::submit_poll, this));
+  }
+
+
+public:
+  int submit(const scoped_refptr<DecoderBuffer>& buffer, const VideoDecoder::DecodeCB& decode_cb)
+  {
+    if (submit_buffer_ != NULL) {
+      LOG(ERROR) << "### Submit already active";
+      return -1;
+    }
+
+    if (decode_cb.is_null()) {
+      // If null CB then assume we need sync output
+      return submit_data(buffer->data(), buffer->data_size(), buffer->timestamp(), true, true) < 0 ? -1 : 0;
+    }
+    else
+    {
+      // * If we aren't in the same thread as task_runner_ at this point
+      //   then this lot is unsafe...
+
+      submit_buffer_ = buffer;
+      submit_offset_ = 0;
+      decode_cb_ = decode_cb;
+
+      submit_poll();
+    }
+    return 0;
+  }
+
+  int disable() override
+  {
+    // Get and kill any pending submit_callback
+    if (submit_buffer_ != NULL) {
+      submit_done(DecodeStatus::ABORTED);
+    }
+    return MmalPortAndPool::disable();
+  }
+};
+
+
+// ----------------------------------------------------------------------------
+//
+// * It might be nice to split this into ZC & Copy versions but as it stands
+//   the port is declared directly in the component which makes that tricky
+
+class MmalVideoARGBPort : public MmalPortAndPool
+{
+  FrameCopyMode copy_mode_;
+  gfx::Size req_size_;
+  VideoDecoder::OutputCB output_cb_;
+  VideoDecoder::DecodeCB eos_cb_;
+  base::Lock resize_lock_;
+  bool eos_sent_;
+  bool red_pixel_;
+  scoped_refptr<MmalTrampoline> frame_trampoline_;
+  scoped_refptr<MmalCopiedVideoFrame> sliced_frame_;
+  int sliced_y_;
+  base::subtle::Atomic32 zc_buffers_in_flight_;
+  base::TimeDelta last_pts_;
+  bool debug_bench_;
+  bool resize_disabled_;
+
+  class FpS
+  {
+    // Average over this number of frames for running average
+    static const size_t avg_size_ = 128;
+
+    static uint64_t utime()
+    {
+      struct timespec ts;
+      clock_gettime(CLOCK_MONOTONIC, &ts);
+      return (uint64_t)ts.tv_sec * 1000000 + ts.tv_nsec / 1000;
+    }
+
+    uint64_t start_time_;
+    uint64_t period_time_;
+    unsigned int frame_count_;
+
+    uint64_t time_stash_[avg_size_];
+    size_t stash_n_;
+
+    void do_start(const uint64_t now)
+    {
+      start_time_ = now;
+      period_time_ = now;
+      stash_n_ = 0;
+    }
+
+  public:
+    FpS() :
+      start_time_(0),
+      period_time_(0),
+      frame_count_(0),
+      time_stash_{0}
+    {
+    }
+
+    void start()
+    {
+      frame_count_ = 0;
+    }
+
+    void inc_frames()
+    {
+      const uint64_t now = utime();
+      if (frame_count_++ == 0)
+        do_start(now);
+      time_stash_[stash_n_] = now;
+      if (++stash_n_ >= avg_size_)
+        stash_n_ = 0;
+    }
+
+    bool period_expired(const uint64_t duration_us)
+    {
+      const uint64_t now = utime();
+      if (period_time_ + duration_us <= now) {
+        period_time_ += duration_us;
+        return true;
+      }
+      return false;
+    }
+
+    std::string ToString()
+    {
+      if (start_time_ == 0) {
+        return std::string("<uninit>");
+      }
+      const uint64_t now = utime();
+      if (start_time_ == now) {
+        return std::string("<inf>");
+      }
+
+      const uint64_t mFpS = ((uint64_t)frame_count_ * 1000000000) / (now - start_time_);
+      const uint64_t mFpS_avg = frame_count_ < avg_size_ ? 0 :
+        ((uint64_t)avg_size_ * 1000000000) / (now - time_stash_[stash_n_]);
+      std::ostringstream s;
+      s << frame_count_  << " @ "
+        << mFpS / 1000 << "." << std::setfill('0') << std::setw(3) << mFpS % 1000 << std::setw(0)
+        << ", avg: " << mFpS_avg / 1000 << "." << std::setfill('0') << std::setw(3) << mFpS_avg % 1000;
+
+      return s.str();
+    }
+  };
+
+  std::unique_ptr<FpS> fps_;
+
+  void kill_trampoline()
+  {
+    if (frame_trampoline_)
+    {
+      frame_trampoline_->kill();
+      frame_trampoline_ = NULL;
+    }
+  }
+
+  // Mostly required to discard the return value
+  void posted_submit(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+//    LOG(ERROR) << "--- " << __func__;
+    submit(buffer);
+  }
+
+  void recycle_buffer(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+    mmal_buffer_header_reset(buffer);
+
+    if (resize_lock_.Try()) {
+      recycle(buffer);
+      resize_lock_.Release();
+    }
+    else
+    {
+      // Move the recycle onto the main thread which should be the one running
+      // the resize so no further locking required
+      //
+      // ??? Interaction with max_in_flight_ ???
+      task_run(base::Bind(&MmalVideoARGBPort::recycle, this, buffer));
+    }
+  }
+
+  // Unlocks buffer & recycles it
+  void zc_frame_destruction_cb(MMAL_BUFFER_HEADER_T * const buffer)
+  {
+//    LOG(ERROR) << __func__;
+    const base::subtle::Atomic32 n = base::subtle::NoBarrier_AtomicIncrement(&zc_buffers_in_flight_, -1);
+
+    if (n < pool_size() / 2) {
+      LOG(INFO) << "--- in flight low:" << n;
+    }
+
+    mmal_buffer_header_mem_unlock(buffer);
+    recycle_buffer(buffer);
+  }
+
+  // Called from trampoline on free_frame
+  // so may come from a random thread
+  void copied_frame_destruction_cb(const int buffer_count)
+  {
+    // stuff may have to wait for a buffer as the recycling
+    // cannot be protected by the trampoline lock with the current
+    // code so we have a race
+    if (stuff(buffer_count, true) == -1)
+      LOG(FATAL) << "No buffers to back up recycle request";
+  }
+
+  void resize_posted(const gfx::Size req_size)
+  {
+    if (req_size.width() <= 0 || req_size.height() <= 0 || req_size == size())
+      return;
+
+    LOG(INFO) << __func__ << "(" << req_size.ToString() << ")";
+
+    base::AutoLock lock(resize_lock_);
+    disable();
+    set_size(req_size);
+    commit();
+    if (copy_mode_ == FrameCopyMode::FRAME) {
+      set_buffers(buffer_size_recommended(), buffer_num());
+    }
+    enable();
+
+//    LOG(INFO) << __func__ << " done";
+  }
+
+  void resize_cb(const gfx::Size& size)
+  {
+//    LOG(ERROR) << __func__ << "(" << size.ToString() << ")";
+
+    if (size == req_size_ || resize_disabled_) {
+      return;
+    }
+    req_size_ = size;
+
+    // Avoid running in the callback - run on our own thread
+    task_run(base::Bind(&MmalVideoARGBPort::resize_posted, this, size));
+  }
+
+public:
+  gfx::Size size() const
+  {
+    return gfx::Size(port_->format->es->video.crop.width, port_->format->es->video.crop.height);
+  }
+
+private:
+
+  void mov_frame_block(const scoped_refptr<MmalCopiedVideoFrame>& frame,
+      MMAL_BUFFER_HEADER_T * const buffer,
+      const size_t stride,
+      const size_t width,
+      const size_t start_y,
+      const int lines)
+  {
+    MMAL_STATUS_T err;
+
+    if ((err = mmal_buffer_header_mem_lock(buffer)) != MMAL_SUCCESS)
+    {
+      LOG(ERROR) << "### Unable to lock buffer; err=" << err;
+      return;
+    }
+
+    const uint8_t * s = buffer->data + buffer->type->video.offset[0];
+    const size_t d_stride = frame->stride(0);
+    uint8_t * d = frame->data(0) + start_y * d_stride;
+    const size_t line_size = width * 4;
+
+    for (int i = 0; i < lines; ++i, s += stride, d += d_stride)
+      memcpy(d, s, line_size);
+
+    // Unlock & recycles
+    mmal_buffer_header_mem_unlock(buffer);
+
+    // Count buffers used by this frame
+    frame->inc_buffer_count();
+
+    if (frame_trampoline_->recycle_buffer_in_flight(buffer)) {
+      recycle_buffer(buffer);
+    }
+  }
+
+  void emit_copied_frame(const scoped_refptr<VideoFrame>& frame)
+  {
+    if (debug_bench_) {
+      // In bench mode just drop the frame on the floor
+      return;
+    }
+    if (red_pixel_) {
+      // Mark our frames with happy red pixels
+      uint8_t * d = frame->data(0);
+      const size_t d_stride = frame->stride(0);
+
+      for (int i = 0; i != 8; ++i, d += d_stride) {
+          for (int j = 0; j != 8 * 4; j += 4) {
+              d[j+0] = 0;
+              d[j+1] = 0;
+              d[j+2] = 0xff;
+              d[j+3] = 0xff;
+          }
+      }
+    }
+
+    output_cb_.Run(frame);
+  }
+
+protected:
+  void buffer_event_cb(MMAL_BUFFER_HEADER_T * const buffer) override
+  {
+    // One might have hoped that buffer->type->video.pitch[0] held this info...
+    const int stride = mmal_encoding_width_to_stride(port_->format->encoding, port_->format->es->video.width);
+    const gfx::Size cur_size = size();
+
+//    const base::TimeDelta pts(kNoTimestamp);
+
+    const base::TimeDelta pts(buffer->pts == MMAL_TIME_UNKNOWN ?
+        kNoTimestamp :
+        base::TimeDelta::FromMicroseconds(buffer->pts));
+
+#if 0
+    if ((buffer->flags & MMAL_BUFFER_HEADER_FLAG_FRAME_END) != 0) {
+      LOG(ERROR) << "-- Got frame from resizer: copy_mode=" << copy_mode_ << ", len=" << buffer->length <<
+          ", size = " << port_->format->es->video.width << "x" << port_->format->es->video.height << ", req=" << cur_size.ToString() <<
+          ", stride=" << buffer->type->video.pitch[0] << "/" << stride << ", pts=" << buffer->pts <<
+          ", flags=" << std::hex << buffer->flags << std::dec << ", enabled=" << port_->is_enabled <<
+          ", pts_delta=" << (pts - last_pts_).InMicroseconds();
+        ;
+    }
+#endif
+
+    if ((buffer->flags & MMAL_BUFFER_HEADER_FLAG_EOS) != 0) {
+      LOG(INFO) << ">>> EOS";
+      if (fps_ != nullptr) {
+        LOG(ERROR) << "@@@@ EOS: fps=" << fps_->ToString();
+      }
+      // Finally call the decode CB
+      if (!eos_cb_.is_null()) {
+        eos_cb_.Run(DecodeStatus::OK);
+        eos_cb_.Reset();
+        eos_sent_ = true;
+      }
+      // Remember to recycle the buffer!
+      recycle_buffer(buffer);
+      return;
+    }
+
+    if (buffer->length == 0) {
+      // Empty flushed buffer
+      recycle_buffer(buffer);
+      return;
+    }
+
+    eos_sent_ = false;
+
+    switch (copy_mode_) {
+      case FrameCopyMode::unset:
+        LOG(ERROR) << "### copy mode unset";
+        recycle_buffer(buffer);
+        break;
+
+      case FrameCopyMode::ZERO:
+      {
+        if (debug_bench_) {
+          recycle_buffer(buffer);
+          break;
+        }
+
+        mmal_buffer_header_mem_lock(buffer);
+
+        scoped_refptr<VideoFrame> frame(new MmalZeroVideoFrame(cur_size,
+          buffer->data + buffer->type->video.offset[0],
+          stride,
+          base::Bind(&MmalVideoARGBPort::resize_cb, this),
+          base::Bind(&MmalVideoARGBPort::zc_frame_destruction_cb, this, buffer),
+          pts));
+
+        base::subtle::NoBarrier_AtomicIncrement(&zc_buffers_in_flight_, 1);
+
+        if (pts != kNoTimestamp)
+          last_pts_ = pts;
+
+        output_cb_.Run(frame);
+        break;
+      }
+
+      case FrameCopyMode::FRAME:
+      {
+        // * Arguably we should be creating ARGB buffers here rather than MMAL
+        //   but we have only carved a path through the rest of the video
+        //   render stack for MMAL
+
+#if OPT_FRAME_COPY_STASHED
+        // Firmware-side frame copy
+        scoped_refptr<VideoFrame> frame(new MmalStashedVideoFrame(
+          buffer,
+          frame_trampoline_,
+          cur_size,
+          stride,
+          pts));
+
+        if (frame_trampoline_->recycle_buffer_in_flight(buffer)) {
+          recycle_buffer(buffer);
+        }
+#else
+        // Arm-side frame copy
+        scoped_refptr<MmalCopiedVideoFrame> frame(new MmalCopiedVideoFrame(
+          frame_trampoline_,
+          cur_size,
+          pts));
+
+        mov_frame_block(frame, buffer, stride, cur_size.width(), 0, cur_size.height());
+#endif
+
+        emit_copied_frame(frame);
+
+        if (pts != kNoTimestamp)
+          last_pts_ = pts;
+
+        break;
+      }
+
+      case FrameCopyMode::SLICE:
+      {
+        // Remember end of frame flag as we kill the buffer before using it
+        const bool eof = (buffer->flags & MMAL_BUFFER_HEADER_FLAG_FRAME_END) != 0;
+
+        if (sliced_frame_ == NULL) {
+          sliced_y_ = 0;
+          // pts only correct at eof
+          sliced_frame_ = new MmalCopiedVideoFrame(frame_trampoline_, cur_size);
+        }
+
+        mov_frame_block(sliced_frame_, buffer, stride, cur_size.width(), sliced_y_,
+            std::min(MMAL_SLICE_HEIGHT, sliced_frame_->rows(0) - sliced_y_));
+
+        if ((sliced_y_ += MMAL_SLICE_HEIGHT) < sliced_frame_->rows(0))
+        {
+          // Partial - stop now
+          if (eof) {
+            // Partial frame - discard
+            sliced_frame_ = NULL;
+            LOG(WARNING) << "### frame underrun";
+          }
+          return;
+        }
+        if (!eof) {
+          // Overrun
+          LOG(WARNING) << "### frame overrun";
+        }
+        sliced_frame_->set_timestamp(pts);
+
+        if (pts != kNoTimestamp)
+          last_pts_ = pts;
+
+        // Make sure sliced_frame_ is NULL before we do output callbacks
+        // that might cause us to look at it
+        scoped_refptr<VideoFrame> frame(sliced_frame_.get());
+        sliced_frame_ = NULL;
+
+        emit_copied_frame(frame);
+        break;
+      }
+    }
+
+    if (fps_ != nullptr) {
+      fps_->inc_frames();
+      if (fps_->period_expired(1000000))
+      {
+        LOG(ERROR) << "--- fps = " << fps_->ToString();
+      }
+    }
+  }
+
+
+public:
+  MmalVideoARGBPort(MmalComponent * const component) :
+    MmalPortAndPool(component),
+    eos_sent_(false),
+    red_pixel_(false),
+    zc_buffers_in_flight_(0),
+    last_pts_(kNoTimestamp),
+    debug_bench_(false),
+    resize_disabled_(false)
+  {
+  }
+
+  ~MmalVideoARGBPort() override
+  {
+    kill_trampoline();
+  }
+
+  int create_frame_pool()
+  {
+    return set_pool(new MmalFramePool());
+  }
+
+  void set_port(MMAL_PORT_T * const port) override
+  {
+    MmalPort::set_port(port);
+
+    port_->format->type = MMAL_ES_TYPE_VIDEO;
+  }
+
+  void set_copy_mode(const FrameCopyMode copy_mode)
+  {
+    copy_mode_ = copy_mode;
+
+    if (copy_mode_ == FrameCopyMode::SLICE) {
+      port_->format->encoding = MMAL_ENCODING_BGRA_SLICE;
+      port_->format->encoding_variant = MMAL_ENCODING_BGRA_SLICE;
+    }
+    else
+    {
+      port_->format->encoding = MMAL_ENCODING_BGRA;
+      port_->format->encoding_variant = MMAL_ENCODING_BGRA;
+    }
+  }
+
+  int set_size(const gfx::Size& req_size)
+  {
+    set_video_format(req_size, gfx::Rect(req_size), gfx::Size(), ColorSpace::COLOR_SPACE_JPEG);
+    return 0;
+  }
+
+  void set_eos_cb(const VideoDecoder::DecodeCB& eos_cb)
+  {
+    eos_cb_ = eos_cb;
+  }
+
+  int set_debug_bench(const bool enable_bench, const bool enable_fps)
+  {
+    debug_bench_ = enable_bench;
+    fps_ = std::unique_ptr<FpS>(!enable_fps ? nullptr : new FpS());
+    return 0;
+  }
+
+  int set_resize_disabled(const bool disable)
+  {
+    resize_disabled_ = disable;
+    return 0;
+  }
+
+  void set_red_pixel(const bool red)
+  {
+    red_pixel_ = red;
+  }
+
+  bool eos_sent() const
+  {
+    return eos_sent_ && eos_cb_.is_null();
+  }
+
+public:
+  int enable() override
+  {
+    if (copy_mode_ != FrameCopyMode::ZERO)
+    {
+      kill_trampoline();  // Shouldn't be needed but good to make sure
+
+      const int buffers_per_frame = copy_mode_ != FrameCopyMode::SLICE ? 1 :
+          (port_->format->es->video.crop.height + MMAL_SLICE_HEIGHT - 1) / MMAL_SLICE_HEIGHT;
+
+      frame_trampoline_ = new MmalTrampoline(buffers_per_frame * MAX_COPY_FRAMES_IN_FLIGHT,
+          base::Bind(&MmalVideoARGBPort::resize_cb, this),
+          base::Bind(&MmalVideoARGBPort::copied_frame_destruction_cb, this));
+
+      set_trampoline(frame_trampoline_);
+    }
+
+    if (MmalPortAndPool::enable() != 0)
+      return  -1;
+
+    if (fps_ != nullptr) {
+      fps_->start();
+    }
+
+    return stuff();
+  }
+
+  int enable(const VideoDecoder::OutputCB& output_cb)
+  {
+    output_cb_ = output_cb;
+    return enable();
+  }
+
+  int disable() override
+  {
+    int rv = MmalPortAndPool::disable();
+
+    // Worry about class status vars after disable to avoid race conditions
+    kill_trampoline();
+
+    sliced_frame_ = NULL;  // Forget any partial frame info
+
+    if (!eos_cb_.is_null()) {
+      LOG(INFO) << ">>> EOS (abort)";
+      eos_cb_.Run(DecodeStatus::ABORTED);
+      eos_cb_.Reset();
+    }
+    eos_sent_ = false;
+
+//    LOG(ERROR) << "@@@@ disable: fps=" << fps.ToString();
+
+    return rv;
+  }
+
+  bool is_stalling() const
+  {
+    // If trampoline is null for some reason e.g. decoder reset
+    // then assume that in_flight is 0 as it will be when we regenerate the
+    // trampoline
+    return copy_mode_ == FrameCopyMode::ZERO ?
+      base::subtle::NoBarrier_Load(&zc_buffers_in_flight_) >= pool_size() :
+      frame_trampoline_ != nullptr && frame_trampoline_->is_stalling();
+  }
+};
+
+// ---------------------------------------------------------------------------
+
+class MmalComponent : public base::RefCountedThreadSafe<MmalComponent>
+{
+protected:
+  MMAL_COMPONENT_T * component_;
+private:
+  MmalTaskRunner task_runner_;
+
+protected:
+  int create_by_name(const char * const name)
+  {
+    MMAL_STATUS_T err;
+    if ((err = mmal_component_create(name, &component_)) != MMAL_SUCCESS)
+      LOG(ERROR) << "### mmal_component_create(" << name << ") failed: err=" << err;
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  friend class base::RefCountedThreadSafe<MmalComponent>;
+  virtual ~MmalComponent()
+  {
+    if (component_ != NULL) {
+      mmal_component_release(component_);
+    }
+  }
+
+  virtual MmalConnectedPort * input_port() = 0;
+  virtual MmalConnectedPort * output_port() = 0;
+
+public:
+  MmalComponent() :
+    component_(NULL),
+    task_runner_(base::ThreadTaskRunnerHandle::Get())
+  {
+  }
+
+  const MmalTaskRunner& task_runner() const
+  {
+    return task_runner_;
+  }
+
+  int connect_to_output(scoped_refptr<MmalComponent> src)
+  {
+    MmalConnectedPort * const dest = input_port();
+    if (dest->connect_to_src(src->output_port()) != 0)
+      return -1;
+    if (dest->enable() != 0) {
+      dest->disconnect();
+      return -1;
+    }
+    return 0;
+  }
+
+  int enable()
+  {
+    MMAL_STATUS_T err;
+
+    if ((err = mmal_component_enable(component_)) != MMAL_SUCCESS)
+      LOG(ERROR) << "### mmal_component_enable failed: err=" << err;
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  int disable()
+  {
+    MMAL_STATUS_T err;
+    if ((err = mmal_component_disable(component_)) != MMAL_SUCCESS)
+      LOG(ERROR) << "### mmal_component_disable failed: err=" << err;
+
+    return err == MMAL_SUCCESS ? 0 : -1;
+  }
+
+  // Shut this component down
+  // Reclaim all resources as they return & attempt to zero our internal
+  // ref count so we will die when the decoder derefs us.
+  // The reclaim process may be async so we may die some time later
+  virtual void kill() = 0;
+};
+
+// ---------------------------------------------------------------------------
+
+class MmalVideoDecoderComponent : public MmalComponent
+{
+  MmalVideoESPort port_in_;
+  MmalConnectedPort port_out_;
+  MmalPort port_ctrl_;
+
+protected:
+  ~MmalVideoDecoderComponent() override
+  {
+#if TRACE_COMPONENT_CREATION
+    LOG(INFO) << "@@@ ~MmalVideoDecoderComponent";
+#endif
+  }
+
+  MmalConnectedPort * input_port() override
+  {
+    return NULL;
+  }
+
+  MmalConnectedPort * output_port() override
+  {
+    return &port_out_;
+  }
+
+
+public:
+  MmalVideoDecoderComponent() :
+    port_in_(this)
+  {
+#if TRACE_COMPONENT_CREATION
+    LOG(INFO) << "@@@ MmalVideoDecoderComponent";
+#endif
+  }
+
+  int create(const MmalVideoDecoder::Options& opt, const VideoDecoderConfig& config, const bool low_delay)
+  {
+    if (create_by_name(MMAL_COMPONENT_DEFAULT_VIDEO_DECODER) != 0) {
+      return -1;
+    }
+
+    // Attach control structures to ports
+    port_in_.set_port(component_->input[0]);
+    port_out_.set_port(component_->output[0]);
+    port_ctrl_.set_port(component_->control);
+
+    if (
+        port_ctrl_.enable() != 0 ||
+
+        port_in_.set_parameter(MMAL_PARAMETER_VIDEO_MAX_NUM_CALLBACKS, low_delay ? -5 : 120) != 0 ||
+//        port_in_.set_parameter(MMAL_PARAMETER_VIDEO_MAX_NUM_CALLBACKS, -3) != 0 ||
+        port_in_.config(config, low_delay) != 0 ||
+        port_in_.commit() != 0 ||
+
+//        port_out_.set_parameter(MMAL_PARAMETER_EXTRA_BUFFERS, 6) != 0 ||
+        port_out_.set_parameter(MMAL_PARAMETER_VIDEO_INTERPOLATE_TIMESTAMPS, false) != 0 ||
+        port_out_.set_video_encoding(opt.decoder_out_encoding()) != 0 ||
+        port_out_.set_video_format(config.coded_size(),
+            config.visible_rect(),
+            par_from_sizes(config.visible_rect().size(), config.natural_size()),
+            config.color_space()) != 0 ||
+        port_out_.commit() != 0 ||
+
+        port_in_.set_buffers(0x10000, 8) != 0 ||
+        port_in_.set_parameter(MMAL_PARAMETER_ZERO_COPY, false) != 0 ||  // ### Z-Copy is bust here
+        port_in_.create_port_pool() != 0 ||
+
+        port_in_.enable() != 0)
+    {
+      goto fail;
+    }
+
+    return 0;
+
+fail:
+    return -1;
+  }
+
+  void kill() override
+  {
+    port_in_.kill();
+    port_out_.kill();
+  }
+
+  void reset1()
+  {
+    port_in_.disable();
+    port_out_.disable();
+  }
+
+  void reset2()
+  {
+    port_out_.enable();
+    port_in_.enable();
+  }
+
+
+  int submit(const scoped_refptr<DecoderBuffer>& buffer, const VideoDecoder::DecodeCB& decode_cb)
+  {
+    return port_in_.submit(buffer, decode_cb);
+  }
+};
+
+// ---------------------------------------------------------------------------
+
+class MmalVideoResizerComponent : public MmalComponent
+{
+  FrameCopyMode copy_mode_;
+  gfx::Size cur_size_;
+  MmalConnectedPort port_in_;
+  MmalVideoARGBPort port_out_;
+  MmalPort port_ctrl_;
+
+protected:
+  ~MmalVideoResizerComponent() override
+  {
+#if TRACE_COMPONENT_CREATION
+    LOG(INFO) << "@@@ ~MmalVideoResizerComponent";
+#endif
+  }
+
+  MmalConnectedPort * input_port() override
+  {
+    return &port_in_;
+  }
+
+  MmalConnectedPort * output_port() override
+  {
+    return NULL;
+  }
+
+
+public:
+  MmalVideoResizerComponent() :
+    copy_mode_(FrameCopyMode::unset),
+    port_out_(this)
+  {
+#if TRACE_COMPONENT_CREATION
+    LOG(INFO) << "@@@ MmalVideoResizerComponent";
+#endif
+  }
+
+  int create(const MmalVideoDecoder::Options& opt)
+  {
+    if (create_by_name(opt.resizer_component_name()) != 0) {
+      return -1;
+    }
+
+    // Attach control structures to ports
+    port_in_.set_port(component_->input[0]);
+    port_out_.set_port(component_->output[0]);
+    port_ctrl_.set_port(component_->control);
+    return 0;
+  }
+
+  bool is_copy_mode_supported(const FrameCopyMode mode) const
+  {
+    return port_out_.get_parameter_supported_encodings().is_supported(mode == FrameCopyMode::SLICE ? MMAL_ENCODING_BGRA_SLICE : MMAL_ENCODING_BGRA);
+  }
+
+  int configure(const MmalVideoDecoder::Options& opt,
+      const gfx::Size& size, const VideoDecoder::OutputCB& output_cb)
+  {
+    copy_mode_ = opt.frame_copy_mode(is_copy_mode_supported(FrameCopyMode::SLICE));
+
+    port_out_.set_copy_mode(copy_mode_);
+
+    if (port_ctrl_.enable() != 0 ||
+        port_out_.set_size(opt.debug_fixed_size_set() ? opt.debug_fixed_size() : size) != 0 ||
+        port_out_.set_resize_disabled(opt.debug_fixed_size_set()) != 0 ||
+        port_out_.set_debug_bench(opt.debug_bench(), opt.debug_fps()) != 0 ||
+        port_out_.commit() != 0)
+    {
+      goto fail;
+    }
+
+    switch (copy_mode_) {
+      case FrameCopyMode::SLICE:
+        if (port_out_.set_buffers(MMAL_SLICE_HEIGHT * MMAL_LIMIT_WIDTH * 4, opt.frame_buffers(copy_mode_)) != 0 ||
+          port_out_.set_parameter(MMAL_PARAMETER_ZERO_COPY, true) != 0 ||
+          port_out_.create_port_pool() != 0)
+        {
+          goto fail;
+        }
+        break;
+
+      case FrameCopyMode::FRAME:
+        // Firmware-side frame copy
+#if OPT_FRAME_COPY_STASHED
+        if (port_out_.set_buffers(port_out_.buffer_size_recommended(), opt.frame_buffers(copy_mode_)) != 0 ||
+          port_out_.set_parameter(MMAL_PARAMETER_ZERO_COPY, false) != 0 ||
+          port_out_.create_frame_pool() != 0)
+#else
+        if (port_out_.set_buffers(port_out_.buffer_size_recommended(), opt.frame_buffers(copy_mode_)) != 0 ||
+          port_out_.set_parameter(MMAL_PARAMETER_ZERO_COPY, true) != 0 ||
+          port_out_.create_port_pool() != 0)
+#endif
+        {
+          goto fail;
+        }
+        break;
+
+      case FrameCopyMode::ZERO:
+        if (port_out_.set_buffers(MMAL_LIMIT_HEIGHT * MMAL_LIMIT_WIDTH * 4, opt.frame_buffers(copy_mode_)) != 0 ||
+          port_out_.set_parameter(MMAL_PARAMETER_ZERO_COPY, true) != 0 ||
+          port_out_.create_port_pool() != 0)
+        {
+          goto fail;
+        }
+        break;
+
+      default:
+        goto fail;
+    }
+
+    if (port_out_.enable(output_cb) != 0)
+      goto fail;
+
+    cur_size_ = size;
+    return 0;
+
+fail:
+    return -1;
+  }
+
+  void kill() override
+  {
+    port_in_.kill();
+    port_out_.kill();
+  }
+
+  void reset1()
+  {
+    port_in_.disable();
+    port_out_.disable();
+  }
+
+  void reset2()
+  {
+    port_out_.enable();
+    port_in_.enable();
+  }
+
+  void set_eos_cb(const VideoDecoder::DecodeCB& eos_cb)
+  {
+    port_out_.set_eos_cb(eos_cb);
+  }
+
+  void set_red_pixel(const bool red)
+  {
+    port_out_.set_red_pixel(red);
+  }
+
+  bool is_output_stalling() const
+  {
+    return port_out_.is_stalling();
+  }
+};
+
+
+// ---------------------------------------------------------------------------
+
+void MmalConnection::disconnect()
+{
+  if (src_ == NULL || dest_ == NULL) {
+    LOG(ERROR) << "#### src or dest NULL";
+    return;
+  }
+
+  disable();
+
+  // Commit suicide by killing our refs
+  // Both ends should still exist as the destruction of either
+  // should call this fn
+  src_->set_connection(NULL);
+  dest_->set_connection(NULL);
+}
+
+int MmalConnection::connect(MmalConnectedPort * const src, MmalConnectedPort * const dest)
+{
+  MMAL_STATUS_T err;
+
+  // MMAL_CONNECTION_FLAG_KEEP_BUFFER_REQUIREMENTS means
+  // that enable will actually observe the buffer_num
+  // and size fields - otherwise it will always ignore
+  // them
+  if ((err = mmal_connection_create(&connection_, src->port_, dest->port_,
+      MMAL_CONNECTION_FLAG_KEEP_BUFFER_REQUIREMENTS | MMAL_CONNECTION_FLAG_TUNNELLING)) != MMAL_SUCCESS) {
+    LOG(ERROR) << "### mmal_connection_create failed: err=" << err;
+    connection_ = NULL;  // Just in case
+    return -1;
+  }
+
+  src->set_connection(this);
+  dest->set_connection(this);
+
+  src_ = src;
+  dest_ = dest;
+
+  // As we have asked for our choices to be respected we should make sure they
+  // are set to something sensible
+  set_buffers(buffer_size_recommended(), buffer_num_recommended());
+
+  mmal_log_dump_port(src->port_);
+  mmal_log_dump_port(dest->port_);
+  return 0;
+}
+
+uint32_t MmalConnection::buffer_size_recommended() const
+{
+  return std::max(src_->MmalPort::buffer_size_recommended(), dest_->MmalPort::buffer_size_recommended());
+}
+
+uint32_t MmalConnection::buffer_num_recommended() const
+{
+  return std::max(src_->MmalPort::buffer_num_recommended(), dest_->MmalPort::buffer_num_recommended());
+}
+
+uint32_t MmalConnection::buffer_size_min() const
+{
+  return std::max(src_->MmalPort::buffer_size_min(), dest_->MmalPort::buffer_size_min());
+}
+
+uint32_t MmalConnection::buffer_num_min() const
+{
+  return std::max(src_->MmalPort::buffer_num_min(), dest_->MmalPort::buffer_num_min());
+}
+
+int MmalConnection::set_buffers(uint32_t s, uint32_t n)
+{
+  src_->MmalPort::set_buffers(s, n);
+  dest_->MmalPort::set_buffers(s, n);
+  return 0;
+}
+
+
+// ---------------------------------------------------------------------------
+
+// Any refs required are applied to our enclosing object
+void MmalPortAndPool::AddRef() const
+{
+  component_->AddRef();
+}
+
+// Any refs required are applied to our enclosing object
+void MmalPortAndPool::Release()
+{
+  component_->Release();
+}
+
+const MmalTaskRunner& MmalPortAndPool::task_runner() const
+{
+  return component_->task_runner();
+}
+
+// ---------------------------------------------------------------------------
+
+// static
+bool MmalVideoDecoder::IsCodecSupported(VideoCodec codec) {
+//  LOG(ERROR) << "Test codec: " << codec;
+  // If we have checked what we can do then use that otherwise press on
+  // if we have any chance (i.e. can find a valid 4cc)
+  return (supported_video_codecs & (1 << codec)) != 0 ||
+         (supported_video_codecs == 0 && video_codec_to_fourcc(codec) != MMAL_ENCODING_UNKNOWN);
+}
+
+bool MmalVideoDecoder::IsSizeSupported(const gfx::Size& size)
+{
+  return size.width() <= MMAL_LIMIT_WIDTH &&
+    size.height() <= MMAL_LIMIT_HEIGHT &&
+    size.width() >= 32 &&
+    size.height() >= 32;
+}
+
+class VcGenCmd {
+  bool init_good;
+  VCHI_INSTANCE_T vchi_instance;
+  VCHI_CONNECTION_T *vchi_connection = nullptr;
+
+public:
+  VcGenCmd() :
+    init_good(false),
+    vchi_instance(0),
+    vchi_connection(nullptr)
+  {
+    if (vchi_initialise(&vchi_instance) != 0) {
+      LOG(ERROR) << "VCHI initialization failed";
+      return;
+    }
+
+    //create a vchi connection
+    if (vchi_connect(NULL, 0, vchi_instance) != 0) {
+      LOG(ERROR) << "VCHI connection failed";
+      return;
+    }
+
+    vc_vchi_gencmd_init(vchi_instance, &vchi_connection, 1);
+    init_good = true;
+  }
+
+  ~VcGenCmd()
+  {
+    if (init_good) {
+      int err;
+
+      vc_gencmd_stop();
+
+      //close the vchi connection
+      if ((err = vchi_disconnect(vchi_instance)) != 0) {
+        LOG(ERROR) << "VCHI disconnect failed, err=" << err;
+      }
+    }
+  }
+
+  size_t get_memory_gpu() const
+  {
+    int err;
+
+    if (!init_good) {
+      return 0;
+    }
+
+    //send the gencmd for the argument
+    if ((err = vc_gencmd_send("get_mem gpu")) != 0) {
+      LOG(ERROR) << "vc_gencmd_send returned " << err;
+      return 0;
+    }
+
+    char rbuf[1024] = {0};
+    if ((err = vc_gencmd_read_response(rbuf, sizeof(rbuf) - 1)) != 0) {
+      LOG(ERROR) << "vc_gencmd_read_response returned " << err;
+      return 0;
+    }
+
+    if (strncmp(rbuf, "gpu=", 4) != 0) {
+      LOG(ERROR) << "Unexpected response for get_mem gpu: '" << rbuf << "'";
+      return 0;
+    }
+
+    char * p;
+    unsigned long m = strtoul(rbuf + 4, &p, 10);
+
+    if (p[0] != 'M' || p[1] !='\0') {
+      LOG(ERROR) << "Unexpected numeric for get_mem gpu: '" << rbuf << "'";
+      return 0;
+    }
+
+    return m << 20;
+  }
+};
+
+
+
+MmalVideoDecoder::MmalVideoDecoder() :
+  state_(MmalDecoderState::kNew),
+  counted_(false),
+  wants_extra_data_(false),
+  opt_(Options::Create()),
+  weak_factory_(this)
+{
+  // These aren't going to change whilst we are alive
+  // so we only get them on 1st vchiq init
+  static uint32_t firmware_date = 0;
+  static uint32_t gpu_mem = 0;
+
+#if TRACE_COMPONENT_CREATION
+  LOG(INFO) << "@@@ Create Decoder pid=" << getpid() << ", ppid=" << getppid() << ", vchiq_fd=" << vchiq_init_done;
+#endif
+
+  if (opt_->single_process()) {
+    LOG(INFO) << "Single Process";
+
+    MMAL_STATUS_T err = mmal_vc_init();
+
+    if (err != MMAL_SUCCESS) {
+      LOG(ERROR) << "### mmal_vc_init failed: err=" << err;
+      goto fail;
+    }
+
+    vchiq_init_done = true;
+  }
+  else if (!vchiq_init_done) {
+
+    base::Pickle request;
+    request.WriteInt(content::LinuxSandbox::METHOD_OPEN_DEV_VCHIQ);
+    int vfd = -1;
+
+    uint8_t reply_buf[512];
+    const ssize_t reply_len = base::UnixDomainSocket::SendRecvMsg(
+        content::GetSandboxFD(), reply_buf, sizeof(reply_buf), &vfd, request);
+
+    if (reply_len == -1 || vfd == -1) {
+      LOG(ERROR) << "### Failed to open /dev/vchiq";
+      goto fail;
+    }
+
+    MMAL_STATUS_T err = mmal_vc_init_fd(vfd);
+
+    // The passed fd is at a minimum duped so close now
+    // we want to close on error too
+    IGNORE_EINTR(close(vfd));
+
+    if (err != MMAL_SUCCESS) {
+      LOG(ERROR) << "### mmal_vc_init_fd failed: fd=" << vfd << ", err=" << err;
+      goto fail;
+    }
+
+    base::Pickle reply(reinterpret_cast<char*>(reply_buf), reply_len);
+    base::PickleIterator pickle_iter(reply);
+    if (!pickle_iter.ReadUInt32(&firmware_date))
+    {
+      LOG(ERROR) << "### Failed to get firmware date";
+    }
+
+    gpu_mem = VcGenCmd().get_memory_gpu();
+
+    vchiq_init_done = true;
+  }
+
+  opt_->set_firmware_date(firmware_date);
+  opt_->set_gpu_mem(gpu_mem);
+
+  LOG(INFO) << opt_->ToString();
+  LOG(INFO) << opt_->OptString();
+
+  state_ = MmalDecoderState::kUninitialised;
+  return;
+
+fail:
+  // We are never going to be happy - do not try
+  state_ = MmalDecoderState::kFatal;
+}
+
+MmalVideoDecoder::~MmalVideoDecoder() {
+#if TRACE_COMPONENT_CREATION
+  LOG(INFO) << "@@@ Destroy Decoder";
+#endif
+
+  uninitialise();
+
+  if (counted_) {
+    base::subtle::NoBarrier_AtomicIncrement(& decoder_count, -1);
+  }
+}
+
+
+
+std::string MmalVideoDecoder::GetDisplayName() const {
+  return "MmalVideoDecoder";
+}
+
+
+void MmalVideoDecoder::uninitialise()
+{
+  if (decoder_ != NULL) {
+    decoder_->kill();
+    decoder_ = NULL;
+  }
+  if (resizer_ != NULL) {
+    resizer_->kill();
+    resizer_ = NULL;
+  }
+
+  extra_data_ = NULL;
+  wants_extra_data_ = false;
+
+  state_ = kUninitialised;
+}
+
+// EOS callback - accessed via WeakPtr so if we are destroyed
+// whilst EOS is still pending this won't happen
+//
+// We call Reset on EOS.  This has a couple of benefits
+// 1) It reclaims memory as soon as possible (there's a decent chance we
+//    are done with this decoder now)
+// 2) It should allow us to go <decode> <eos> <decode> which is defined to
+//    work in the Decode spec (even if it doesn't seem to happen in reality)
+
+void MmalVideoDecoder::eos_cb(const DecodeCB decode_cb, DecodeStatus status)
+{
+//  LOG(ERROR) << "+++ EOS(" << status << ")";
+  Reset(base::Bind(decode_cb, status));
+}
+
+// Initializes a VideoDecoder with the given |config|, executing the
+// |init_cb| upon completion. |output_cb| is called for each output frame
+// decoded by Decode().
+//
+// If |low_delay| is true then the decoder is not allowed to queue frames,
+// except for out-of-order frames, i.e. if the next frame can be returned it
+// must be returned without waiting for Decode() to be called again.
+// Initialization should fail if |low_delay| is true and the decoder cannot
+// satisfy the requirements above.
+//
+// |cdm_context| can be used to handle encrypted buffers. May be null if the
+// stream is not encrypted.
+//
+// Note:
+// 1) The VideoDecoder will be reinitialized if it was initialized before.
+//    Upon reinitialization, all internal buffered frames will be dropped.
+// 2) This method should not be called during pending decode or reset.
+// 3) No VideoDecoder calls should be made before |init_cb| is executed.
+// 4) VideoDecoders should take care to run |output_cb| as soon as the frame
+// is ready (i.e. w/o thread trampolining) since it can strongly affect frame
+// delivery times with high-frame-rate material.  See Decode() for additional
+// notes.
+
+void MmalVideoDecoder::Initialize(const VideoDecoderConfig& config,
+                                    bool low_delay,
+                                    CdmContext* /* cdm_context */,
+                                    const InitCB& init_cb,
+                                    const OutputCB& output_cb) {
+  LOG(INFO) << "Mmal Init: low_delay=" << low_delay << ", config=" << config.AsHumanReadableString();
+
+  DCHECK(config.IsValidConfig());
+  DCHECK(!output_cb.is_null());
+
+  InitCB bound_init_cb = BindToCurrentLoop(init_cb);
+
+  // If dead - give up now
+  if (state_ <= MmalDecoderState::kFatal) {
+    LOG(ERROR) << __func__ << ": FATAL";
+    bound_init_cb.Run(false);
+    return;
+  }
+
+  // If already inited (or failed) then kill
+  if (state_ != kUninitialised) {
+    // * This is unsubtle in the extreme
+    // and we would really prefer to wait for the kill ops to finish
+    // before continuing so we don't have an overlap where we have
+    // two sets of resizer buffers ... or preserve the resizer...
+    // or something...
+    uninitialise();
+  }
+
+  if (state_ != kUninitialised) {
+    LOG(ERROR) << __func__ << ": Unexpected state: " << state_;
+    goto fail;
+  }
+
+  // Do we support this?
+  if (config.is_encrypted() || !IsCodecSupported(config.codec()) ||
+      !IsSizeSupported(config.coded_size())) {
+//    LOG(ERROR) << "Encrypted or unsupported";
+    // No
+    goto fail;
+  }
+
+  // Check count
+  // 0 will effectively turn off mmal decode
+  if (!counted_ && base::subtle::NoBarrier_AtomicIncrement(&decoder_count, 1) > (int)opt_->max_decoders()) {
+    base::subtle::NoBarrier_AtomicIncrement(&decoder_count, -1);
+    LOG(WARNING) << __func__ << ": Exceeded decoder limit";
+    goto fail;
+  }
+  counted_ = true;
+
+  LOG(INFO) << "Decoder count:" << decoder_count << "/" << opt_->max_decoders();
+
+  // Stash for later reset
+  decoder_config_ = config;
+  low_delay_ = opt_->low_delay(low_delay);
+
+  if (config.extra_data().size() != 0)
+  {
+    extra_data_ = DecoderBuffer::CopyFrom(&config.extra_data()[0], config.extra_data().size());
+    wants_extra_data_ = true;
+  }
+
+  decoder_ = new MmalVideoDecoderComponent();
+  if (decoder_->create(*opt_, config, low_delay_) != 0)
+    goto fail;
+  if (decoder_->enable() != 0)
+    goto fail;
+
+  resizer_ = new MmalVideoResizerComponent();
+
+  if (resizer_->create(*opt_) != 0)
+    goto fail;
+
+  if (resizer_->configure(*opt_,
+      config.natural_size(),
+      BindToCurrentLoop(output_cb)) != 0)
+    goto fail;
+
+  resizer_->set_red_pixel(opt_->red_pixel());
+  if (resizer_->enable() != 0)
+    goto fail;
+
+  if (resizer_->connect_to_output(decoder_) != 0)
+    goto fail;
+
+  state_ = MmalDecoderState::kInitialised;
+
+  // Success!
+  bound_init_cb.Run(true);
+  return;
+
+
+fail:
+  LOG(INFO) << __func__ << ": FAILED";
+  state_ = std::min(state_, MmalDecoderState::kFail);
+  bound_init_cb.Run(false);
+}
+
+// Requests a |buffer| to be decoded. The status of the decoder and decoded
+// frame are returned via the provided callback. Some decoders may allow
+// decoding multiple buffers in parallel. Callers should call
+// GetMaxDecodeRequests() to get number of buffers that may be decoded in
+// parallel. Decoder must call |decode_cb| in the same order in which Decode()
+// is called.
+//
+// Implementations guarantee that the callback will not be called from within
+// this method and that |decode_cb| will not be blocked on the following
+// Decode() calls (i.e. |decode_cb| will be called even if Decode() is never
+// called again).
+//
+// After decoding is finished the decoder calls |output_cb| specified in
+// Initialize() for each decoded frame. |output_cb| is always called before
+// |decode_cb|. However, |output_cb| may be called before Decode() returns, if
+// other behavior is desired callers should ensure that |output_cb| will
+// trampoline as necessary.
+// * We will violate this ordering, but it doesn't seem to matter
+//
+// If |buffer| is an EOS buffer then the decoder must be flushed, i.e.
+// |output_cb| must be called for each frame pending in the queue and
+// |decode_cb| must be called after that. Callers will not call Decode()
+// again until after the flush completes.
+void MmalVideoDecoder::Decode(const scoped_refptr<DecoderBuffer>& buffer,
+                                const DecodeCB& decode_cb) {
+  DCHECK(buffer.get());
+  DCHECK(!decode_cb.is_null());
+
+  CHECK(decoder_ == nullptr || decoder_->task_runner()->BelongsToCurrentThread());
+
+  const bool eos_req = buffer->end_of_stream();
+
+//  LOG(ERROR) << "<<< Decode: state=" << state_ << ", buffer=" << buffer->AsHumanReadableString();
+  DecodeCB decode_cb_bound(BindToCurrentLoop(decode_cb));
+
+  // If we are in any state except running (reset, never sent data, eos)
+  // then EOS won't propagate and we should ack here & now
+  if (eos_req && state_ != MmalDecoderState::kRunning) {
+    LOG(INFO) << "<<< >>> EOS";
+    decode_cb_bound.Run(DecodeStatus::OK);
+    return;
+  }
+
+  if (state_ == MmalDecoderState::kResetEOS) {
+    // * Really we should be able to do half this work
+    //   and drop into ResetRun but the enables don't currently work
+    //   correctly for that
+
+    decoder_ = new MmalVideoDecoderComponent();
+    if (decoder_->create(*opt_, decoder_config_, low_delay_) != 0)
+      goto fail;
+    if (decoder_->enable() != 0)
+      goto fail;
+
+    if (resizer_->connect_to_output(decoder_) != 0)
+      goto fail;
+
+    resizer_->reset2();
+
+    wants_extra_data_ = (extra_data_ != NULL);
+
+    state_ = MmalDecoderState::kInitialised;
+  }
+  else if (state_ == MmalDecoderState::kResetRun) {
+    resizer_->reset2();
+    decoder_->reset2();
+    wants_extra_data_ = (extra_data_ != NULL);
+    state_ = MmalDecoderState::kInitialised;
+  }
+
+  if (state_ < MmalDecoderState::kInitialised)
+  {
+    LOG(ERROR) << "### Decode in bad state: " << state_;
+    goto fail;
+  }
+
+  if (wants_extra_data_) {
+    if (extra_data_ == NULL) {
+      LOG(ERROR) << "### extra_data_ NULL";
+      goto fail;
+    }
+
+    wants_extra_data_ = false;
+    if (decoder_->submit(extra_data_, DecodeCB()) < 0)
+      goto fail;
+  }
+
+  if (eos_req) {
+    // eos_cb must be called on the current thread
+    resizer_->set_eos_cb(BindToCurrentLoop(
+        base::Bind(&MmalVideoDecoder::eos_cb, weak_factory_.GetWeakPtr(), decode_cb)));
+
+    // The decode_cb we pass here isn't ever used - it just indicates that
+    // we want Qed submission.  * Mucky.
+    if (decoder_->submit(buffer, decode_cb_bound) < 0)
+      goto fail;
+
+    state_ = MmalDecoderState::kEOS;
+  }
+  else
+  {
+    if (decoder_->submit(buffer, decode_cb_bound) < 0)
+      goto fail;
+
+    state_ = MmalDecoderState::kRunning;
+  }
+
+//  LOG(ERROR) << ">>> Decode";
+  return;
+
+fail:
+  LOG(WARNING) << ">>> Decode: FAIL";
+  decode_cb_bound.Run(DecodeStatus::DECODE_ERROR);
+}
+
+// Resets decoder state. All pending Decode() requests will be finished or
+// aborted before |closure| is called.
+// Note: No VideoDecoder calls should be made before |closure| is executed.
+//
+// This fn shuts stuff down - restart is managed at the beginning of Decode
+
+void MmalVideoDecoder::Reset(const base::Closure& closure) {
+  switch (state_) {
+    case MmalDecoderState::kRunning:
+      LOG(INFO) << "--- Reset (running)";
+      decoder_->reset1();
+      resizer_->reset1();
+      state_ = MmalDecoderState::kResetRun;
+      break;
+
+    case MmalDecoderState::kEOS:
+      LOG(INFO) << "--- Reset (EOS)";
+      decoder_->kill();
+      decoder_ = NULL;
+      resizer_->reset1();
+      state_ = MmalDecoderState::kResetEOS;
+      break;
+
+    default:
+      LOG(INFO) << "--- Reset (null)";
+      break;
+  }
+
+  // Ensure the closure is scheduled after any callbacks triggered by
+  // the reset sequence
+  base::ThreadTaskRunnerHandle::Get()->PostTask(FROM_HERE, closure);
+  return;
+}
+
+bool MmalVideoDecoder::CanReadWithoutStalling() const
+{
+  return resizer_ == nullptr || !resizer_->is_output_stalling();
+}
+
+}  // namespace media
+
+
diff --git a/src/media/filters/mmal_video_decoder.h b/src/media/filters/mmal_video_decoder.h
new file mode 100644
index 0000000..85826c8
--- /dev/null
+++ b/src/media/filters/mmal_video_decoder.h
@@ -0,0 +1,159 @@
+// Copyright (c) 2012 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef MEDIA_FILTERS_MMAL_VIDEO_DECODER_H_
+#define MEDIA_FILTERS_MMAL_VIDEO_DECODER_H_
+
+#include <list>
+
+#include "base/callback.h"
+#include "base/macros.h"
+#include "base/memory/weak_ptr.h"
+#include "base/threading/thread_checker.h"
+#include "media/base/video_decoder.h"
+#include "media/base/video_decoder_config.h"
+#include "media/base/video_frame_pool.h"
+#include "base/command_line.h"
+#include "base/strings/string_number_conversions.h"
+
+struct AVCodecContext;
+struct AVFrame;
+
+namespace base {
+class SingleThreadTaskRunner;
+}
+
+namespace media {
+
+class DecoderBuffer;
+class MmalVideoDecoderComponent;
+class MmalVideoResizerComponent;
+
+class MEDIA_EXPORT MmalVideoDecoder : public VideoDecoder {
+public:
+  class Options;
+
+private:
+  enum MmalDecoderState {
+      kFatal = -2,
+      kFail = -1,
+      kNew = 0,
+      kUninitialised,
+      kReseting,
+      kResetEOS,     // Reset from EOS
+      kResetRun,     // Reset from running
+      kInitialised,  // Init but no decode yet
+      kRunning,      // Have successful decode
+      kEOS           // EOS rxed
+  };
+
+  MmalDecoderState state_;
+
+  // Have we counted this decoder (for decoder count limits) yet?
+  bool counted_;
+
+  scoped_refptr<DecoderBuffer> extra_data_;
+  bool wants_extra_data_;
+
+  scoped_refptr<MmalVideoDecoderComponent> decoder_;
+  // Resizer may persist after VideoDecoder dies if it maintains frames
+  // with shared VC memory
+  scoped_refptr<MmalVideoResizerComponent> resizer_;
+
+  VideoDecoderConfig decoder_config_;
+  bool low_delay_;
+
+  const std::unique_ptr<Options> opt_;
+
+  void uninitialise();
+  void eos_cb(const DecodeCB decode_cb, DecodeStatus status);
+
+ public:
+  static bool IsCodecSupported(VideoCodec codec);
+  static bool IsSizeSupported(const gfx::Size& size);
+
+  MmalVideoDecoder();
+  ~MmalVideoDecoder() override;
+
+  // VideoDecoder implementation.
+  std::string GetDisplayName() const override;
+
+  void Initialize(const VideoDecoderConfig& config,
+                  bool low_delay,
+                  CdmContext* cdm_context,
+                  const InitCB& init_cb,
+                  const OutputCB& output_cb) override;
+  void Decode(const scoped_refptr<DecoderBuffer>& buffer,
+              const DecodeCB& decode_cb) override;
+  void Reset(const base::Closure& closure) override;
+  bool CanReadWithoutStalling() const override;
+
+ private:
+  DISALLOW_COPY_AND_ASSIGN(MmalVideoDecoder);
+  base::WeakPtrFactory<MmalVideoDecoder> weak_factory_;
+};
+
+class MmalVideoFrame : public VideoFrame
+{
+protected:
+  gpu::Mailbox id_;
+  base::Closure kill_id_;
+//  int shmid_;
+
+  ~MmalVideoFrame() override;
+public:
+  MmalVideoFrame(
+      const StorageType storage_type,
+      const gfx::Size& coded_size,
+      const gfx::Rect& visible_rect,
+      const gfx::Size& natural_size,
+      const base::TimeDelta timestamp,
+      const gpu::Mailbox& id = gpu::Mailbox());
+
+  static scoped_refptr<MmalVideoFrame> Coerce(const scoped_refptr<VideoFrame>& frame)
+  {
+    if (frame->format() != PIXEL_FORMAT_MMAL_BUFFER) {
+      NOTREACHED();
+      return scoped_refptr<MmalVideoFrame>();
+    }
+    return scoped_refptr<MmalVideoFrame>(static_cast<MmalVideoFrame *>(frame.get()));
+  }
+
+  gpu::Mailbox get_id() const
+  {
+    return id_;
+  }
+
+//  int get_shmid() const
+//  {
+//    return shmid_;
+//  }
+
+  static inline uint32_t hashid(const gpu::Mailbox& id)
+  {
+    uint32_t x = 0;
+    for (uint32_t c : id.name) {
+      x = x * 67 + c;
+    }
+    return x;
+  }
+
+  uint32_t hashid() const
+  {
+    return hashid(id_);
+  }
+
+  void set_id_and_kill(const gpu::Mailbox& id, const base::Closure& kill)
+  {
+    kill_id_ = kill;
+    id_ = id;
+  }
+};
+
+
+}  // namespace media
+
+#endif  // MEDIA_FILTERS_MMAL_VIDEO_DECODER_H_
+
+
diff --git a/src/media/remoting/proto_enum_utils.cc b/src/media/remoting/proto_enum_utils.cc
index 45e6ff7..4655ba4 100644
--- a/src/media/remoting/proto_enum_utils.cc
+++ b/src/media/remoting/proto_enum_utils.cc
@@ -346,6 +346,7 @@ base::Optional<VideoPixelFormat> ToMediaVideoPixelFormat(
     CASE_RETURN_OTHER(PIXEL_FORMAT_Y8);
     CASE_RETURN_OTHER(PIXEL_FORMAT_Y16);
     CASE_RETURN_OTHER(PIXEL_FORMAT_I422);
+    CASE_RETURN_OTHER(PIXEL_FORMAT_MMAL_BUFFER);
   }
   return base::nullopt;  // Not a 'default' to ensure compile-time checks.
 }
@@ -383,6 +384,7 @@ base::Optional<pb::VideoDecoderConfig::Format> ToProtoVideoDecoderConfigFormat(
     CASE_RETURN_OTHER(PIXEL_FORMAT_Y8);
     CASE_RETURN_OTHER(PIXEL_FORMAT_Y16);
     CASE_RETURN_OTHER(PIXEL_FORMAT_I422);
+    CASE_RETURN_OTHER(PIXEL_FORMAT_MMAL_BUFFER);
   }
   return base::nullopt;  // Not a 'default' to ensure compile-time checks.
 }
diff --git a/src/media/remoting/rpc.proto b/src/media/remoting/rpc.proto
index f8f0cd6..3bcb2d7 100644
--- a/src/media/remoting/rpc.proto
+++ b/src/media/remoting/rpc.proto
@@ -214,6 +214,7 @@ message VideoDecoderConfig {
     PIXEL_FORMAT_Y8 = 25;
     PIXEL_FORMAT_Y16 = 26;
     PIXEL_FORMAT_I422 = 27;
+    PIXEL_FORMAT_MMAL_BUFFER = 28;
   };
 
   // Proto version of media::ColorSpace.
diff --git a/src/media/renderers/default_renderer_factory.cc b/src/media/renderers/default_renderer_factory.cc
index 2410d1b..f5e39eb 100644
--- a/src/media/renderers/default_renderer_factory.cc
+++ b/src/media/renderers/default_renderer_factory.cc
@@ -13,6 +13,7 @@
 #include "media/base/decoder_factory.h"
 #include "media/base/media_log.h"
 #include "media/filters/gpu_video_decoder.h"
+#include "media/filters/mmal_video_decoder.h"
 #include "media/renderers/audio_renderer_impl.h"
 #include "media/renderers/gpu_video_accelerator_factories.h"
 #include "media/renderers/renderer_impl.h"
@@ -85,6 +86,8 @@ DefaultRendererFactory::CreateVideoDecoders(
         gpu_factories, request_overlay_info_cb, media_log_));
   }
 
+  video_decoders.push_back(base::MakeUnique<MmalVideoDecoder>());
+
 #if !defined(MEDIA_DISABLE_LIBVPX)
   video_decoders.push_back(base::MakeUnique<VpxVideoDecoder>());
 #endif
diff --git a/src/media/renderers/skcanvas_video_renderer.cc b/src/media/renderers/skcanvas_video_renderer.cc
index ff0cc45..f8c5e11 100644
--- a/src/media/renderers/skcanvas_video_renderer.cc
+++ b/src/media/renderers/skcanvas_video_renderer.cc
@@ -245,13 +245,31 @@ class VideoImageGenerator : public SkImageGenerator {
  public:
   VideoImageGenerator(const scoped_refptr<VideoFrame>& frame)
       : SkImageGenerator(
+#if 0
             SkImageInfo::MakeN32Premul(frame->visible_rect().width(),
                                        frame->visible_rect().height())),
+#else
+            SkImageInfo::MakeN32(frame->visible_rect().width(),
+                                       frame->visible_rect().height(), kOpaque_SkAlphaType)),
+#endif
         frame_(frame) {
     DCHECK(!frame_->HasTextures());
   }
   ~VideoImageGenerator() override {}
 
+  bool installBitmapPixels(SkBitmap * const bitmap) override
+  {
+    const SkImageInfo& info = getInfo();
+    // ??? Also check size
+    if (frame_->format() != PIXEL_FORMAT_MMAL_BUFFER) {
+      return false;
+    }
+
+    bitmap->installPixels(info, frame_->data(0), frame_->stride(0));
+
+    return true;
+  }
+
  protected:
   bool onGetPixels(const SkImageInfo& info,
                    void* pixels,
@@ -381,6 +399,7 @@ void SkCanvasVideoRenderer::Paint(const scoped_refptr<VideoFrame>& video_frame,
   // frame has an unexpected format.
   if (!video_frame.get() || video_frame->natural_size().IsEmpty() ||
       !(media::IsYuvPlanar(video_frame->format()) ||
+        video_frame->format() == PIXEL_FORMAT_MMAL_BUFFER ||
         video_frame->format() == media::PIXEL_FORMAT_Y16 ||
         video_frame->HasTextures())) {
     cc::PaintFlags black_with_alpha_flags;
@@ -808,6 +827,7 @@ void SkCanvasVideoRenderer::ConvertVideoFrameToRGBPixels(
     case PIXEL_FORMAT_MJPEG:
     case PIXEL_FORMAT_MT21:
     case PIXEL_FORMAT_Y8:
+    case PIXEL_FORMAT_MMAL_BUFFER:
     case PIXEL_FORMAT_UNKNOWN:
       NOTREACHED() << "Only YUV formats and Y16 are supported.";
   }
diff --git a/src/media/video/gpu_memory_buffer_video_frame_pool.cc b/src/media/video/gpu_memory_buffer_video_frame_pool.cc
index 04021f5..6da2d96 100644
--- a/src/media/video/gpu_memory_buffer_video_frame_pool.cc
+++ b/src/media/video/gpu_memory_buffer_video_frame_pool.cc
@@ -428,6 +428,7 @@ void GpuMemoryBufferVideoFramePool::PoolImpl::CreateHardwareFrame(
     case PIXEL_FORMAT_Y8:
     case PIXEL_FORMAT_Y16:
     case PIXEL_FORMAT_I422:
+    case PIXEL_FORMAT_MMAL_BUFFER:
     case PIXEL_FORMAT_UNKNOWN:
       frame_ready_cb.Run(video_frame);
       return;
diff --git a/src/net/disk_cache/simple/simple_index_file_posix.cc b/src/net/disk_cache/simple/simple_index_file_posix.cc
index 9fa387e..f6746ee 100644
--- a/src/net/disk_cache/simple/simple_index_file_posix.cc
+++ b/src/net/disk_cache/simple/simple_index_file_posix.cc
@@ -15,6 +15,8 @@
 #include "base/files/file_util.h"
 #include "base/logging.h"
 
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+
 namespace disk_cache {
 namespace {
 
diff --git a/src/pi-util/BUILD.txt b/src/pi-util/BUILD.txt
new file mode 100755
index 0000000..633b900
--- /dev/null
+++ b/src/pi-util/BUILD.txt
@@ -0,0 +1,190 @@
+Build notes (cross compile from Ubuntu)
+=======================================
+
+Build from a patch
+------------------
+
+# Pick somewhere to put this
+cd ~
+mkdir chromium
+cd chromium
+# Get the build tools & put on path
+# You may want to add the path in .bashrc
+git clone https://chromium.googlesource.com/chromium/tools/depot_tools
+export PATH=$PATH:`pwd`/depot_tools
+# Get the main tree
+fetch chromium
+cd src
+# Checkout the version you want
+# * Fix version number
+git checkout 55.0.2883.99
+# Fix up any missing dependancies on the build m/c
+# * may well be unnecessary if you have built any other chrome
+./build/install-build-deps.sh
+./build/install-build-deps.sh --arm
+# Fetch & pull the other bits of the tree to sync.
+# As we are checking out a tag the --with_branch_heads is important
+gclient sync --with_branch_heads
+# Patch - should be completely clean if everything matchs
+# * Fix patch file to correct name / location
+cd ..
+patch -p1 < v55.0.2883.99.patch
+cd src
+# * Get a sysroot from somewhere and put it in build/linux/raspian_jessie_pi1-sysroot
+# * Example below is only if you have got an appropriate one lying around
+# * Otherwise follow sysroot instructions further down
+rsync -rl previous_location/raspian_jessie_pi1-sysroot build/linux/
+# Build output directories (out/armv6, out/armv7)
+# * This script currently assumes a sysroot of build/linux/raspian_jessie_pi1-sysroot
+#   so may need editing if you have put it elsewhere
+pi-util/gngen.py
+# Build chrome
+ninja -C out/armv6 chrome chrome_sandbox
+# Build armv7 ffmpeg
+ninja -C out/armv7 third_party/ffmpeg
+
+
+To run on a Pi
+--------------
+
+This requires a little installation.  The sandbox and ffmpeg shared libs
+need to be copied to the pi.  As neither is being tweaked much by me these
+steps should only be required if the underlying Chrome changes.  Otherwise
+you can just run out of the build directory (src/out/armv6)
+
+Assuming you can mount the build dir from the pi.
+
+# On the Pi NOT the build machine
+cd <path to build env>/src
+# Copy the ffmpeg libs
+pi-util/cplibs.sh
+# Copy the sandbox. BUILDTYPE tells the script where to get it from
+# This doesn't seem to be needed anymore with linux 4.9 and chrome 55
+BUILDTYPE=armv6 build/update-linux-sandbox.sh
+# Run chrome
+cd out/armv6
+./chrome
+
+
+Rebuilds
+--------
+
+In most cases a simple "ninja -C out/armv6 chrome" is all that is needed
+and the pi can run from out/armv6.
+
+To clean build "rm -rf out" and follow the build instructions from gngen.py
+
+
+Updating chromium from git
+--------------------------
+
+There is no script for this as the merges are prone to conflicts and it
+is much easier to sort them if you are doing stuff manually.
+
+If updating between major versions then mergeing tends to fail horribly
+so something along the lines of:
+
+pi-util/gitscan.py --gitscan-no-src reset {BASE}
+pi-util/gitscan.py --gitscan-no-src stash -u
+pi-util/gitscan.py --gitscan-no-src checkout {BASE}
+
+# Need to do src separately as the stash will lose pi-utils
+git reset 56.0.2924.84
+git stash -u
+
+git checkout <new tag>
+# May not be needed but it is probably a good idea
+git clean -dxf
+### Do the "get environment" stages of a new build
+...
+
+# Start rebuild
+git stash pop
+### Fix conflicts (there will be some)
+git commit
+### run through all other dirs we care about doing the same
+### Probably need to fix exec perms on pi-util scripts
+pi-util/gngen.py
+### Fix up any new libpackage-dev that we need
+ninja ...
+### Fix up build disasters
+
+
+If updating within a major version mergeing seems to work reliably so my
+preferred method for achieving this goes:
+
+# Make sure everything is committed
+pi-util/gitscan.py status
+# Revert to base chromium checkout for old checkout
+pi-util/gitscan.py --gitscan-no-src checkout {BASE}
+# Merge new version into current base
+git fetch --all
+git merge <new tag>
+# Fix conflicts - DEPS always seems to conflict
+git checkout <new tag> -- DEPS
+# ** Remember to update pi-util/pipaths.py to contain the new tag
+#    Either commit now or later
+vi pi-util/pipaths.py
+git commit --no-edit
+# Get the rest of the tree
+gclient sync --with_branch_heads
+# Checkout our tree and merge the new base into it
+pi-util/gitscan.py --gitscan-no-src checkout test/60/mmal_2
+pi-util/gitscan.py --gitscan-no-src merge --no-edit {BASE}
+
+and we should be good to go.  At this point you can either clean build or
+not.  Chromes dependancy checks seem remarkably good so a simple build
+works nearly all the time.
+
+
+Sysroots (one time only)
+------------------------
+
+1st you will need to get the dev files for a bunch of libs on your pi (or
+if you can get the right files by magic on your cross-compile m/c then
+that is good too).  In src/pi-util there is a shell script
+pi-install-dev.sh which lists all the libs I think are needed along with a
+helpful apt-get install so all you should need to do is run it on an
+appropriate pi.
+
+Next the appropriate bits need to be copied to
+build/linux/<sysroot-name>-sysroot. We use raspian_jessie_pi1 as the
+sysroot name in these instructions and in the example script files so you
+might well find it easiest to use the same name too
+
+The script pi-util/syncroot.sh that will copy the needed bits of a root to
+the right place and then fix the full path symlinks to be relative.  It
+uses rsync to copy the files so the src can contain a machine name
+
+pi-util/syncroot.sh my-pi: raspian_jessie_pi1
+
+Beware that there are ~8 rsync statements so if the rsync is operating
+over ssh then you may need to type your password 8 times...  Note also
+that the script appends -sysroot to the given name so don't add that
+yourself!
+
+If the pi root is updated then this script can / should be rerun to update
+the sysroot.
+
+
+
+Other notes on the tree
+-----------------------
+
+The definitive list of expected repos is in pi-util/pipaths.py
+
+The script pi-util/gitscan.py will perform the same git op on all the
+repos that are in use in the current patch set.  It has substitutions
+of {PATH} and {BASE} for the path to the current repo and the chromium
+commit on which the current branch is based
+
+The current dev branch is test/57/mmal_2
+
+Status of optional neon by build file:
+skia/BUILD.gn:                     yes
+build/secondary/third_party/libjpeg_turbo/BUILD.gn: yes
+third_party/libwebp/BUILD.gn:      yes
+third_party/openmax_dl/dl/BUILD.gn unused
+third_party/libyuv/BUILD.gn:       yes
+third_party/libyuv/libyuv.gni:     yes
+third_party/pdfium/skia/BUILD.gn:  unused
diff --git a/src/pi-util/README.txt b/src/pi-util/README.txt
new file mode 100644
index 0000000..0e73b93
--- /dev/null
+++ b/src/pi-util/README.txt
@@ -0,0 +1,100 @@
+Release notes
+=============
+
+This version should run with gpu-mem=64 with the default switches. Having
+said that this will only allow for 1 stream.  If you are playing >1 stream
+(even transiently) then you will need more (say gpu_mem=128) and you will
+need to set the --mmal-decoders option to the desired max number. The code
+should give up cleanly if it cannot allocate a h/w video decoder and give
+the stream to old-style ffmpeg decode, but as it stands in many cases it
+thinks it has allocated a decoder cleanly only to find that it fails when
+it tries to use it.
+
+Needs firmware from "Sep 13 2016 17:01:56" or later to work properly
+("vcgencmd version" will give the date).
+
+There are a few command-line switches - in general you shouldn't use
+them!
+
+
+Decode and resizer options
+--------------------------
+
+--mmal-decode-opaque     Set the decoder to use opaque frames between
+decoder and resizer.  This should be faster than i420 but doesn't work
+with old firmware.  This is the default with newer firmware (>=
+2016-11-01). (see --mmal-decode-i420)
+
+--mmal-decode-i420       Set the decoder to use I420 frames between
+decoder and resizer.  This generates an unnecessary conversion but works
+with all firmware.  This is the default with older firmware (<
+2016-11-01). (see --mmal-decode-opaque)
+
+--mmal-low-delay         Force "low-delay" mode on the decoder pipe.  This
+reduces the number of buffered ES frames before the decoder.  It isn't
+exactly low-delay but is definitely lower than otherwise.  May have a
+slight performance penalty and increase the risk of stuttering.  This mode
+will be automatically set by Chrome for some streams.
+
+--mmal-resize-isp        Use ISP resize rather than resizer.  Is noticably
+faster but requires --mmal-frame-copy or --mmal-zero-copy and newer
+firmware.  This is the default with newer firmware  (>= 2016-11-01) and
+enough gpu memory to support --mmal-frame-copy.
+
+--mmal-resize-resizer    Use resizer rather than ISP. Slower than ISP
+resize but supports older firmware and --mmal-slice-copy which may be
+needed if GPU memory is very limited (as will be the case on a Pi1 with a
+default setup).
+
+Copy-modes
+----------
+
+These are modes for getting frames out of mmal.  Current default is
+--mmal-frame-copy if --mmal-resize-isp is the default resizer or it looks
+like the firmware doesn't support --mmal-slice-copy otherwise
+--mmal-slice-copy is the default. Explicit use of a copy mode option will
+override the default regardless of whether or not we think the firmware
+supports the selected option.  Only use one of of these flags.
+
+--mmal-zero-copy         Pass gpu frames directly to chrome.  Chrome
+buffers some frames and stalls if it doesn't get them. So this option
+needs 6+ gpu frames allocated.  This is now a legacy and testing option as
+--mmal-frame-copy is faster and you probably want to have gpu_mem=192 if
+you are going to use it. Default frame-buffers = 6 (8M each)
+
+--mmal-frame-copy        Copy frame at a time out of mmal to chrome.
+Currently the fastest option.  Needs 2+ gpu frames for plausible
+performance. Default frame-buffers = 2 (8M each).  You probably want
+gpu-mem=80 for 1 decoder with this option.
+
+--mmal-slice-copy        Copy frames out in 16-line slices.  Has the
+lowest memory overhead, but the highest CPU load.  If this is selected
+then --mmal-frame-buffers is the number of slice buffers. Default frame
+buffers = 16 (~122k each).
+
+Misc options
+------------
+
+--enable-logging=stderr This is a standard option for chrome but worth
+noteing as the mmal code will print out its interpretation of the command
+line options passed to it along with how much GPU memory it has detected
+and the firmware date.
+
+--pi-patch-version       Print out the versions of Chromium and Pi
+patches.  Chrome will then terminate
+
+--mmal-decoders=<n>      Set the number of mmal decoders we wil try to
+create simultainiously. Default=1. If this number is exceeded then decoder
+init will fail and chrome will fallback to ffmpeg decode.  There is no
+panalty for setting this to a large number if you wish to have "unlimited"
+decoders.  However if it is set too big and there isn't the gpu mem to
+satisfy the requirements of the decode it may fail cleanly and revert to
+software (ffmpeg) decode or init may appear to succeed and decode then
+fails in an undefined manner.
+
+--mmal-frame-buffers=<n> Set the number of gpu "frame" buffers (see
+--mmal-xxx-copy). Change with care.
+
+--mmal-red-pixel         Puts a red square in the top left of a frame
+decoded by mmal so you can tell that it is active.  Doesn't work if
+zero-copy is set.
diff --git a/src/pi-util/cplibs.sh b/src/pi-util/cplibs.sh
new file mode 100755
index 0000000..5c878e6
--- /dev/null
+++ b/src/pi-util/cplibs.sh
@@ -0,0 +1,19 @@
+set -e
+
+FFNAME=libffmpeg_chrome.so.60
+LIBROOT=/usr/lib/arm-linux-gnueabihf
+
+if [ ! -d $LIBROOT ]; then
+  echo Can\'t find $LIBROOT
+  echo Are you sure you are running this on a Pi?
+  exit 1
+fi
+
+echo Copying $FFNAME from armv6/7 to $LIBROOT/...
+
+cp out/armv7/$FFNAME /tmp
+sudo cp /tmp/$FFNAME $LIBROOT/neon/vfp
+cp out/armv6/$FFNAME /tmp
+sudo cp /tmp/$FFNAME $LIBROOT
+
+
diff --git a/src/pi-util/defargs_armv6.gn b/src/pi-util/defargs_armv6.gn
new file mode 100644
index 0000000..7f47d55
--- /dev/null
+++ b/src/pi-util/defargs_armv6.gn
@@ -0,0 +1,28 @@
+# See "gn args <out_dir> --list" for available build arguments.
+is_debug = false
+target_cpu = "arm"
+target_os = "linux"
+
+arm_float_abi = "hard"
+arm_use_neon = false
+arm_optionally_use_neon = true
+arm_version = 6
+arm_use_thumb = false
+
+# Separate out so we can have both arm v6 & v7 versions
+is_component_ffmpeg = true
+
+# tcmalloc doesn't like armv6 by default
+use_allocator = "none"
+
+# Could use system libjpeg but go with chromiums version
+# use_system_libjpeg = true
+use_libjpeg_turbo = true
+
+# We want H.264 in ffmpeg
+ffmpeg_branding = "Chrome"
+proprietary_codecs = true
+
+# We might well want this to be true but it generates an odd build failure
+# that I haven't debugged yet
+optimize_for_size = false
diff --git a/src/pi-util/defargs_armv7.gn b/src/pi-util/defargs_armv7.gn
new file mode 100644
index 0000000..bd25e109
--- /dev/null
+++ b/src/pi-util/defargs_armv7.gn
@@ -0,0 +1,20 @@
+# Build arguments go here. Examples:
+#   is_component_build = true
+#   is_debug = false
+# See "gn args <out_dir> --list" for available build arguments.
+is_debug = false
+target_cpu = "arm"
+target_os = "linux"
+
+arm_float_abi = "hard"
+arm_use_neon = true
+arm_optionally_use_neon = false
+arm_version = 7
+
+is_component_ffmpeg = true
+# tcmalloc doesn't like armv6 by default
+use_allocator = "none"
+ffmpeg_branding = "Chrome"
+proprietary_codecs = true
+optimize_for_size = false
+
diff --git a/src/pi-util/dodiff.py b/src/pi-util/dodiff.py
new file mode 100755
index 0000000..fb86685
--- /dev/null
+++ b/src/pi-util/dodiff.py
@@ -0,0 +1,35 @@
+#!/usr/bin/env python
+
+import os, sys, string, subprocess
+
+# Local
+import gitscan, pipaths
+
+def doscan(outfile = sys.stdout):
+    revdict = gitscan.revdict()
+
+    cpath = gitscan.basepath()
+
+    for p in pipaths.pipaths:
+        os.chdir(os.path.join(cpath, p))
+        diff = subprocess.check_output(["git", "diff", revdict[p]])
+
+        header = False
+        lines = diff.split("\n")
+        # Remove terminal blank line
+        if lines[-1] == "":
+            lines.pop()
+        for line in lines:
+            if line.startswith("diff --git "):
+                header = True
+            if header:
+                line = string.replace(line, " a/", " a/" + p + "/")
+                line = string.replace(line, " b/", " b/" + p + "/")
+            if line.startswith("+++ "):
+                header = False
+            print >> outfile, line
+
+
+if __name__ == '__main__':
+    doscan()
+
diff --git a/src/pi-util/gitscan.py b/src/pi-util/gitscan.py
new file mode 100755
index 0000000..0da3aaa
--- /dev/null
+++ b/src/pi-util/gitscan.py
@@ -0,0 +1,69 @@
+#!/usr/bin/env python
+
+import os, string, subprocess, sys
+
+# Local
+import pipaths
+
+def revdict():
+    revdict = {'src':pipaths.src_commit}
+    stuff = subprocess.check_output(["gclient", "revinfo"])
+    for line in stuff.split("\n"):
+        pathn = line.find(":")
+        commitn = line.rfind("@")
+        if pathn != -1 and commitn != -1 :
+             revdict[line[:pathn]] = line[commitn+1:]
+    return revdict
+
+def basepath():
+    cpath = os.getcwd()
+    if not cpath.endswith("/src"):
+        raise "CWD doesn't end with /src"
+
+    return cpath[:-4]
+
+def gitscan(args, nosrc = False, quiet=False):
+    rv = 0
+
+    oldcwd = os.getcwd()
+    rdict = revdict()
+    cpath = basepath()
+
+    for p in pipaths.pipaths:
+        if nosrc and p == "src":
+            continue
+
+        os.chdir(os.path.join(cpath, p))
+
+        gitargs = [string.replace(string.replace(a, "{PATH}", p), "{BASE}", rdict[p]) for a in args]
+        gitargs[0:0] = ["git"]
+
+        if not quiet:
+            print ">>>", p
+
+        rv = subprocess.call(gitargs)
+        if rv != 0:
+            if not quiet:
+                print "Git returned non-zero error code", rv, "\ncwd =", os.getcwd(), "\ncmd =", gitargs
+            break
+
+    os.chdir(oldcwd)
+    return rv
+
+
+if __name__ == '__main__':
+
+    if len(sys.argv) < 2:
+        print "Usage: gitscan [--gitscan-no-src] <git cmd>"
+        print "  substitutes {PATH} and {BASE}"
+        exit(0)
+
+    nosrc = False
+
+    if sys.argv[1] == "--gitscan-no-src":
+        nosrc = True
+        del sys.argv[1]
+
+    gitscan(sys.argv[1:], nosrc)
+
+
diff --git a/src/pi-util/gngen.py b/src/pi-util/gngen.py
new file mode 100755
index 0000000..933a3f7
--- /dev/null
+++ b/src/pi-util/gngen.py
@@ -0,0 +1,47 @@
+#!/usr/bin/env python
+
+import os, ast, fileinput, subprocess, sys
+
+def docopy(name, vars):
+
+    dest_dir = os.path.join("out", name)
+    src_file = os.path.join("pi-util", "defargs_" + name + ".gn")
+
+    # Ignore any errors making dir (in particular it already exists)
+    try:
+        os.makedirs(dest_dir)
+    except:
+        pass
+
+    dargs = open(os.path.join(dest_dir, "args.gn"), "wt")
+    dargs.write('# -- copied from: ' + src_file + '\n')
+
+    for line in fileinput.input(src_file):
+        dargs.write(line)
+
+    dargs.write('# -- created by ' + sys.argv[0] + '\n')
+    dargs.write('target_sysroot = "' + vars["target_sysroot"] + '"\n')
+    dargs.write('google_api_key = "' + vars["google_api_key"] + '"\n')
+    dargs.write('google_default_client_id = "' + vars["google_default_client_id"] + '"\n')
+    dargs.write('google_default_client_secret = "' + vars["google_default_client_secret"] + '"\n')
+
+    dargs.close()
+
+    subprocess.check_call(["gn", "gen", dest_dir])
+
+
+if __name__ == '__main__':
+    gyp_vars = {}
+    gypi = os.path.join(os.environ["HOME"], ".gyp", "include.gypi")
+    if os.path.isfile(gypi):
+        print "Importing from:", gypi
+        gyps = open(gypi).read(-1)
+        gyp_vars = ast.literal_eval(gyps)["variables"]
+
+    gyp_vars["target_sysroot"] = os.path.abspath("build/linux/raspian_stretch_pi1-sysroot")
+
+    docopy("armv6", gyp_vars)
+    docopy("armv7", gyp_vars)
+
+
+
diff --git a/src/pi-util/pi-install-dev.sh b/src/pi-util/pi-install-dev.sh
new file mode 100755
index 0000000..21544e0
--- /dev/null
+++ b/src/pi-util/pi-install-dev.sh
@@ -0,0 +1,37 @@
+# Install set to build appropriate root on a clean pi
+
+sudo apt-get install \
+comerr-dev \
+libasound2-dev \
+libatk1.0-dev \
+libcap-dev \
+libcups2-dev \
+libexif-dev \
+libffi-dev \
+libgconf2-dev \
+libgl1-mesa-dev \
+libgnome-keyring-dev \
+gtk+-3.0 \
+libjpeg-dev \
+libkrb5-dev \
+libnspr4-dev \
+libnss3-dev \
+libpam0g-dev \
+libpango1.0-dev \
+libpci-dev \
+libpcre3-dev \
+libpulse-dev \
+libssl-dev \
+libudev-dev \
+libxcb1-dev \
+libxcb-shm0-dev \
+libxcb-image0-dev \
+libxss-dev \
+libxt-dev \
+libxtst-dev \
+mesa-common-dev
+
+# Obviously replace paths appropriately below
+# Now run pi-util/syncroot.sh on the compile m/c to grab the appropriate
+# bits of the root and fix up the paths.
+# e.g. ON COMPILE M/C in src dir:
+# pi-util/syncroot.sh my-pi: raspian_jessie_pi1
diff --git a/src/pi-util/pipaths.py b/src/pi-util/pipaths.py
new file mode 100755
index 0000000..097e857
--- /dev/null
+++ b/src/pi-util/pipaths.py
@@ -0,0 +1,11 @@
+pipaths=[
+    "src",
+    "src/native_client",
+    "src/third_party/ffmpeg",
+    "src/third_party/libjpeg_turbo",
+    "src/third_party/libyuv",
+    "src/third_party/pdfium",
+    "src/third_party/skia"]
+
+# Our base tag or commit no
+src_commit="60.0.3112.89"
diff --git a/src/pi-util/rebase_liblinks.py b/src/pi-util/rebase_liblinks.py
new file mode 100755
index 0000000..6a9a33f
--- /dev/null
+++ b/src/pi-util/rebase_liblinks.py
@@ -0,0 +1,37 @@
+#!/usr/bin/env python
+
+import os, sys
+from stat import *
+
+def walktree(top, callback, n, prefix):
+    '''recursively descend the directory tree rooted at top,
+       calling the callback function for each regular file'''
+
+    for f in os.listdir(top):
+        pathname = os.path.join(top, f)
+        mode = os.lstat(pathname).st_mode
+        if S_ISDIR(mode):
+            # It's a directory, recurse into it
+            walktree(pathname, callback, n+1, prefix)
+        elif S_ISLNK(mode):
+            # It's a file, call the callback function
+            callback(pathname, os.readlink(pathname), n, prefix)
+
+def visitfile(file, linkname, n, prefix):
+    if (linkname.startswith(prefix + 'lib/')):
+        newlink = "../" * n + linkname[len(prefix):]
+        print 'relinking', file, "->", newlink
+        os.remove(file)
+        os.symlink(newlink, file)
+
+if __name__ == '__main__':
+    argc = len(sys.argv)
+    if argc == 2:
+        walktree(sys.argv[1], visitfile, 0, "/")
+    elif argc == 3:
+        walktree(sys.argv[1], visitfile, 0, sys.argv[2])
+    else:
+        print "rebase_liblinks.py <local root> [<old sysroot>]"
+
+
+
diff --git a/src/pi-util/settag.py b/src/pi-util/settag.py
new file mode 100755
index 0000000..d908f63
--- /dev/null
+++ b/src/pi-util/settag.py
@@ -0,0 +1,60 @@
+#!/usr/bin/env python
+
+import sys, os, subprocess
+
+# Local
+import pipaths
+import gitscan
+import dodiff
+import argparse
+
+def set_version(verstr):
+    pathname = "components/version_info/pi_patch_version_values.h"
+
+    with open(pathname, "wt") as f:
+        f.write("// Pi patch version - generated by pi-util/settag.py\n")
+        f.write('#define PI_PATCH_VERSION_STRING "' + verstr + '"\n')
+
+    subprocess.check_call(["git", "add", pathname])
+    subprocess.check_call(["git", "commit", "-m", "Update pi patch version to " + verstr])
+
+
+def set_tag(verstr):
+    newtag = "pi/" + pipaths.src_commit + "/" + verstr
+    print "Setting tag: " + newtag
+    if gitscan.gitscan(["tag", newtag], quiet=True) != 0:
+        print "Tagging failed"
+        sys.exit(1)
+
+def set_tag_and_version(verstr):
+    set_version(verstr)
+    set_tag(verstr)
+
+if __name__ == '__main__':
+    argp = argparse.ArgumentParser(
+        description="Sets version info in pi_patch_version_values & tags source tree with it")
+    argp.add_argument("-p", action='store_true', help="Generate patch file")
+    argp.add_argument("verstr", help="Pi patch version string")
+    args = argp.parse_args()
+
+    patchpath = os.path.join("..", "v" + pipaths.src_commit + "_" + args.verstr + ".patch")
+
+    if args.p and os.path.exists(patchpath):
+        print "Patchfile", patchpath, "already exists"
+        sys.exit(1)
+
+    print "-- Checking all committed"
+    if gitscan.gitscan(["diff", "--name-status", "--exit-code"], quiet=True) != 0:
+        print "Status check failed - commit everything and try again"
+        sys.exit(1)
+
+    print "-- Generating & committing pi_patch_version_values.h"
+    set_version(args.verstr)
+    print "-- Generating tags"
+    set_tag(args.verstr)
+
+    if args.p:
+        print "-- Generating patch file: ", patchpath
+        with open(patchpath, "wt") as f:
+            dodiff.doscan(f)
+
diff --git a/src/pi-util/syncroot.sh b/src/pi-util/syncroot.sh
new file mode 100755
index 0000000..a0fa535
--- /dev/null
+++ b/src/pi-util/syncroot.sh
@@ -0,0 +1,51 @@
+set -e
+
+if [ "$1" == "" ]; then
+  echo Usage: $0 \<src_dir\> [\<rootname\>]
+  echo src_dir is a source for rsync so may contain m/c name.
+  echo rootname will be set to \"raspian_stretch_pi1\" if missing
+  echo e.g.: pi-util/syncroot.sh my-pi: raspian_stretch_pi1
+  exit 1
+fi
+
+SYSROOT_NAME=$2
+if [ "$SYSROOT_NAME" == "" ]; then
+  SYSROOT_NAME=raspian_stretch_pi1
+fi
+
+DST_ROOT=`gclient root`
+DST=$DST_ROOT/src/build/linux/$SYSROOT_NAME-sysroot
+SRC=$1
+
+if [ ! -d $DST_ROOT/src/build/linux ]; then
+  echo We don\'t appear to be in a Chrome build tree
+  exit 1
+fi
+
+echo Sync src:  $SRC
+echo Sync dest: $DST
+
+mkdir -p $DST/lib
+mkdir -p $DST/opt/vc/include
+mkdir -p $DST/usr/lib/pkgconfig
+mkdir -p $DST/usr/bin
+mkdir -p $DST/usr/share
+
+#### MUST NOT include /opt/vc/include/*GL*
+# Creates conflicts with GL includes inside Chrome
+
+rsync -rl $SRC/lib/arm-linux-gnueabihf $DST/lib
+rsync -rl $SRC/opt/vc/lib $DST/opt/vc
+rsync -rl $SRC/opt/vc/include/interface $DST/opt/vc/include
+rsync -rl $SRC/usr/lib/arm-linux-gnueabihf $DST/usr/lib
+rsync -rl $SRC/usr/lib/gcc $DST/usr/lib
+rsync -rl $SRC/usr/include $DST/usr
+rsync -rl $SRC/usr/share/pkgconfig $DST/usr/share
+rsync -rl $SRC/usr/bin/cups-config $DST/usr/bin
+
+cd $DST/usr/lib/pkgconfig
+ln -sf ../arm-linux-gnueabihf/pkgconfig/* .
+cd ../../../../../..
+pi-util/rebase_liblinks.py $DST
+
+
diff --git a/src/sandbox/linux/services/proc_util.cc b/src/sandbox/linux/services/proc_util.cc
index b6d58de..f3e71d7 100644
--- a/src/sandbox/linux/services/proc_util.cc
+++ b/src/sandbox/linux/services/proc_util.cc
@@ -17,6 +17,8 @@
 #include "base/posix/eintr_wrapper.h"
 #include "base/strings/string_number_conversions.h"
 
+#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+
 namespace sandbox {
 namespace {
 
diff --git a/src/services/ui/public/cpp/bitmap/child_shared_bitmap_manager.cc b/src/services/ui/public/cpp/bitmap/child_shared_bitmap_manager.cc
index 6e0b945..c9e5872 100644
--- a/src/services/ui/public/cpp/bitmap/child_shared_bitmap_manager.cc
+++ b/src/services/ui/public/cpp/bitmap/child_shared_bitmap_manager.cc
@@ -14,6 +14,8 @@
 #include "base/process/process_metrics.h"
 #include "base/trace_event/trace_event.h"
 #include "build/build_config.h"
+#include "media/base/video_frame.h"
+#include "media/filters/mmal_video_decoder.h"
 #include "mojo/public/cpp/system/platform_handle.h"
 #include "ui/gfx/geometry/size.h"
 
@@ -57,6 +59,24 @@ class ChildSharedBitmap : public cc::SharedBitmap {
   std::unique_ptr<base::SharedMemory> shared_memory_holder_;
 };
 
+// Keeps a ref on a frame so we don't reuse it before the host has
+// finished with it
+class FrameSharedBitmap : public cc::SharedBitmap {
+ public:
+  FrameSharedBitmap(scoped_refptr<media::VideoFrame> frame,
+                    const cc::SharedBitmapId& id)
+      : cc::SharedBitmap(frame->data(0), id, 0),
+        frame_(frame)
+  {
+  }
+
+  ~FrameSharedBitmap() override {
+  }
+
+ private:
+  scoped_refptr<media::VideoFrame> frame_;
+};
+
 // Collect extra information for debugging bitmap creation failures.
 void CollectMemoryUsageAndDie(const gfx::Size& size, size_t alloc_size) {
 #if defined(OS_WIN)
@@ -133,6 +153,51 @@ ChildSharedBitmapManager::AllocateSharedBitmap(const gfx::Size& size) {
       shared_bitmap_manager_ptr_, std::move(memory), id, sequence_number);
 }
 
+static void kill_shared_id(
+  scoped_refptr<cc::mojom::ThreadSafeSharedBitmapManagerPtr> message_filter,
+  const cc::SharedBitmapId id)
+{
+  (*message_filter)->DidDeleteSharedBitmap(id);
+}
+
+std::unique_ptr<cc::SharedBitmap> ChildSharedBitmapManager::AllocateSharedFrame(
+    const scoped_refptr<media::VideoFrame>& video_frame) {
+
+  const scoped_refptr<media::MmalVideoFrame> mmal_frame = media::MmalVideoFrame::Coerce(video_frame);
+
+  // Give up if this doesn't look like a shared frame
+  if (mmal_frame == nullptr || !mmal_frame->shared_memory_handle().IsValid())
+  {
+//    LOG(ERROR) << "Not shared: frame=" << mmal_frame;
+    return std::unique_ptr<cc::SharedBitmap>();
+  }
+
+//  const cc::SharedBitmapId& existing_id = mmal_frame->get_id();
+  const cc::SharedBitmapId& existing_id(mmal_frame->get_id());
+  if (!existing_id.IsZero()) {
+      return base::MakeUnique<FrameSharedBitmap>(mmal_frame, existing_id);
+  }
+  else
+  {
+      const size_t memory_size = video_frame->stride(0) * video_frame->rows(0);
+      const cc::SharedBitmapId id = cc::SharedBitmap::GenerateId();
+
+      base::SharedMemoryHandle handle_to_send =
+          base::SharedMemory::DuplicateHandle(mmal_frame->shared_memory_handle());
+      if (!base::SharedMemory::IsHandleValid(handle_to_send)) {
+        LOG(ERROR) << "Failed to duplicate shared memory handle for bitmap.";
+        return nullptr;
+      }
+
+      (*shared_bitmap_manager_ptr_)->DidAllocateSharedBitmap(
+          mojo::WrapSharedMemoryHandle(handle_to_send, memory_size, true /* read_only */),
+          id, true /* is_image */);
+
+      mmal_frame->set_id_and_kill(id, base::Bind(kill_shared_id, shared_bitmap_manager_ptr_, id));
+      return base::MakeUnique<FrameSharedBitmap>(mmal_frame, id);
+  }
+}
+
 std::unique_ptr<cc::SharedBitmap>
 ChildSharedBitmapManager::GetSharedBitmapFromId(const gfx::Size&,
                                                 const cc::SharedBitmapId&) {
@@ -167,7 +232,7 @@ uint32_t ChildSharedBitmapManager::NotifyAllocatedSharedBitmap(
   {
     base::AutoLock lock(lock_);
     (*shared_bitmap_manager_ptr_)
-        ->DidAllocateSharedBitmap(std::move(buffer_handle), id);
+        ->DidAllocateSharedBitmap(std::move(buffer_handle), id, false);
     return ++last_sequence_number_;
   }
 }
diff --git a/src/services/ui/public/cpp/bitmap/child_shared_bitmap_manager.h b/src/services/ui/public/cpp/bitmap/child_shared_bitmap_manager.h
index 98e5040..8e1585a 100644
--- a/src/services/ui/public/cpp/bitmap/child_shared_bitmap_manager.h
+++ b/src/services/ui/public/cpp/bitmap/child_shared_bitmap_manager.h
@@ -29,6 +29,8 @@ class ChildSharedBitmapManager : public cc::SharedBitmapManager {
   // cc::SharedBitmapManager implementation.
   std::unique_ptr<cc::SharedBitmap> AllocateSharedBitmap(
       const gfx::Size& size) override;
+  std::unique_ptr<cc::SharedBitmap> AllocateSharedFrame(
+      const scoped_refptr<media::VideoFrame>& video_frame) override;
   std::unique_ptr<cc::SharedBitmap> GetSharedBitmapFromId(
       const gfx::Size&,
       const cc::SharedBitmapId&) override;
diff --git a/src/skia/BUILD.gn b/src/skia/BUILD.gn
index 07ff372a3..e36d888 100644
--- a/src/skia/BUILD.gn
+++ b/src/skia/BUILD.gn
@@ -608,6 +608,25 @@ if (current_cpu == "x86" || current_cpu == "x64") {
   }
 }
 
+if (current_cpu == "arm") {
+  source_set("skia_opts_neon") {
+    sources = skia_opts.neon_sources
+    cflags = [
+      "-mfpu=neon",
+    ]
+    visibility = [ ":skia_opts" ]
+    configs -= [ "//build/config/compiler:chromium_code",
+      "//build/config/compiler:compiler_arm_fpu",
+    ]
+    configs += [
+      ":skia_config",
+      ":skia_library_config",
+      "//build/config/compiler:no_chromium_code",
+      "//build/config/compiler:force_march_armv7",
+    ]
+  }
+}
+
 source_set("skia_opts") {
   cflags = []
   defines = []
@@ -632,17 +651,12 @@ source_set("skia_opts") {
       cflags += [ "-fomit-frame-pointer" ]
     }
 
-    if (arm_version >= 7) {
+    if (arm_version >= 6) {
       sources = skia_opts.armv7_sources
       if (arm_use_neon || arm_optionally_use_neon) {
-        sources += skia_opts.neon_sources
-
-        # Root build config sets -mfpu=$arm_fpu, which we expect to be neon
-        # when running this.
-        if (!arm_use_neon) {
-          configs -= [ "//build/config/compiler:compiler_arm_fpu" ]
-          cflags += [ "-mfpu=neon" ]
-        }
+        deps += [
+          ":skia_opts_neon",
+        ]
       }
     } else {
       sources = skia_opts.none_sources
diff --git a/src/third_party/WebKit/Source/platform/wtf/CPU.h b/src/third_party/WebKit/Source/platform/wtf/CPU.h
index dad89b5..8205b08 100644
--- a/src/third_party/WebKit/Source/platform/wtf/CPU.h
+++ b/src/third_party/WebKit/Source/platform/wtf/CPU.h
@@ -83,7 +83,7 @@
 
 #elif defined(__ARM_ARCH_6__) || defined(__ARM_ARCH_6J__) ||  \
     defined(__ARM_ARCH_6K__) || defined(__ARM_ARCH_6Z__) ||   \
-    defined(__ARM_ARCH_6ZK__) || defined(__ARM_ARCH_6T2__) || \
+    defined(__ARM_ARCH_6ZK__) || defined(__ARM_ARCH_6KZ__) || defined(__ARM_ARCH_6T2__) || \
     defined(__ARMV6__)
 #define WTF_ARM_ARCH_VERSION 6
 
diff --git a/src/third_party/boringssl/linux-arm/crypto/chacha/chacha-armv4.S b/src/third_party/boringssl/linux-arm/crypto/chacha/chacha-armv4.S
index 0784fc7..23fbe3b 100644
--- a/src/third_party/boringssl/linux-arm/crypto/chacha/chacha-armv4.S
+++ b/src/third_party/boringssl/linux-arm/crypto/chacha/chacha-armv4.S
@@ -9,7 +9,8 @@
 .code	32
 #endif
 
-#if defined(__thumb2__) || defined(__clang__)
+@ #if defined(__thumb2__) || defined(__clang__)
+#if defined(__thumb2__)
 #define ldrhsb	ldrbhs
 #endif
 
diff --git a/src/third_party/leveldatabase/BUILD.gn b/src/third_party/leveldatabase/BUILD.gn
index 72b8759..6204c76 100644
--- a/src/third_party/leveldatabase/BUILD.gn
+++ b/src/third_party/leveldatabase/BUILD.gn
@@ -139,6 +139,10 @@ static_library("leveldatabase") {
       cflags += [ "/wd4717" ]
     }
   }
+  else
+  {
+    cflags = [ "-Wno-deprecated-declarations" ]
+  }
 }
 
 if (!is_ios && !is_android) {
diff --git a/src/third_party/libdrm/BUILD.gn b/src/third_party/libdrm/BUILD.gn
index 7f040070..1f939db 100644
--- a/src/third_party/libdrm/BUILD.gn
+++ b/src/third_party/libdrm/BUILD.gn
@@ -21,7 +21,7 @@ if (!use_system_libdrm) {
       "src/include/drm",
     ]
     if (is_clang) {
-      cflags = [ "-Wno-enum-conversion" ]
+      cflags = [ "-Wno-enum-conversion", "-Wno-deprecated-declarations" ]
     }
   }
 
diff --git a/src/third_party/libwebp/BUILD.gn b/src/third_party/libwebp/BUILD.gn
index 206fd73..3b595d7 100644
--- a/src/third_party/libwebp/BUILD.gn
+++ b/src/third_party/libwebp/BUILD.gn
@@ -15,8 +15,11 @@ set_opt_level =
 # webp's dsp code can be built for all configurations. Skipping it when both
 # arm_use_neon and arm_optionally_use_neon are false will result in link errors
 # for its dsp init functions.
+#optionally_use_dsp_neon = true
 use_dsp_neon =
-    current_cpu == "arm64" || (current_cpu == "arm" && arm_version >= 7)
+    current_cpu == "arm64" || (current_cpu == "arm" && arm_version >= 6 &&
+                               (arm_use_neon || arm_optionally_use_neon))
+#    current_cpu == "arm64" || (current_cpu == "arm" && (arm_version >= 7 || optionally_use_dsp_neon))
 
 source_set("libwebp_webp") {
   sources = [
@@ -97,6 +100,8 @@ static_library("libwebp_mux") {
 }
 
 static_library("libwebp_dsp") {
+  defines = []
+
   sources = [
     "dsp/alpha_processing.c",
     "dsp/alpha_processing_mips_dsp_r2.c",
@@ -169,6 +174,14 @@ static_library("libwebp_dsp") {
       "WEBP_HAVE_SSE41",
     ]
   }
+  if (use_dsp_neon) {
+    if (arm_version < 7) {
+      defines += [ "WEBP_HAVE_NEON" ]
+    }
+    if (arm_optionally_use_neon) {
+      defines += [ "WEBP_HAVE_NEON_RTCD" ]
+    }
+  }
 }
 
 static_library("libwebp_dsp_sse41") {
@@ -248,6 +261,11 @@ if (use_dsp_neon) {
       # behavior similar to *.c.neon in an Android.mk
       configs -= [ "//build/config/compiler:compiler_arm_fpu" ]
       cflags = [ "-mfpu=neon" ]
+      if (arm_version < 7) {
+        configs += [
+          "//build/config/compiler:force_march_armv7",
+        ]
+      }
     } else if (current_cpu == "arm64" && !is_clang) {
       # avoid an ICE with gcc-4.9: b/15574841
       cflags = [ "-frename-registers" ]
diff --git a/src/third_party/libwebp/dsp/cpu.c b/src/third_party/libwebp/dsp/cpu.c
index b5583b6..822b2af 100644
--- a/src/third_party/libwebp/dsp/cpu.c
+++ b/src/third_party/libwebp/dsp/cpu.c
@@ -180,11 +180,18 @@ static int AndroidCPUInfo(CPUFeature feature) {
 }
 VP8CPUInfo VP8GetCPUInfo = AndroidCPUInfo;
 #elif defined(WEBP_USE_NEON)
+#if defined(__linux__) && defined(WEBP_HAVE_NEON_RTCD)
+#include <sys/auxv.h>
+#endif
+
 // define a dummy function to enable turning off NEON at runtime by setting
 // VP8DecGetCPUInfo = NULL
 static int armCPUInfo(CPUFeature feature) {
   if (feature != kNEON) return 0;
 #if defined(__linux__) && defined(WEBP_HAVE_NEON_RTCD)
+#if 1
+  return (getauxval(AT_HWCAP) & HWCAP_ARM_NEON) != 0;
+#else
   {
     int has_neon = 0;
     char line[200];
@@ -201,6 +208,7 @@ static int armCPUInfo(CPUFeature feature) {
     fclose(cpuinfo);
     return has_neon;
   }
+#endif
 #else
   return 1;
 #endif
diff --git a/src/native_client/src/include/concurrency_ops.h b/src/native_client/src/include/concurrency_ops.h
old mode 100644
new mode 100755
index 82e313c..c78a878
--- a/src/native_client/src/include/concurrency_ops.h
+++ b/src/native_client/src/include/concurrency_ops.h
@@ -33,13 +33,13 @@ static INLINE void NaClWriteMemoryBarrier(void) {
 
 static INLINE void NaClWriteMemoryBarrier(void) {
   /* Note that this depends on ARMv7. */
+#if __ARM_ARCH >= 7
   __asm__ __volatile__("dsb");
-
-  /*
-   * We could support ARMv6 by instead using:
-   * __asm__ __volatile__("mcr p15, 0, %0, c7, c10, 5"
-   *                      : : "r" (0) : "memory");
-   */
+#else
+//  __asm__ __volatile__("mcr p15, 0, %0, c7, c10, 5"
+//                        : : "r" (0) : "memory");
+  __sync_synchronize();
+#endif
 }
 
 #elif NACL_ARCH(NACL_BUILD_ARCH) == NACL_mips
diff --git a/src/third_party/ffmpeg/BUILD.gn b/src/third_party/ffmpeg/BUILD.gn
index 2afab74..f365802 100755
--- a/src/third_party/ffmpeg/BUILD.gn
+++ b/src/third_party/ffmpeg/BUILD.gn
@@ -413,6 +413,8 @@ if (is_component_ffmpeg) {
     deps = [
       ":ffmpeg_internal",
     ]
+    output_name = "ffmpeg_chrome"
+    output_extension = "so.60"
 
     # So we can append below and assume they're defined.
     ldflags = []
diff --git a/src/third_party/ffmpeg/chromium/config/Chrome/linux/arm/config.h b/src/third_party/ffmpeg/chromium/config/Chrome/linux/arm/config.h
old mode 100644
new mode 100755
index c08af3e..5690063
--- a/src/third_party/ffmpeg/chromium/config/Chrome/linux/arm/config.h
+++ b/src/third_party/ffmpeg/chromium/config/Chrome/linux/arm/config.h
@@ -40,7 +40,7 @@
 #define ARCH_X86_64 0
 #define HAVE_ARMV5TE 1
 #define HAVE_ARMV6 1
-#define HAVE_ARMV6T2 1
+#define HAVE_ARMV6T2 0
 #define HAVE_ARMV8 0
 #define HAVE_NEON 0
 #define HAVE_VFP 1
@@ -84,7 +84,7 @@
 #define HAVE_MMI 0
 #define HAVE_ARMV5TE_EXTERNAL 1
 #define HAVE_ARMV6_EXTERNAL 1
-#define HAVE_ARMV6T2_EXTERNAL 1
+#define HAVE_ARMV6T2_EXTERNAL 0
 #define HAVE_ARMV8_EXTERNAL 0
 #define HAVE_NEON_EXTERNAL 0
 #define HAVE_VFP_EXTERNAL 1
@@ -128,7 +128,7 @@
 #define HAVE_MMI_EXTERNAL 0
 #define HAVE_ARMV5TE_INLINE 1
 #define HAVE_ARMV6_INLINE 1
-#define HAVE_ARMV6T2_INLINE 1
+#define HAVE_ARMV6T2_INLINE 0
 #define HAVE_ARMV8_INLINE 0
 #define HAVE_NEON_INLINE 0
 #define HAVE_VFP_INLINE 1
@@ -569,7 +569,7 @@
 #define CONFIG_PIC 1
 #define CONFIG_POD2MAN 1
 #define CONFIG_RAISE_MAJOR 0
-#define CONFIG_THUMB 1
+#define CONFIG_THUMB 0
 #define CONFIG_VALGRIND_BACKTRACE 0
 #define CONFIG_XMM_CLOBBER_TEST 0
 #define CONFIG_AANDCTTABLES 0
diff --git a/src/third_party/libjpeg_turbo/simd/jsimd_arm.c b/src/third_party/libjpeg_turbo/simd/jsimd_arm.c
old mode 100644
new mode 100755
index 197eb61..d4017d2
--- a/src/third_party/libjpeg_turbo/simd/jsimd_arm.c
+++ b/src/third_party/libjpeg_turbo/simd/jsimd_arm.c
@@ -33,6 +33,7 @@ static unsigned int simd_huffman = 1;
 
 #define SOMEWHAT_SANE_PROC_CPUINFO_SIZE_LIMIT (1024 * 1024)
 
+#if !defined(__linux__)
 LOCAL(int)
 check_feature (char *buffer, char *feature)
 {
@@ -89,6 +90,20 @@ parse_proc_cpuinfo (int bufsize)
   return 1;
 }
 
+#else
+#include <sys/auxv.h>
+#include <stdio.h>
+
+static int parse_proc_cpuinfo (int bufsize)
+{
+  const unsigned long auxval = getauxval(AT_HWCAP);
+
+  // Documentation suggests that getauxval(AT_HWCAP) should return a pointer
+  // to a bit array, but evidence suggests it returns a simple bit field
+  simd_support = (auxval & HWCAP_ARM_NEON) != 0 ? JSIMD_ARM_NEON : 0;
+  return 1;
+}
+#endif  // SK_BUILD_FOR_ANDROID
 #endif
 
 /*
diff --git a/src/third_party/libyuv/BUILD.gn b/src/third_party/libyuv/BUILD.gn
old mode 100644
new mode 100755
index 8057cff..fcae025
--- a/src/third_party/libyuv/BUILD.gn
+++ b/src/third_party/libyuv/BUILD.gn
@@ -140,6 +140,11 @@ static_library("libyuv_internal") {
     deps += [ "//third_party:jpeg_includes" ]
   }
 
+  if (current_cpu == "arm" && arm_version < 7) {
+    # This emables the neon test even if the current compile doesn't support it
+    defines += [ "LIBYUV_NEON" ]
+  }
+
   if (libyuv_use_neon) {
     deps += [ ":libyuv_neon" ]
   }
@@ -189,6 +194,11 @@ if (libyuv_use_neon) {
 
     if (current_cpu != "arm64") {
       configs -= [ "//build/config/compiler:compiler_arm_fpu" ]
+      if (arm_version < 7) {
+        configs += [
+          "//build/config/compiler:force_march_armv7",
+        ]
+      }
       cflags = [ "-mfpu=neon" ]
     }
   }
diff --git a/src/third_party/libyuv/source/cpu_id.cc b/src/third_party/libyuv/source/cpu_id.cc
old mode 100644
new mode 100755
index b3eef70..f85115e
--- a/src/third_party/libyuv/source/cpu_id.cc
+++ b/src/third_party/libyuv/source/cpu_id.cc
@@ -140,6 +140,18 @@ int GetXCR0() {
 #pragma optimize("g", on)
 #endif
 
+#if 1
+// This is (a) simpler and (b) works in snadbox vs the /proc/cpuinfo method
+#include <sys/auxv.h>
+
+int ArmCpuCaps(const char* cpuinfo_name) {
+  const unsigned long auxval = getauxval(AT_HWCAP);
+
+  // Documentation suggests that getauxval(AT_HWCAP) should return a pointer
+  // to a bit array, but evidence suggests it returns a simple bit field
+  return ((auxval & HWCAP_ARM_NEON) != 0 ? kCpuHasNEON : 0);
+}
+#else
 // based on libvpx arm_cpudetect.c
 // For Arm, but public to allow testing on any CPU
 LIBYUV_API SAFEBUFFERS int ArmCpuCaps(const char* cpuinfo_name) {
@@ -168,6 +180,7 @@ LIBYUV_API SAFEBUFFERS int ArmCpuCaps(const char* cpuinfo_name) {
   fclose(f);
   return 0;
 }
+#endif
 
 LIBYUV_API SAFEBUFFERS int MipsCpuCaps(const char* cpuinfo_name,
                                        const char ase[]) {
diff --git a/src/third_party/libyuv/source/rotate_neon.cc b/src/third_party/libyuv/source/rotate_neon.cc
old mode 100644
new mode 100755
diff --git a/src/third_party/pdfium/third_party/base/allocator/partition_allocator/spin_lock.cc b/src/third_party/pdfium/third_party/base/allocator/partition_allocator/spin_lock.cc
old mode 100644
new mode 100755
index 803e4d6..8c15de6
--- a/src/third_party/pdfium/third_party/base/allocator/partition_allocator/spin_lock.cc
+++ b/src/third_party/pdfium/third_party/base/allocator/partition_allocator/spin_lock.cc
@@ -27,7 +27,11 @@
 #if defined(ARCH_CPU_X86_64) || defined(ARCH_CPU_X86)
 #define YIELD_PROCESSOR __asm__ __volatile__("pause")
 #elif defined(ARCH_CPU_ARMEL) || defined(ARCH_CPU_ARM64)
+#if __ARM_ARCH >= 7
 #define YIELD_PROCESSOR __asm__ __volatile__("yield")
+#else
+#define YIELD_PROCESSOR __asm__ __volatile__("nop")
+#endif
 #elif defined(ARCH_CPU_MIPSEL)
 // The MIPS32 docs state that the PAUSE instruction is a no-op on older
 // architectures (first added in MIPS32r2). To avoid assembler errors when
diff --git a/src/third_party/skia/gn/opts.gni b/src/third_party/skia/gn/opts.gni
index 34481db..f446fca 100644
--- a/src/third_party/skia/gn/opts.gni
+++ b/src/third_party/skia/gn/opts.gni
@@ -19,6 +19,7 @@ armv7 = [
 ]
 
 neon = [
+  "$_src/opts/SkOpts_neon.cpp",
   "$_src/opts/SkBitmapProcState_arm_neon.cpp",
   "$_src/opts/SkBitmapProcState_matrixProcs_neon.cpp",
   "$_src/opts/SkBlitMask_opts_arm_neon.cpp",
diff --git a/src/third_party/skia/include/core/SkImageGenerator.h b/src/third_party/skia/include/core/SkImageGenerator.h
old mode 100644
new mode 100755
index 4514a2d..25ff21c
--- a/src/third_party/skia/include/core/SkImageGenerator.h
+++ b/src/third_party/skia/include/core/SkImageGenerator.h
@@ -96,6 +96,11 @@ public:
      */
     bool getPixels(const SkImageInfo& info, void* pixels, size_t rowBytes);
 
+    virtual bool installBitmapPixels(SkBitmap * const bitmap)
+    {
+        return false;
+    }
+
     /**
      *  If decoding to YUV is supported, this returns true.  Otherwise, this
      *  returns false and does not modify any of the parameters.
diff --git a/src/third_party/skia/include/private/SkFixed.h b/src/third_party/skia/include/private/SkFixed.h
index 6361bda..eb04d97 100644
--- a/src/third_party/skia/include/private/SkFixed.h
+++ b/src/third_party/skia/include/private/SkFixed.h
@@ -96,9 +96,12 @@ inline SkFixed SkFixedMul_longlong(SkFixed a, SkFixed b) {
 
 
 #if defined(SK_CPU_ARM32)
+#if __ARM_ARCH >= 7
     /* This guy does not handle NaN or other obscurities, but is faster than
        than (int)(x*65536).  When built on Android with -Os, needs forcing
        to inline or we lose the speed benefit.
+
+       (Pi) It also doesn't exist on vfp versions <= 2
     */
     SK_ALWAYS_INLINE SkFixed SkFloatToFixed_arm(float x)
     {
@@ -107,6 +110,11 @@ inline SkFixed SkFixedMul_longlong(SkFixed a, SkFixed b) {
         memcpy(&y, &x, sizeof(y));
         return y;
     }
+
+    #undef SkFloatToFixed
+    #define SkFloatToFixed(x)  SkFloatToFixed_arm(x)
+#endif
+
     inline SkFixed SkFixedMul_arm(SkFixed x, SkFixed y)
     {
         int32_t t;
@@ -121,9 +129,6 @@ inline SkFixed SkFixedMul_longlong(SkFixed a, SkFixed b) {
     }
     #undef SkFixedMul
     #define SkFixedMul(x, y)        SkFixedMul_arm(x, y)
-
-    #undef SkFloatToFixed
-    #define SkFloatToFixed(x)  SkFloatToFixed_arm(x)
 #endif
 
 ///////////////////////////////////////////////////////////////////////////////
diff --git a/src/third_party/skia/src/core/SkAnalyticEdge.h b/src/third_party/skia/src/core/SkAnalyticEdge.h
index 6c75d15..8f70475 100644
--- a/src/third_party/skia/src/core/SkAnalyticEdge.h
+++ b/src/third_party/skia/src/core/SkAnalyticEdge.h
@@ -132,7 +132,11 @@ struct SkAnalyticCubicEdge : public SkAnalyticEdge {
 
 bool SkAnalyticEdge::setLine(const SkPoint& p0, const SkPoint& p1) {
 #if defined(__arm__)
+#if __ARM_ARCH >= 7
     asm volatile("dsb");  // crbug.com/710131
+#else
+    __sync_synchronize();
+#endif
 #endif
     fRiteE = nullptr;
 
diff --git a/src/third_party/skia/src/core/SkBitmapProcState.cpp b/src/third_party/skia/src/core/SkBitmapProcState.cpp
index 684555e..cbb98cd 100644
--- a/src/third_party/skia/src/core/SkBitmapProcState.cpp
+++ b/src/third_party/skia/src/core/SkBitmapProcState.cpp
@@ -19,7 +19,7 @@
 #include "SkImageEncoder.h"
 #include "SkResourceCache.h"
 
-#if defined(SK_ARM_HAS_NEON)
+#if !SK_ARM_NEON_IS_NONE
 // These are defined in src/opts/SkBitmapProcState_arm_neon.cpp
 extern const SkBitmapProcState::SampleProc32 gSkBitmapProcStateSample32_neon[];
 extern void  S16_D16_filter_DX_neon(const SkBitmapProcState&, const uint32_t*, int, uint16_t*);
@@ -278,7 +278,7 @@ bool SkBitmapProcState::chooseScanlineProcs(bool trivialMatrix, bool clampClamp)
                 return false;
         }
 
-#if !defined(SK_ARM_HAS_NEON)
+#if !SK_ARM_NEON_IS_ALWAYS
         static const SampleProc32 gSkBitmapProcStateSample32[] = {
             S32_opaque_D32_nofilter_DXDY,
             S32_alpha_D32_nofilter_DXDY,
diff --git a/src/third_party/skia/src/core/SkBitmapProcState_matrixProcs.cpp b/src/third_party/skia/src/core/SkBitmapProcState_matrixProcs.cpp
index 08753be..5c13e43 100644
--- a/src/third_party/skia/src/core/SkBitmapProcState_matrixProcs.cpp
+++ b/src/third_party/skia/src/core/SkBitmapProcState_matrixProcs.cpp
@@ -47,7 +47,7 @@ void decal_filter_scale(uint32_t dst[], SkFixed fx, SkFixed dx, int count);
 ///////////////////////////////////////////////////////////////////////////////
 
 // Compile neon code paths if needed
-#if defined(SK_ARM_HAS_NEON)
+#if !SK_ARM_NEON_IS_ALWAYS
 
 // These are defined in src/opts/SkBitmapProcState_matrixProcs_neon.cpp
 extern const SkBitmapProcState::MatrixProc ClampX_ClampY_Procs_neon[];
diff --git a/src/third_party/skia/src/core/SkBlitter_RGB16.cpp b/src/third_party/skia/src/core/SkBlitter_RGB16.cpp
index 6330a39..7e07f28 100644
--- a/src/third_party/skia/src/core/SkBlitter_RGB16.cpp
+++ b/src/third_party/skia/src/core/SkBlitter_RGB16.cpp
@@ -15,7 +15,7 @@
 #include "SkUtilsArm.h"
 #include "SkXfermodePriv.h"
 
-#if defined(SK_ARM_HAS_NEON) && defined(SK_CPU_LENDIAN)
+#if SK_ARM_NEON_IS_ALWAYS && defined(SK_CPU_LENDIAN)
     #include <arm_neon.h>
 extern void SkRGB16BlitterBlitV_neon(uint16_t* device,
                                      int height,
@@ -374,7 +374,7 @@ void SkRGB16_Opaque_Blitter::blitMask(const SkMask& mask,
     unsigned    maskRB = mask.fRowBytes - width;
     uint32_t    expanded32 = fExpandedRaw16;
 
-#if defined(SK_ARM_HAS_NEON) && defined(SK_CPU_LENDIAN)
+#if SK_ARM_NEON_IS_ALWAYS && defined(SK_CPU_LENDIAN)
 #define    UNROLL    8
     do {
         int w = width;
@@ -466,7 +466,7 @@ void SkRGB16_Opaque_Blitter::blitV(int x, int y, int height, SkAlpha alpha) {
     unsigned scale5 = SkAlpha255To256(alpha) >> 3;
     uint32_t src32 =  fExpandedRaw16 * scale5;
     scale5 = 32 - scale5;
-#if defined(SK_ARM_HAS_NEON) && defined(SK_CPU_LENDIAN)
+#if SK_ARM_NEON_IS_ALWAYS && defined(SK_CPU_LENDIAN)
     SkRGB16BlitterBlitV_neon(device, height, deviceRB, scale5, src32);
 #else
     do {
@@ -645,7 +645,7 @@ void SkRGB16_Blitter::blitV(int x, int y, int height, SkAlpha alpha) {
     unsigned scale5 = SkAlpha255To256(alpha) * fScale >> (8 + 3);
     uint32_t src32 =  fExpandedRaw16 * scale5;
     scale5 = 32 - scale5;
-#if defined(SK_ARM_HAS_NEON) && defined(SK_CPU_LENDIAN)
+#if SK_ARM_NEON_IS_ALWAYS && defined(SK_CPU_LENDIAN)
     SkRGB16BlitterBlitV_neon(device, height, deviceRB, scale5, src32);
 #else
     do {
diff --git a/src/third_party/skia/src/core/SkCpu.cpp b/src/third_party/skia/src/core/SkCpu.cpp
index d90e482..659f543 100644
--- a/src/third_party/skia/src/core/SkCpu.cpp
+++ b/src/third_party/skia/src/core/SkCpu.cpp
@@ -89,11 +89,11 @@
     // asm/hwcap.h and sys/auxv.h won't be present on NDK builds before API v21.
     #include <asm/hwcap.h>
     #include <sys/auxv.h>
-
     static uint32_t read_cpu_features() {
         uint32_t features = 0;
         uint32_t hwcaps = getauxval(AT_HWCAP);
         if (hwcaps & HWCAP_VFPv4) { features |= SkCpu::NEON|SkCpu::NEON_FMA|SkCpu::VFP_FP16; }
+        if (hwcaps & HWCAP_NEON) { features |= SkCpu::NEON; }
         return features;
     }
 
diff --git a/src/third_party/skia/src/core/SkOpts.cpp b/src/third_party/skia/src/core/SkOpts.cpp
index 33c3690..236139c 100644
--- a/src/third_party/skia/src/core/SkOpts.cpp
+++ b/src/third_party/skia/src/core/SkOpts.cpp
@@ -101,6 +101,7 @@ namespace SkOpts {
     void Init_avx();
     void Init_hsw();
     void Init_crc32();
+    void Init_neon();
 
     static void init() {
 #if !defined(SK_BUILD_NO_OPTS)
@@ -114,6 +115,8 @@ namespace SkOpts {
     #elif defined(SK_CPU_ARM64)
         if (SkCpu::Supports(SkCpu::CRC32)) { Init_crc32(); }
 
+    #elif defined(SK_CPU_ARM32)
+        if (SkCpu::Supports(SkCpu::NEON)) { Init_neon(); }
     #endif
 #endif
     }
diff --git a/src/third_party/skia/src/core/SkUtilsArm.h b/src/third_party/skia/src/core/SkUtilsArm.h
index 0d35193..dde933b 100644
--- a/src/third_party/skia/src/core/SkUtilsArm.h
+++ b/src/third_party/skia/src/core/SkUtilsArm.h
@@ -8,12 +8,75 @@
 #ifndef SkUtilsArm_DEFINED
 #define SkUtilsArm_DEFINED
 
-#include "SkTypes.h"
+#include "SkCpu.h"
+#include "SkUtils.h"
 
-#if defined(SK_ARM_HAS_NEON)
-    #define SK_ARM_NEON_WRAP(x) (x ## _neon)
+// Define SK_ARM_NEON_MODE to one of the following values
+// corresponding respectively to:
+// - No ARM Neon support at all  (not targetting ARMv7-A, or don't have NEON)
+// - Full ARM Neon support (i.e. assume the CPU always supports it)
+// - Optional ARM Neon support (i.e. probe CPU at runtime)
+//
+#define SK_ARM_NEON_MODE_NONE     0
+#define SK_ARM_NEON_MODE_ALWAYS   1
+#define SK_ARM_NEON_MODE_DYNAMIC  2
+
+#if defined(SK_ARM_HAS_OPTIONAL_NEON)
+#  define SK_ARM_NEON_MODE  SK_ARM_NEON_MODE_DYNAMIC
+#elif defined(SK_ARM_HAS_NEON)
+#  define SK_ARM_NEON_MODE  SK_ARM_NEON_MODE_ALWAYS
+#else
+#  define SK_ARM_NEON_MODE  SK_ARM_NEON_MODE_NONE
+#endif
+
+// Convenience test macros, always defined as 0 or 1
+#define SK_ARM_NEON_IS_NONE    (SK_ARM_NEON_MODE == SK_ARM_NEON_MODE_NONE)
+#define SK_ARM_NEON_IS_ALWAYS  (SK_ARM_NEON_MODE == SK_ARM_NEON_MODE_ALWAYS)
+#define SK_ARM_NEON_IS_DYNAMIC (SK_ARM_NEON_MODE == SK_ARM_NEON_MODE_DYNAMIC)
+
+// The sk_cpu_arm_has_neon() function returns true iff the target device
+// is ARMv7-A and supports Neon instructions. In DYNAMIC mode, this actually
+// probes the CPU at runtime (and caches the result).
+
+static inline bool sk_cpu_arm_has_neon(void) {
+#if SK_ARM_NEON_IS_NONE
+    return false;
 #else
-    #define SK_ARM_NEON_WRAP(x) (x)
+    return SkCpu::Supports(SkCpu::NEON);
+#endif
+}
+
+// Use SK_ARM_NEON_WRAP(symbol) to map 'symbol' to a NEON-specific symbol
+// when applicable. This will transform 'symbol' differently depending on
+// the current NEON configuration, i.e.:
+//
+//    NONE           -> 'symbol'
+//    ALWAYS         -> 'symbol_neon'
+//    DYNAMIC        -> 'symbol' or 'symbol_neon' depending on runtime check.
+//
+// The goal is to simplify user code, for example:
+//
+//      return SK_ARM_NEON_WRAP(do_something)(params);
+//
+// Replaces the equivalent:
+//
+//     #if SK_ARM_NEON_IS_NONE
+//       return do_something(params);
+//     #elif SK_ARM_NEON_IS_ALWAYS
+//       return do_something_neon(params);
+//     #elif SK_ARM_NEON_IS_DYNAMIC
+//       if (sk_cpu_arm_has_neon())
+//         return do_something_neon(params);
+//       else
+//         return do_something(params);
+//     #endif
+//
+#if SK_ARM_NEON_IS_NONE
+#  define SK_ARM_NEON_WRAP(x)   (x)
+#elif SK_ARM_NEON_IS_ALWAYS
+#  define SK_ARM_NEON_WRAP(x)   (x ## _neon)
+#elif SK_ARM_NEON_IS_DYNAMIC
+#  define SK_ARM_NEON_WRAP(x)   (sk_cpu_arm_has_neon() ? x ## _neon : x)
 #endif
 
 #endif // SkUtilsArm_DEFINED
diff --git a/src/third_party/skia/src/opts/SkOpts_neon.cpp b/src/third_party/skia/src/opts/SkOpts_neon.cpp
new file mode 100644
index 0000000..4f9e161
--- /dev/null
+++ b/src/third_party/skia/src/opts/SkOpts_neon.cpp
@@ -0,0 +1,47 @@
+/*
+ * Copyright 2015 Google Inc.
+ *
+ * Use of this source code is governed by a BSD-style license that can be
+ * found in the LICENSE file.
+ */
+
+#include "SkOpts.h"
+
+#define SK_OPTS_NS sk_neon
+#include "SkBlitMask_opts.h"
+#include "SkBlitRow_opts.h"
+#include "SkBlurImageFilter_opts.h"
+#include "SkMorphologyImageFilter_opts.h"
+#include "SkSwizzler_opts.h"
+#include "SkXfermode_opts.h"
+
+namespace SkOpts {
+    void Init_neon() {
+        create_xfermode = sk_neon::create_xfermode;
+
+        box_blur_xx = sk_neon::box_blur_xx;
+        box_blur_xy = sk_neon::box_blur_xy;
+        box_blur_yx = sk_neon::box_blur_yx;
+
+        dilate_x = sk_neon::dilate_x;
+        dilate_y = sk_neon::dilate_y;
+         erode_x = sk_neon::erode_x;
+         erode_y = sk_neon::erode_y;
+
+        blit_mask_d32_a8 = sk_neon::blit_mask_d32_a8;
+
+        blit_row_color32     = sk_neon::blit_row_color32;
+        blit_row_s32a_opaque = sk_neon::blit_row_s32a_opaque;
+
+        RGBA_to_BGRA          = sk_neon::RGBA_to_BGRA;
+        RGBA_to_rgbA          = sk_neon::RGBA_to_rgbA;
+        RGBA_to_bgrA          = sk_neon::RGBA_to_bgrA;
+        RGB_to_RGB1           = sk_neon::RGB_to_RGB1;
+        RGB_to_BGR1           = sk_neon::RGB_to_BGR1;
+        gray_to_RGB1          = sk_neon::gray_to_RGB1;
+        grayA_to_RGBA         = sk_neon::grayA_to_RGBA;
+        grayA_to_rgbA         = sk_neon::grayA_to_rgbA;
+        inverted_CMYK_to_RGB1 = sk_neon::inverted_CMYK_to_RGB1;
+        inverted_CMYK_to_BGR1 = sk_neon::inverted_CMYK_to_BGR1;
+    }
+}
